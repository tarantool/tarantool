remote = require('net.box')
---
...
test_run = require('test_run').new()
---
...
engine = test_run:get_cfg('engine')
---
...
_ = box.space._session_settings:update('sql_default_engine', {{'=', 2, engine}})
---
...
box.execute([[SET SESSION "sql_seq_scan" = true;]])
---
- row_count: 1
...
-- gh-3010: COLLATE after LIMIT should throw an error
-- All of these tests should throw error "near "COLLATE": syntax error"
box.execute("SELECT 1 LIMIT 1 COLLATE BINARY;")
---
- null
- Syntax error at line 1 near 'COLLATE'
...
box.execute("SELECT 1 LIMIT 1 COLLATE BINARY OFFSET 1;")
---
- null
- Syntax error at line 1 near 'COLLATE'
...
box.execute("SELECT 1 LIMIT 1 OFFSET 1 COLLATE BINARY;")
---
- null
- Syntax error at line 1 near 'COLLATE'
...
box.execute("SELECT 1 LIMIT 1, 1 COLLATE BINARY;")
---
- null
- Syntax error at line 1 near 'COLLATE'
...
box.execute("SELECT 1 LIMIT 1 COLLATE BINARY, 1;")
---
- null
- Syntax error at line 1 near 'COLLATE'
...
-- gh-3052: upper/lower support only default locale
-- For tr-TR result depends on collation
box.execute([[CREATE TABLE tu (descriptor VARCHAR(50) PRIMARY KEY, letter VARCHAR(50))]]);
---
- row_count: 1
...
box.internal.collation.create('TURKISH', 'ICU', 'tr-TR', {strength='primary'});
---
...
box.execute([[INSERT INTO tu VALUES ('Latin Capital Letter I U+0049','I');]])
---
- row_count: 1
...
box.execute([[INSERT INTO tu VALUES ('Latin Small Letter I U+0069','i');]])
---
- row_count: 1
...
box.execute([[INSERT INTO tu VALUES ('Latin Capital Letter I With Dot Above U+0130','İ');]])
---
- row_count: 1
...
box.execute([[INSERT INTO tu VALUES ('Latin Small Letter Dotless I U+0131','ı');]])
---
- row_count: 1
...
-- Without collation
box.execute([[SELECT descriptor, upper(letter) AS upper,lower(letter) AS lower FROM tu;]])
---
- metadata:
  - name: DESCRIPTOR
    type: string
  - name: UPPER
    type: string
  - name: LOWER
    type: string
  rows:
  - ['Latin Capital Letter I U+0049', 'I', 'i']
  - ['Latin Capital Letter I With Dot Above U+0130', 'İ', 'i̇']
  - ['Latin Small Letter Dotless I U+0131', 'I', 'ı']
  - ['Latin Small Letter I U+0069', 'I', 'i']
...
-- With collation
box.execute([[SELECT descriptor, upper(letter COLLATE "TURKISH") AS upper,lower(letter COLLATE "TURKISH") AS lower FROM tu;]])
---
- metadata:
  - name: DESCRIPTOR
    type: string
  - name: UPPER
    type: string
  - name: LOWER
    type: string
  rows:
  - ['Latin Capital Letter I U+0049', 'I', 'ı']
  - ['Latin Capital Letter I With Dot Above U+0130', 'İ', 'i']
  - ['Latin Small Letter Dotless I U+0131', 'I', 'ı']
  - ['Latin Small Letter I U+0069', 'İ', 'i']
...
box.internal.collation.drop('TURKISH')
---
...
-- For de-DE result is actually the same
box.internal.collation.create('GERMAN', 'ICU', 'de-DE', {strength='primary'});
---
...
box.execute([[INSERT INTO tu VALUES ('German Small Letter Sharp S U+00DF','ß');]])
---
- row_count: 1
...
-- Without collation
box.execute([[SELECT descriptor, upper(letter), letter FROM tu where UPPER(letter) = 'SS';]])
---
- metadata:
  - name: DESCRIPTOR
    type: string
  - name: COLUMN_1
    type: string
  - name: LETTER
    type: string
  rows:
  - ['German Small Letter Sharp S U+00DF', 'SS', 'ß']
...
-- With collation
box.execute([[SELECT descriptor, upper(letter COLLATE "GERMAN"), letter FROM tu where UPPER(letter COLLATE "GERMAN") = 'SS';]])
---
- metadata:
  - name: DESCRIPTOR
    type: string
  - name: COLUMN_1
    type: string
  - name: LETTER
    type: string
  rows:
  - ['German Small Letter Sharp S U+00DF', 'SS', 'ß']
...
box.internal.collation.drop('GERMAN')
---
...
box.execute(([[DROP TABLE tu]]))
---
- row_count: 1
...
box.schema.user.grant('guest','read,write,execute', 'universe')
---
...
cn = remote.connect(box.cfg.listen)
---
...
cn:execute('select 1 limit ? collate not_exist', {1})
---
- error: Syntax error at line 1 near 'COLLATE'
...
cn:close()
---
...
-- Explicitly set BINARY collation is predifined and has ID.
--
box.execute("CREATE TABLE t (id INT PRIMARY KEY, a TEXT, b TEXT COLLATE \"binary\");")
---
- row_count: 1
...
box.space.T:format()[2]['collation']
---
- null
...
box.space.T:format()[3]['collation']
---
- 3
...
box.execute("DROP TABLE t;")
---
- row_count: 1
...
-- BINARY collation works in the same way as there is no collation
-- at all.
--
t = box.schema.create_space('test', {format = {{'id', 'unsigned'}, {'a', 'string', collation = 'binary'}}})
---
...
t:format()[2]['collation']
---
- 3
...
pk = t:create_index('primary', {parts = {1}})
---
...
i = t:create_index('secondary', {parts = {2, 'str', collation='binary'}})
---
...
t:insert({1, 'AsD'})
---
- [1, 'AsD']
...
t:insert({2, 'ASD'})
---
- [2, 'ASD']
...
t:insert({3, 'asd'})
---
- [3, 'asd']
...
i:select('asd')
---
- - [3, 'asd']
...
i:select('ASD')
---
- - [2, 'ASD']
...
i:select('AsD')
---
- - [1, 'AsD']
...
t:drop()
---
...
-- Collation with id == 0 is "none". It used to unify interaction
-- with collation interface. It also can't be dropped.
--
box.space._collation:select{0}
---
- - [0, 'none', 1, 'BINARY', '', {}]
...
box.space._collation:delete{0}
---
- error: 'Can''t drop collation ''none'': system collation'
...
-- gh-3185: collations of LHS and RHS must be compatible.
--
box.execute("CREATE TABLE t (id INT PRIMARY KEY, a TEXT, b TEXT COLLATE \"binary\", c TEXT COLLATE \"unicode_ci\");")
---
- row_count: 1
...
box.execute("SELECT * FROM t WHERE a = b;")
---
- metadata:
  - name: ID
    type: integer
  - name: A
    type: string
  - name: B
    type: string
  - name: C
    type: string
  rows: []
...
box.execute("SELECT * FROM t WHERE a COLLATE \"binary\" = b;")
---
- metadata:
  - name: ID
    type: integer
  - name: A
    type: string
  - name: B
    type: string
  - name: C
    type: string
  rows: []
...
box.execute("SELECT * FROM t WHERE b = c;")
---
- null
- Illegal mix of collations
...
box.execute("SELECT * FROM t WHERE b COLLATE \"binary\" = c;")
---
- metadata:
  - name: ID
    type: integer
  - name: A
    type: string
  - name: B
    type: string
  - name: C
    type: string
  rows: []
...
box.execute("SELECT * FROM t WHERE a = c;")
---
- metadata:
  - name: ID
    type: integer
  - name: A
    type: string
  - name: B
    type: string
  - name: C
    type: string
  rows: []
...
box.execute("SELECT * FROM t WHERE a COLLATE \"binary\" = c COLLATE \"unicode\";")
---
- null
- Illegal mix of collations
...
-- Make sure that using function featuring variable arguemnts
-- length  and resulting collation which depends on arguments
-- is processed correctly.
--
box.execute("SELECT * FROM t WHERE a COLLATE \"binary\" = substr();")
---
- null
- 'Wrong number of arguments is passed to SUBSTR(): expected from 2 to 3, got 0'
...
-- Compound queries perform implicit comparisons between values.
-- Hence, rules for collations compatibilities are the same.
--
box.execute("SELECT 'abc' COLLATE \"binary\" UNION SELECT 'ABC' COLLATE \"unicode_ci\"")
---
- null
- Illegal mix of collations
...
box.execute([[SELECT 'abc' COLLATE "unicode_ci" UNION ]]..\
            [[SELECT 'ABC' COLLATE "binary"]])
---
- null
- Illegal mix of collations
...
box.execute("SELECT c FROM t UNION SELECT b FROM t;")
---
- null
- Illegal mix of collations
...
box.execute("SELECT b FROM t UNION SELECT a FROM t;")
---
- metadata:
  - name: B
    type: string
  rows: []
...
box.execute("SELECT a FROM t UNION SELECT c FROM t;")
---
- metadata:
  - name: A
    type: string
  rows: []
...
box.execute("SELECT c COLLATE \"binary\" FROM t UNION SELECT a FROM t;")
---
- metadata:
  - name: COLUMN_1
    type: string
  rows: []
...
box.execute("SELECT b COLLATE \"unicode\" FROM t UNION SELECT a FROM t;")
---
- metadata:
  - name: COLUMN_1
    type: string
  rows: []
...
box.execute("DROP TABLE t;")
---
- row_count: 1
...
box.schema.user.revoke('guest', 'read,write,execute', 'universe')
---
...
-- gh-3857 "PRAGMA collation_list" invokes segmentation fault.
box.schema.user.create('tmp')
---
...
box.session.su('tmp')
---
...
-- gh-4713 "PRAGMA collation_list" is not accessible to all users
_, err = box.execute('pragma collation_list')
---
...
assert(err == nil)
---
- true
...
box.session.su('admin')
---
...
box.schema.user.drop('tmp')
---
...
-- gh-3644 Foreign key update fails with "unicode_ci".
-- Check that foreign key update doesn't fail with "unicode_ci".
box.execute('CREATE TABLE t0 (s1 VARCHAR(5) COLLATE "unicode_ci" UNIQUE, id INT PRIMARY KEY AUTOINCREMENT);')
---
- row_count: 1
...
box.execute('CREATE TABLE t1 (s1 INT PRIMARY KEY, s0 VARCHAR(5) COLLATE "unicode_ci" REFERENCES t0(s1));')
---
- row_count: 1
...
box.execute("INSERT INTO t0(s1) VALUES ('a');")
---
- autoincrement_ids:
  - 1
  row_count: 1
...
box.execute("INSERT INTO t1 VALUES (1,'a');")
---
- row_count: 1
...
-- Should't fail.
box.execute("UPDATE t0 SET s1 = 'A';")
---
- row_count: 1
...
box.execute("SELECT s1 FROM t0;")
---
- metadata:
  - name: S1
    type: string
  rows:
  - ['A']
...
box.execute("SELECT * FROM t1;")
---
- metadata:
  - name: S1
    type: integer
  - name: S0
    type: string
  rows:
  - [1, 'a']
...
box.execute("DROP TABLE t1;")
---
- row_count: 1
...
box.execute("DROP TABLE t0;")
---
- row_count: 1
...
-- Check that foreign key update fails with default collation.
box.execute('CREATE TABLE t0 (s1 VARCHAR(5) UNIQUE, id INT PRIMARY KEY AUTOINCREMENT);')
---
- row_count: 1
...
box.execute('CREATE TABLE t1 (s1 INT PRIMARY KEY, s0 VARCHAR(5) REFERENCES t0(s1));')
---
- row_count: 1
...
box.execute("INSERT INTO t0(s1) VALUES ('a');")
---
- autoincrement_ids:
  - 1
  row_count: 1
...
box.execute("INSERT INTO t1 VALUES (1,'a');")
---
- row_count: 1
...
-- Should fail.
box.execute("UPDATE t0 SET s1 = 'A';")
---
- null
- 'Foreign key ''fk_unnamed_T1_S0_1'' integrity check failed: index was not found'
...
box.execute("SELECT * FROM t1;")
---
- metadata:
  - name: S1
    type: integer
  - name: S0
    type: string
  rows:
  - [1, 'a']
...
box.execute("SELECT s1 FROM t0;")
---
- metadata:
  - name: S1
    type: string
  rows:
  - ['a']
...
box.execute("DROP TABLE t1;")
---
- row_count: 1
...
box.execute("DROP TABLE t0;")
---
- row_count: 1
...
-- gh-3937: result of concatination has derived collation.
--
box.execute("CREATE TABLE t4a(a TEXT COLLATE \"unicode\", b TEXT COLLATE \"unicode_ci\", c INT PRIMARY KEY);")
---
- row_count: 1
...
box.execute("INSERT INTO t4a VALUES('ABC','abc',1);")
---
- row_count: 1
...
box.execute("INSERT INTO t4a VALUES('ghi','ghi',3);")
---
- row_count: 1
...
-- Only LHS of concatenation has implicitly set collation.
-- Hence, no collation is used.
--
box.execute("SELECT c FROM t4a WHERE (a||'') = b;")
---
- metadata:
  - name: C
    type: integer
  rows:
  - [1]
  - [3]
...
-- BINARY collation is forced for comparison operator as
-- a derivation from concatenation.
--
box.execute("SELECT c FROM t4a WHERE (a COLLATE \"binary\"||'') = b;")
---
- metadata:
  - name: C
    type: integer
  rows:
  - [3]
...
-- Both operands of concatenation have explicit but different
-- collations.
--
box.execute("SELECT c FROM t4a WHERE (a COLLATE \"binary\"||'' COLLATE \"unicode_ci\") = b;")
---
- null
- Illegal mix of collations
...
box.execute("SELECT c FROM t4a WHERE (a COLLATE \"binary\"||'') = b COLLATE \"unicode\";")
---
- null
- Illegal mix of collations
...
-- No collation is used since LHS and RHS of concatenation
-- operator have different implicit collations.
--
box.execute("SELECT c FROM t4a WHERE (a||'')=(b||'');")
---
- metadata:
  - name: C
    type: integer
  rows:
  - [3]
...
box.execute("SELECT c FROM t4a WHERE (a||b)=(b||a);")
---
- metadata:
  - name: C
    type: integer
  rows:
  - [3]
...
box.execute("CREATE TABLE t4b(a TEXT COLLATE \"unicode_ci\", b TEXT COLLATE \"unicode_ci\", c INT PRIMARY KEY);")
---
- row_count: 1
...
box.execute("INSERT INTO t4b VALUES('BCD','bcd',1);")
---
- row_count: 1
...
box.execute("INSERT INTO t4b VALUES('ghi','ghi',3);")
---
- row_count: 1
...
-- Operands have the same implicit collation, so it is derived.
--
box.execute("SELECT c FROM t4a WHERE (a||b)=(b||a);")
---
- metadata:
  - name: C
    type: integer
  rows:
  - [3]
...
-- Couple of other possible combinations.
--
box.execute("SELECT c FROM t4a WHERE (a||b COLLATE \"binary\")=(b||a);")
---
- metadata:
  - name: C
    type: integer
  rows:
  - [3]
...
box.execute("SELECT c FROM t4a WHERE (a||b COLLATE \"binary\")=(b COLLATE \"unicode_ci\"||a);")
---
- null
- Illegal mix of collations
...
box.execute("INSERT INTO t4b VALUES('abc', 'xxx', 2);")
---
- row_count: 1
...
box.execute("INSERT INTO t4b VALUES('gHz', 'xxx', 4);")
---
- row_count: 1
...
-- Results are sorted with case-insensitive order.
-- Otherwise capital latters come first.
--
box.execute("SELECT a FROM t4b ORDER BY a COLLATE \"unicode_ci\" || ''")
---
- metadata:
  - name: A
    type: string
  rows:
  - ['abc']
  - ['BCD']
  - ['ghi']
  - ['gHz']
...
box.execute("SELECT a FROM t4b ORDER BY a || b")
---
- metadata:
  - name: A
    type: string
  rows:
  - ['abc']
  - ['BCD']
  - ['ghi']
  - ['gHz']
...
box.space.T4A:drop()
---
...
box.space.T4B:drop()
---
...
-- gh-3537 Duplicate key error for an index that is not unique
-- pk - default, sc - unicode_ci
box.execute('CREATE TABLE t3 (s1 VARCHAR(5) PRIMARY KEY);')
---
- row_count: 1
...
box.execute('CREATE INDEX i3 ON t3 (s1 collate "unicode_ci");')
---
- row_count: 1
...
box.execute("INSERT INTO t3 VALUES ('a');")
---
- row_count: 1
...
box.execute("INSERT INTO t3 VALUES ('A');")
---
- row_count: 1
...
box.execute("SELECT * FROM t3;")
---
- metadata:
  - name: S1
    type: string
  rows:
  - ['A']
  - ['a']
...
box.execute("DROP TABLE t3;")
---
- row_count: 1
...
-- pk - binary, sc - unicode
box.execute('CREATE TABLE t3b (s1 VARCHAR(5) collate "binary" PRIMARY KEY);')
---
- row_count: 1
...
box.execute('CREATE INDEX i3b ON t3b (s1 collate "unicode");')
---
- row_count: 1
...
box.execute("INSERT INTO t3b VALUES ('a');")
---
- row_count: 1
...
box.execute("INSERT INTO t3b VALUES ('A');")
---
- row_count: 1
...
box.execute("SELECT * FROM t3b;")
---
- metadata:
  - name: S1
    type: string
  rows:
  - ['A']
  - ['a']
...
box.execute("DROP TABLE t3b;")
---
- row_count: 1
...
-- pk - binary, sc - unicode (make dup)
box.execute('CREATE TABLE t3b (s1 VARCHAR(5) collate "binary" PRIMARY KEY);')
---
- row_count: 1
...
box.execute('CREATE INDEX i3b ON t3b (s1 collate "unicode");')
---
- row_count: 1
...
box.execute("INSERT INTO t3b VALUES ('a');")
---
- row_count: 1
...
box.execute("INSERT INTO t3b VALUES ('A');")
---
- row_count: 1
...
box.execute("INSERT INTO t3b VALUES ('a');")
---
- null
- Duplicate key exists in unique index "pk_unnamed_T3B_1" in space "T3B" with old
  tuple - ["a"] and new tuple - ["a"]
...
box.execute("SELECT * FROM t3b;")
---
- metadata:
  - name: S1
    type: string
  rows:
  - ['A']
  - ['a']
...
box.execute("DROP TABLE t3b;")
---
- row_count: 1
...
-- pk - unicode, sc - binary
box.execute('CREATE TABLE t3c (s1 VARCHAR(5) collate "unicode" PRIMARY KEY);')
---
- row_count: 1
...
box.execute('CREATE INDEX i3c ON t3c (s1 collate "binary");')
---
- row_count: 1
...
box.execute("INSERT INTO t3c VALUES ('a');")
---
- row_count: 1
...
box.execute("INSERT INTO t3c VALUES ('A');")
---
- row_count: 1
...
box.execute("SELECT * FROM t3c;")
---
- metadata:
  - name: S1
    type: string
  rows:
  - ['a']
  - ['A']
...
box.execute("DROP TABLE t3c;")
---
- row_count: 1
...
-- pk - unicode, sc - binary (make dup)
box.execute('CREATE TABLE t3c (s1 VARCHAR(5) collate "unicode" PRIMARY KEY);')
---
- row_count: 1
...
box.execute('CREATE INDEX i3c ON t3c (s1 collate "binary");')
---
- row_count: 1
...
box.execute("INSERT INTO t3c VALUES ('a');")
---
- row_count: 1
...
box.execute("INSERT INTO t3c VALUES ('A');")
---
- row_count: 1
...
box.execute("INSERT INTO t3c VALUES ('a');")
---
- null
- Duplicate key exists in unique index "pk_unnamed_T3C_1" in space "T3C" with old
  tuple - ["a"] and new tuple - ["a"]
...
box.execute("SELECT * FROM t3c;")
---
- metadata:
  - name: S1
    type: string
  rows:
  - ['a']
  - ['A']
...
box.execute("DROP TABLE t3c;")
---
- row_count: 1
...
-- pk - binary, sc - unicode_ci
box.execute('CREATE TABLE t3d (s1 VARCHAR(5) collate "binary" PRIMARY KEY);')
---
- row_count: 1
...
box.execute('CREATE INDEX i3d ON t3d (s1 collate "unicode_ci");')
---
- row_count: 1
...
box.execute("INSERT INTO t3d VALUES ('a');")
---
- row_count: 1
...
box.execute("INSERT INTO t3d VALUES ('A');")
---
- row_count: 1
...
box.execute("SELECT * FROM t3d;")
---
- metadata:
  - name: S1
    type: string
  rows:
  - ['A']
  - ['a']
...
box.execute("DROP TABLE t3d;")
---
- row_count: 1
...
-- pk - binary, sc - unicode_ci (make dup)
box.execute('CREATE TABLE t3d (s1 VARCHAR(5) collate "binary" PRIMARY KEY);')
---
- row_count: 1
...
box.execute('CREATE INDEX i3d ON t3d (s1 collate "unicode_ci");')
---
- row_count: 1
...
box.execute("INSERT INTO t3d VALUES ('a');")
---
- row_count: 1
...
box.execute("INSERT INTO t3d VALUES ('A');")
---
- row_count: 1
...
box.execute("INSERT INTO t3d VALUES ('a');")
---
- null
- Duplicate key exists in unique index "pk_unnamed_T3D_1" in space "T3D" with old
  tuple - ["a"] and new tuple - ["a"]
...
box.execute("SELECT * FROM t3d;")
---
- metadata:
  - name: S1
    type: string
  rows:
  - ['A']
  - ['a']
...
box.execute("DROP TABLE t3d;")
---
- row_count: 1
...
-- pk - unicode_ci, sc - binary (should fail)
box.execute('CREATE TABLE t3e (s1 VARCHAR(5) collate "unicode_ci" PRIMARY KEY);')
---
- row_count: 1
...
box.execute('CREATE INDEX i3e ON t3e (s1 collate "binary");')
---
- row_count: 1
...
box.execute("INSERT INTO t3e VALUES ('a');")
---
- row_count: 1
...
box.execute("INSERT INTO t3e VALUES ('A');")
---
- null
- Duplicate key exists in unique index "pk_unnamed_T3E_1" in space "T3E" with old
  tuple - ["a"] and new tuple - ["A"]
...
box.execute("SELECT * FROM t3e;")
---
- metadata:
  - name: S1
    type: string
  rows:
  - ['a']
...
box.execute("DROP TABLE t3e;")
---
- row_count: 1
...
-- pk - unicode, sc - unicode_ci
box.execute('CREATE TABLE t3f (s1 VARCHAR(5) collate "unicode" PRIMARY KEY);')
---
- row_count: 1
...
box.execute('CREATE INDEX i3f ON t3f (s1 collate "unicode_ci");')
---
- row_count: 1
...
box.execute("INSERT INTO t3f VALUES ('a');")
---
- row_count: 1
...
box.execute("INSERT INTO t3f VALUES ('A');")
---
- row_count: 1
...
box.execute("SELECT * FROM t3f;")
---
- metadata:
  - name: S1
    type: string
  rows:
  - ['a']
  - ['A']
...
box.execute("DROP TABLE t3f;")
---
- row_count: 1
...
-- pk - unicode, sc - unicode_ci (make dup)
box.execute('CREATE TABLE t3f (s1 VARCHAR(5) collate "unicode" PRIMARY KEY);')
---
- row_count: 1
...
box.execute('CREATE INDEX i3f ON t3f (s1 collate "unicode_ci");')
---
- row_count: 1
...
box.execute("INSERT INTO t3f VALUES ('a');")
---
- row_count: 1
...
box.execute("INSERT INTO t3f VALUES ('A');")
---
- row_count: 1
...
box.execute("INSERT INTO t3f VALUES ('a');")
---
- null
- Duplicate key exists in unique index "pk_unnamed_T3F_1" in space "T3F" with old
  tuple - ["a"] and new tuple - ["a"]
...
box.execute("SELECT * FROM t3f;")
---
- metadata:
  - name: S1
    type: string
  rows:
  - ['a']
  - ['A']
...
box.execute("DROP TABLE t3f;")
---
- row_count: 1
...
-- pk - unicode_ci, sc - unicode (should fail)
box.execute('CREATE TABLE t3g (s1 VARCHAR(5) collate "unicode_ci" PRIMARY KEY);')
---
- row_count: 1
...
box.execute('CREATE INDEX i3g ON t3g (s1 collate "unicode");')
---
- row_count: 1
...
box.execute("INSERT INTO t3g VALUES ('a');")
---
- row_count: 1
...
box.execute("INSERT INTO t3g VALUES ('A');")
---
- null
- Duplicate key exists in unique index "pk_unnamed_T3G_1" in space "T3G" with old
  tuple - ["a"] and new tuple - ["A"]
...
box.execute("SELECT * FROM t3g;")
---
- metadata:
  - name: S1
    type: string
  rows:
  - ['a']
...
box.execute("DROP TABLE t3g;")
---
- row_count: 1
...
-- pk - default, sc - multipart
box.execute('CREATE TABLE qms1 (w VARCHAR(5) PRIMARY KEY, n VARCHAR(5), q VARCHAR(5), s INTEGER);')
---
- row_count: 1
...
box.execute('CREATE INDEX iqms1 ON qms1 (w collate "unicode_ci", n);')
---
- row_count: 1
...
box.execute("INSERT INTO qms1 VALUES ('www', 'nnn', 'qqq', 1);")
---
- row_count: 1
...
box.execute("INSERT INTO qms1 VALUES ('WWW', 'nnn', 'qqq', 2);")
---
- row_count: 1
...
box.execute("SELECT * FROM qms1;")
---
- metadata:
  - name: W
    type: string
  - name: N
    type: string
  - name: Q
    type: string
  - name: S
    type: integer
  rows:
  - ['WWW', 'nnn', 'qqq', 2]
  - ['www', 'nnn', 'qqq', 1]
...
box.execute("DROP TABLE qms1;")
---
- row_count: 1
...
box.execute('CREATE TABLE qms2 (w VARCHAR(5) PRIMARY KEY, n VARCHAR(5), q VARCHAR(5), s INTEGER);')
---
- row_count: 1
...
box.execute('CREATE INDEX iqms2 ON qms2 (w collate "unicode", n);')
---
- row_count: 1
...
box.execute("INSERT INTO qms2 VALUES ('www', 'nnn', 'qqq', 1);")
---
- row_count: 1
...
box.execute("INSERT INTO qms2 VALUES ('WWW', 'nnn', 'qqq', 2);")
---
- row_count: 1
...
box.execute("SELECT * FROM qms2;")
---
- metadata:
  - name: W
    type: string
  - name: N
    type: string
  - name: Q
    type: string
  - name: S
    type: integer
  rows:
  - ['WWW', 'nnn', 'qqq', 2]
  - ['www', 'nnn', 'qqq', 1]
...
box.execute("DROP TABLE qms2;")
---
- row_count: 1
...
-- pk - multipart, sc overlaps with pk
box.execute('CREATE TABLE qms3 (w VARCHAR(5), n VARCHAR(5), q VARCHAR(5), s INTEGER, CONSTRAINT pk_qms3 PRIMARY KEY(w, n, q));')
---
- row_count: 1
...
box.execute('CREATE INDEX iqms3 ON qms3 (w collate "unicode_ci", s);')
---
- row_count: 1
...
box.execute("INSERT INTO qms3 VALUES ('www', 'nnn', 'qqq', 1);")
---
- row_count: 1
...
box.execute("INSERT INTO qms3 VALUES ('WWW', 'nnn', 'qqq', 2);")
---
- row_count: 1
...
box.execute("SELECT * FROM qms3;")
---
- metadata:
  - name: W
    type: string
  - name: N
    type: string
  - name: Q
    type: string
  - name: S
    type: integer
  rows:
  - ['WWW', 'nnn', 'qqq', 2]
  - ['www', 'nnn', 'qqq', 1]
...
box.execute("DROP TABLE qms3;")
---
- row_count: 1
...
box.execute('CREATE TABLE qms4 (w VARCHAR(5), n VARCHAR(5), q VARCHAR(5), s INTEGER, CONSTRAINT pk_qms4 PRIMARY KEY(w, n, q));')
---
- row_count: 1
...
box.execute('CREATE INDEX iqms4 ON qms4 (w collate "unicode", s);')
---
- row_count: 1
...
box.execute("INSERT INTO qms4 VALUES ('www', 'nnn', 'qqq', 1);")
---
- row_count: 1
...
box.execute("INSERT INTO qms4 VALUES ('WWW', 'nnn', 'qqq', 2);")
---
- row_count: 1
...
box.execute("SELECT * FROM qms4;")
---
- metadata:
  - name: W
    type: string
  - name: N
    type: string
  - name: Q
    type: string
  - name: S
    type: integer
  rows:
  - ['WWW', 'nnn', 'qqq', 2]
  - ['www', 'nnn', 'qqq', 1]
...
box.execute("DROP TABLE qms4;")
---
- row_count: 1
...
-- gh-3932: make sure set build-in functions derive collation
-- from their arguments.
--
box.execute("CREATE TABLE jj (s1 INT PRIMARY KEY, s2 VARCHAR(3) COLLATE \"unicode_ci\");")
---
- row_count: 1
...
box.execute("INSERT INTO jj VALUES (1,'A'), (2,'a')")
---
- row_count: 2
...
box.execute("SELECT DISTINCT trim(s2) FROM jj;")
---
- metadata:
  - name: COLUMN_1
    type: string
  rows:
  - ['A']
...
box.execute("INSERT INTO jj VALUES (3, 'aS'), (4, 'AS');")
---
- row_count: 2
...
box.execute("SELECT DISTINCT replace(s2, 'S', 's') FROM jj;")
---
- metadata:
  - name: COLUMN_1
    type: string
  rows:
  - ['A']
  - ['as']
...
box.execute("SELECT DISTINCT substr(s2, 1, 1) FROM jj;")
---
- metadata:
  - name: COLUMN_1
    type: string
  rows:
  - ['A']
...
box.space.JJ:drop()
---
...
-- gh-3573: Strength in the _collation space
-- Collation without 'strength' option set now has explicit
-- 'strength' = 'tertiary'.
--
box.internal.collation.create('c', 'ICU', 'unicode')
---
...
box.space._collation.index.name:get({'c'})
---
- [277, 'c', 1, 'ICU', 'unicode', {'strength': 'tertiary'}]
...
box.internal.collation.drop('c')
---
...
--
-- gh-4007 Feature request for a new collation
--
-- Default unicode collation deals with russian letters
s = box.schema.space.create('t1')
---
...
s:format({{name='s1', type='string', collation = 'unicode'}})
---
...
idx = s:create_index('pk', {unique = true, type='tree', parts={{'s1', collation = 'unicode'}}})
---
...
s:insert{'Ё'}
---
- ['Ё']
...
s:insert{'Е'}
---
- ['Е']
...
s:insert{'ё'}
---
- ['ё']
...
s:insert{'е'}
---
- ['е']
...
-- all 4 letters are in the table
s:select{}
---
- - ['е']
  - ['Е']
  - ['ё']
  - ['Ё']
...
s:drop()
---
...
-- unicode_ci collation doesn't distinguish russian letters 'Е' and 'Ё'
s = box.schema.space.create('t1')
---
...
s:format({{name='s1', type='string', collation = 'unicode_ci'}})
---
...
idx = s:create_index('pk', {unique = true, type='tree', parts={{'s1', collation = 'unicode_ci'}}})
---
...
s:insert{'Ё'}
---
- ['Ё']
...
-- the following calls should fail
s:insert{'е'}
---
- error: Duplicate key exists in unique index "pk" in space "t1" with old tuple -
    ["Ё"] and new tuple - ["е"]
...
s:insert{'Е'}
---
- error: Duplicate key exists in unique index "pk" in space "t1" with old tuple -
    ["Ё"] and new tuple - ["Е"]
...
s:insert{'ё'}
---
- error: Duplicate key exists in unique index "pk" in space "t1" with old tuple -
    ["Ё"] and new tuple - ["ё"]
...
-- return single 'Ё'
s:select{}
---
- - ['Ё']
...
s:drop()
---
...
