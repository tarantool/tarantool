test_run = require('test_run').new()
---
...
engine = test_run:get_cfg('engine')
---
...
_ = box.space._session_settings:update('sql_default_engine', {{'=', 2, engine}})
---
...
box.execute([[SET SESSION "sql_seq_scan" = true;]])
---
- row_count: 1
...
-- Forbid multistatement queries.
box.execute('select 1;')
---
- metadata:
  - name: COLUMN_1
    type: integer
  rows:
  - [1]
...
box.execute('select 1; select 2;')
---
- null
- 'At line 1 at or near position 11: keyword ''select'' is reserved. Please use double
  quotes if ''select'' is an identifier.'
...
box.execute('create table t1 (id INT primary key); select 100;')
---
- null
- 'At line 1 at or near position 39: keyword ''select'' is reserved. Please use double
  quotes if ''select'' is an identifier.'
...
box.space.t1 == nil
---
- true
...
box.execute(';')
---
- null
- Failed to execute an empty SQL statement
...
box.execute('')
---
- null
- Failed to execute an empty SQL statement
...
box.execute('     ;')
---
- null
- Failed to execute an empty SQL statement
...
box.execute('\n\n\n\t\t\t   ')
---
- null
- Failed to execute an empty SQL statement
...
-- gh-3820: only table constraints can have a name.
--
box.execute('CREATE TABLE test (id INTEGER PRIMARY KEY, b INTEGER CONSTRAINT c1 NULL)')
---
- null
- 'At line 1 at or near position 68: keyword ''NULL'' is reserved. Please use double
  quotes if ''NULL'' is an identifier.'
...
box.execute('CREATE TABLE test (id INTEGER PRIMARY KEY, b INTEGER CONSTRAINT c1 DEFAULT 300)')
---
- null
- 'At line 1 at or near position 68: keyword ''DEFAULT'' is reserved. Please use double
  quotes if ''DEFAULT'' is an identifier.'
...
box.execute('CREATE TABLE test (id INTEGER PRIMARY KEY, b TEXT CONSTRAINT c1 COLLATE "binary")')
---
- null
- 'At line 1 at or near position 65: keyword ''COLLATE'' is reserved. Please use double
  quotes if ''COLLATE'' is an identifier.'
...
-- Make sure that type of literals in meta complies with its real
-- type. For instance, typeof(0.5) is number, not integer.
--
box.execute('SELECT 1;')
---
- metadata:
  - name: COLUMN_1
    type: integer
  rows:
  - [1]
...
box.execute('SELECT 1.5;')
---
- metadata:
  - name: COLUMN_1
    type: decimal
  rows:
  - [1.5]
...
box.execute('SELECT 1.0;')
---
- metadata:
  - name: COLUMN_1
    type: decimal
  rows:
  - [1.0]
...
box.execute('SELECT 1.5e0;')
---
- metadata:
  - name: COLUMN_1
    type: double
  rows:
  - [1.5]
...
box.execute('SELECT 1e0;')
---
- metadata:
  - name: COLUMN_1
    type: double
  rows:
  - [1]
...
box.execute('SELECT \'abc\';')
---
- metadata:
  - name: COLUMN_1
    type: string
  rows:
  - ['abc']
...
box.execute('SELECT X\'4D6564766564\'')
---
- metadata:
  - name: COLUMN_1
    type: varbinary
  rows:
  - [!!binary TWVkdmVk]
...
--
-- gh-4139: assertion when reading a temporary space.
--
format = {{name = 'id', type = 'integer'}}
---
...
s = box.schema.space.create('s',{format=format, temporary=true})
---
...
i = s:create_index('i')
---
...
box.execute('select * from "s"')
---
- metadata:
  - name: id
    type: integer
  rows: []
...
s:drop()
---
...
--
-- gh-4267: Full power of vdbe_field_ref
-- Tarantool's SQL internally stores data offset for all acceded
-- fields. It also keeps a bitmask of size 64 with all initialized
-- slots in actual state to find the nearest left field really
-- fast and parse tuple from that position. For fieldno >= 64
-- bitmask is not applicable, so it scans data offsets area in
-- a cycle.
--
-- The test below covers a case when this optimisation doesn't
-- work and the second lookup require parsing tuple from
-- beginning.
---
format = {}
---
...
t = {}
---
...
for i = 1, 70 do                                                \
        format[i] = {name = 'FIELD'..i, type = 'unsigned'}      \
        t[i] = i                                                \
end
---
...
s = box.schema.create_space('TEST', {format = format})
---
...
pk = s:create_index('pk', {parts = {70}})
---
...
s:insert(t)
---
- [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22,
  23, 24, 25, 26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42,
  43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62,
  63, 64, 65, 66, 67, 68, 69, 70]
...
box.execute('SELECT field70, field64 FROM test')
---
- metadata:
  - name: FIELD70
    type: unsigned
  - name: FIELD64
    type: unsigned
  rows:
  - [70, 64]
...
-- In the case below described optimization works fine.
pk:alter({parts = {66}})
---
...
box.execute('SELECT field66, field68, field70 FROM test')
---
- metadata:
  - name: FIELD66
    type: unsigned
  - name: FIELD68
    type: unsigned
  - name: FIELD70
    type: unsigned
  rows:
  - [66, 68, 70]
...
box.space.TEST:drop()
---
...
-- gh-4933: Make sure that autoindex optimization is used.
box.execute('CREATE TABLE t1(i INT PRIMARY KEY, a INT);')
---
- row_count: 1
...
box.execute('CREATE TABLE t2(i INT PRIMARY KEY, b INT);')
---
- row_count: 1
...
for i = 1, 10240 do\
	box.execute('INSERT INTO t1 VALUES ($1, $1);', {i})\
	box.execute('INSERT INTO t2 VALUES ($1, $1);', {i})\
end
---
...
box.execute('EXPLAIN QUERY PLAN SELECT a, b FROM t1, t2 WHERE a = b;')
---
- metadata:
  - name: selectid
    type: integer
  - name: order
    type: integer
  - name: from
    type: integer
  - name: detail
    type: text
  rows:
  - [0, 0, 0, 'SCAN TABLE T1 (~1048576 rows)']
  - [0, 1, 1, 'SEARCH TABLE T2 USING EPHEMERAL INDEX (B=?) (~20 rows)']
...
-- gh-5592: Make sure that diag is not changed with the correct query.
box.execute('SELECT a;')
---
- null
- Canâ€™t resolve field 'A'
...
diag = box.error.last()
---
...
box.execute('SELECT * FROM (VALUES(true));')
---
- metadata:
  - name: COLUMN_1
    type: boolean
  rows:
  - [true]
...
diag == box.error.last()
---
- true
...
-- exclude_null + SQL correctness
box.execute([[CREATE TABLE j (s1 INT PRIMARY KEY, s2 STRING, s3 VARBINARY)]])
---
- row_count: 1
...
s = box.space.J
---
...
i = box.space.J:create_index('I3',{parts={2,'string', exclude_null=true}})
---
...
box.execute([[INSERT INTO j VALUES (1,NULL,NULL), (2,'',X'00');]])
---
- row_count: 2
...
box.execute([[SELECT * FROM j;]])
---
- metadata:
  - name: S1
    type: integer
  - name: S2
    type: string
  - name: S3
    type: varbinary
  rows:
  - [1, null, null]
  - [2, '', !!binary AA==]
...
box.execute([[SELECT * FROM j INDEXED BY I3;]])
---
- metadata:
  - name: S1
    type: integer
  - name: S2
    type: string
  - name: S3
    type: varbinary
  rows:
  - [2, '', !!binary AA==]
...
box.execute([[SELECT COUNT(*) FROM j GROUP BY s2;]])
---
- metadata:
  - name: COLUMN_1
    type: integer
  rows:
  - [1]
  - [1]
...
box.execute([[SELECT COUNT(*) FROM j INDEXED BY I3;]])
---
- metadata:
  - name: COLUMN_1
    type: integer
  rows:
  - [1]
...
box.execute([[UPDATE j INDEXED BY i3 SET s2 = NULL;]])
---
- row_count: 1
...
box.execute([[INSERT INTO j VALUES (3, 'a', X'33');]])
---
- row_count: 1
...
box.execute([[SELECT * FROM j;]])
---
- metadata:
  - name: S1
    type: integer
  - name: S2
    type: string
  - name: S3
    type: varbinary
  rows:
  - [1, null, null]
  - [2, null, !!binary AA==]
  - [3, 'a', !!binary Mw==]
...
box.execute([[SELECT * FROM j INDEXED BY I3;]])
---
- metadata:
  - name: S1
    type: integer
  - name: S2
    type: string
  - name: S3
    type: varbinary
  rows:
  - [3, 'a', !!binary Mw==]
...
box.execute([[UPDATE j INDEXED BY i3 SET s3 = NULL;]])
---
- row_count: 1
...
s:select{}
---
- - [1, null, null]
  - [2, null, !!binary AA==]
  - [3, 'a', null]
...
s:drop()
---
...
