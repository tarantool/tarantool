TAP version 13
1..42
ok - true
ok - extra information is not printed on success
not ok - extra printed using yaml only on failure
  ---
  state: some userful information to debug on failure
  details: a table argument formatted using yaml.encode()
  ...
not ok - failed
ok - test marked as ok and skipped # skip
ok - tonumber(48) is 48
ok - 0xff is not 64
not ok - 1 is not 1
  ---
  unexpected: 1
  got: 1
  ...
ok - nil is nil
not ok - 48 is nil
  ---
  expected: nil
  got: 48
  ...
ok - 10 is a number
ok - 0 is also a number
ok - "blabla" is string
not ok - 48 is string
  ---
  expected: string
  got: number
  ...
not ok - nil is string
  ---
  expected: string
  got: nil
  ...
ok - true is boolean
not ok - 1 is boolean
  ---
  expected: boolean
  got: number
  ...
ok - {} is a table
not ok - udata
  ---
  expected: userdata<fiber>
  got: nil
  ...
not ok - udata
  ---
  expected: userdata<some utype>
  got: userdata<fiber>
  ...
ok - udata
not ok - cdata type
  ---
  expected: ctype<int>
  got: string
  ...
not ok - cdata type
  ---
  expected: ctype<int>
  got: number
  ...
ok - cdata type
not ok - cdata type
  ---
  expected: ctype<int>
  got: ctype<unsigned int>
  ...
not ok - box.NULL == nil strict = true
  ---
  got: null
  ...
not ok - nil == box.NULL strict = true
  ---
  expected: null
  ...
ok - box.NULL == box.NULL strict = true
ok - nil == nil strict = true
ok - box.NULL != nil strict = true
ok - nil != box.NULL strict = true
not ok - box.NULL != box.NULL strict = true
  ---
  unexpected: null
  got: null
  ...
not ok - nil != nil strict = true
    # subtest 1
    1..2
    ok - true
    ok - true
    # subtest 1: end
ok - subtest 1
    1..1
    ok - true in subtest
    # hello from subtest
ok - subtest 2
    # 1 level
    1..1
        # 2 level
        1..1
            # 3 level
            1..1
                # 4 level
                1..1
                    # 5 level
                    1..1
                    ok - ok
                    # 5 level: end
                ok - 5 level
                # 4 level: end
            ok - 4 level
            # 3 level: end
        ok - 3 level
        # 2 level: end
    ok - 2 level
    # 1 level: end
ok - 1 level
    # bad plan
    1..3
    ok - true
    # bad plan: end
not ok - bad plan
  ---
  planned: 3
  run: 1
  ...
    # failed subtest
    1..1
    not ok - failed subtest
    # failed subtest: end
not ok - failed subtests
  ---
  planned: 1
  failed: 1
  ...
    # is_deeply
    1..21
    ok - 1 and 1
    ok - abc and abc
    ok - empty tables
    ok - {1} and {1}
    not ok - {1} and {2}
      ---
      path: //1
      strict: false
      expected: 2
      got: 1
      ...
    not ok - {1,2,{3,4}} and {1,2,{3,5}}
      ---
      path: //3/2
      strict: false
      expected: 5
      got: 4
      ...
    ok - {} and {a = box.NULL} strict = false
    ok - {a = box.NULL} and {} strict = false
    ok - {a = box.NULL} and {b = box.NULL} strict = false
    ok - {a = box.NULL} and {b = box.NULL, c = box.NULL} strict = false
    ok - nil and box.NULL strict = false
    ok - box.NULL and nil strict = false
    ok - {a = box.NULL} and {a = box.NULL} strict false
    not ok - {} and {a = box.NULL} strict = true
      ---
      strict: true
      expected: key a
      got: nil
      ...
    not ok - {a = box.NULL} and {} strict = true
      ---
      path: //a
      strict: true
      expected: nil
      got: cdata
      ...
    not ok - {a = box.NULL} and {b = box.NULL} strict = true
      ---
      path: //a
      strict: true
      expected: nil
      got: cdata
      ...
    not ok - {a = box.NULL} and {b = box.NULL, c = box.NULL} strict = true
      ---
      path: //a
      strict: true
      expected: nil
      got: cdata
      ...
    not ok - nil and box.NULL strict = true
      ---
      got: nil
      expected: cdata
      strict: true
      ...
    not ok - box.NULL and nil strict = true
      ---
      got: cdata
      expected: nil
      strict: true
      ...
    ok - {a = box.NULL} and {a = box.NULL} strict true
        # check strict flag inheritance
        1..2
        not ok - {} and {a = box.NULL} strict = true
          ---
          strict: true
          expected: key a
          got: nil
          ...
        not ok - nil and box.NULL strict = true
          ---
          got: nil
          expected: cdata
          strict: true
          ...
        # check strict flag inheritance: end
    not ok - failed subtests
      ---
      planned: 2
      failed: 2
      ...
    # is_deeply: end
not ok - failed subtests
  ---
  planned: 21
  failed: 9
  ...
    # like
    1..2
    ok - like(abcde, cd)
    ok - unlike(abcde, acd)
    # like: end
ok - like
not ok - compare {1, 2, 3} and '200'
  ---
  strict: false
  expected: '200'
  got:
  - 1
  - 2
  - 3
  ...
not ok - compare '200' and {1, 2, 3}
  ---
  strict: false
  expected:
  - 1
  - 2
  - 3
  got: '200'
  ...
# failed subtest: 21
