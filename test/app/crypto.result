test_run = require('test_run').new()
---
...
test_run:cmd("push filter ".."'\\.lua.*:[0-9]+: ' to '.lua:<line>\"]: '")
---
- true
...
crypto = require('crypto')
---
...
type(crypto)
---
- table
...
ciph = crypto.cipher.aes128.cbc
---
...
pass = '1234567887654321'
---
...
iv = 'abcdefghijklmnop'
---
...
enc = ciph.encrypt('test', pass, iv)
---
...
enc
---
- !!binary WpJJu6l6oziZcyvND8KueA==
...
ciph.decrypt(enc, pass, iv)
---
- test
...
--Failing scenaries
crypto.cipher.aes128.cbc.encrypt('a')
---
- error: 'builtin/crypto.lua:<line>"]: Cipher not initialized'
...
crypto.cipher.aes128.cbc.encrypt('a', '123456', '435')
---
- error: 'builtin/crypto.lua:<line>"]: Key length should be equal to cipher key length
    (16 bytes)'
...
crypto.cipher.aes128.cbc.encrypt('a', '1234567887654321')
---
- error: 'builtin/crypto.lua:<line>"]: Cipher not initialized'
...
crypto.cipher.aes128.cbc.encrypt('a', '1234567887654321', '12')
---
- error: 'builtin/crypto.lua:<line>"]: Initial vector length should be equal to cipher
    iv length (16 bytes)'
...
crypto.cipher.aes256.cbc.decrypt('a')
---
- error: 'builtin/crypto.lua:<line>"]: Cipher not initialized'
...
crypto.cipher.aes256.cbc.decrypt('a', '123456', '435')
---
- error: 'builtin/crypto.lua:<line>"]: Key length should be equal to cipher key length
    (32 bytes)'
...
crypto.cipher.aes256.cbc.decrypt('a', '12345678876543211234567887654321')
---
- error: 'builtin/crypto.lua:<line>"]: Cipher not initialized'
...
crypto.cipher.aes256.cbc.decrypt('12', '12345678876543211234567887654321', '12')
---
- error: 'builtin/crypto.lua:<line>"]: Initial vector length should be equal to cipher
    iv length (16 bytes)'
...
crypto.cipher.aes192.cbc.encrypt.new('123321')
---
- error: 'builtin/crypto.lua:<line>"]: Key length should be equal to cipher key length
    (24 bytes)'
...
crypto.cipher.aes192.cbc.decrypt.new('123456788765432112345678', '12345')
---
- error: 'builtin/crypto.lua:<line>"]: Initial vector length should be equal to cipher
    iv length (16 bytes)'
...
--
-- It is allowed to fill a cipher gradually.
--
c = crypto.cipher.aes128.cbc.encrypt.new()
---
...
c:init('1234567812345678')
---
...
c:update('plain')
---
- error: Cipher not initialized
...
c:init(nil, '1234567812345678')
---
...
c:update('plain')
---
- 
...
c:free()
---
...
--
-- gh-4223: cipher:init() could rewrite previously initialized
-- key and IV with nil values.
--
c = crypto.cipher.aes192.cbc.encrypt.new('123456789012345678901234', '1234567890123456')
---
...
c:init()
---
...
c:result()
---
- !!binary xzcDuRoi1sml7FB9IFf8EQ==
...
c:free()
---
...
crypto.cipher.aes100.efb
---
- error: '[string "return crypto.cipher.aes100.efb "]:1: Cipher method "aes100" is
    not supported'
...
crypto.cipher.aes256.nomode
---
- error: 'builtin/crypto.lua:<line>"]: Cipher mode nomode is not supported'
...
crypto.digest.nodigest
---
- error: '[string "return crypto.digest.nodigest "]:1: Digest method "nodigest" is
    not supported'
...
bad_pass = '8765432112345678'
---
...
bad_iv = '123456abcdefghij'
---
...
ciph.decrypt(enc, bad_pass, iv)
---
- error: 'builtin/crypto.lua:<line>"]: Can''t finalize cipher:bad decrypt'
...
ciph.decrypt(enc, pass, bad_iv)
---
- error: 'builtin/crypto.lua:<line>"]: Can''t finalize cipher:bad decrypt'
...
test_run:cmd("clear filter")
---
- true
...
