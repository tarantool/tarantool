-- test-run result file version 2
test_run = require('test_run').new()
 | ---
 | ...
fiber = require('fiber')
 | ---
 | ...
msgpack = require('msgpack')
 | ---
 | ...

-- Invalid arguments.
box.watch()
 | ---
 | - error: 'Usage: box.watch(key, function)'
 | ...
box.watch(1, 2, 3)
 | ---
 | - error: 'Usage: box.watch(key, function)'
 | ...
box.watch({}, {})
 | ---
 | - error: 'bad argument #1 to ''?'' (string expected, got table)'
 | ...
box.watch('foo', {})
 | ---
 | - error: 'bad argument #2 to ''?'' (function expected, got table)'
 | ...
box.broadcast()
 | ---
 | - error: 'Usage: box.broadcast(key[, value])'
 | ...
box.broadcast(1, 2, 3)
 | ---
 | - error: 'Usage: box.broadcast(key[, value])'
 | ...
box.broadcast({})
 | ---
 | - error: 'bad argument #1 to ''?'' (string expected, got table)'
 | ...

-- Callback is invoked after registration.
count = 0
 | ---
 | ...
key = nil
 | ---
 | ...
value = nil
 | ---
 | ...
cb = function(k, v) count = count + 1 key = k value = v end
 | ---
 | ...
w = box.watch('foo', cb)
 | ---
 | ...
assert(tostring(w) == 'box.watcher')
 | ---
 | - true
 | ...
test_run:wait_cond(function() return count == 1 end)
 | ---
 | - true
 | ...
assert(count == 1)
 | ---
 | - true
 | ...
assert(key == 'foo')
 | ---
 | - true
 | ...
assert(value == nil)
 | ---
 | - true
 | ...

-- Callback is invoked on broadcast.
count = 0
 | ---
 | ...
box.broadcast('foo', 123)
 | ---
 | ...
test_run:wait_cond(function() return count == 1 end)
 | ---
 | - true
 | ...
assert(count == 1)
 | ---
 | - true
 | ...
assert(key == 'foo')
 | ---
 | - true
 | ...
assert(value == 123)
 | ---
 | - true
 | ...

-- Passing nil/none to broadcast.
count = 0
 | ---
 | ...
box.broadcast('foo', nil)
 | ---
 | ...
test_run:wait_cond(function() return count == 1 end)
 | ---
 | - true
 | ...
assert(count == 1)
 | ---
 | - true
 | ...
assert(key == 'foo')
 | ---
 | - true
 | ...
assert(value == nil)
 | ---
 | - true
 | ...
count = 0
 | ---
 | ...
box.broadcast('foo')
 | ---
 | ...
test_run:wait_cond(function() return count == 1 end)
 | ---
 | - true
 | ...
assert(count == 1)
 | ---
 | - true
 | ...
assert(key == 'foo')
 | ---
 | - true
 | ...
assert(value == nil)
 | ---
 | - true
 | ...

-- Callback isn't invoked when another key is updated.
count = 0
 | ---
 | ...
box.broadcast('bar')
 | ---
 | ...
fiber.sleep(0.01)
 | ---
 | ...
assert(count == 0)
 | ---
 | - true
 | ...

-- Callback isn't invoked after unregistration.
count = 0
 | ---
 | ...
w:unregister()
 | ---
 | ...
box.broadcast('foo')
 | ---
 | ...
fiber.sleep(0.01)
 | ---
 | ...
assert(count == 0)
 | ---
 | - true
 | ...

-- Second attempt to unregister fails.
w:unregister()
 | ---
 | - error: Watcher is already unregistered
 | ...

-- Callback is garbage collected.
weak = setmetatable({cb = cb}, {__mode = 'v'})
 | ---
 | ...
cb = nil
 | ---
 | ...
_ = collectgarbage()
 | ---
 | ...
assert(weak.cb == nil)
 | ---
 | - true
 | ...

-- Raising error from a callback.
w = box.watch('foo', function() error('foobar') end)
 | ---
 | ...
test_run:wait_log('default', 'foobar', 1000)
 | ---
 | - foobar
 | ...
w:unregister()
 | ---
 | ...

-- Broadcasting data that can't be encoded in msgpack.
msgpack.cfg({decode_invalid_numbers = false})
 | ---
 | ...
box.broadcast('foo', math.huge)
 | ---
 | ...
count = 0
 | ---
 | ...
w = box.watch('foo', function() count = count + 1 end)
 | ---
 | ...
test_run:wait_log('default', 'number must not be NaN or Inf', 1000)
 | ---
 | - number must not be NaN or Inf
 | ...
assert(count == 0)
 | ---
 | - true
 | ...
w:unregister()
 | ---
 | ...
msgpack.cfg({decode_invalid_numbers = true})
 | ---
 | ...

-- Several watchers can be registered for the same key.
box.broadcast('foo')
 | ---
 | ...
count1 = 0
 | ---
 | ...
count2 = 0
 | ---
 | ...
count3 = 0
 | ---
 | ...
w1 = box.watch('foo', function() count1 = count1 + 1 end)
 | ---
 | ...
test_run:wait_cond(function() return count1 == 1 end)
 | ---
 | - true
 | ...
w2 = box.watch('foo', function() count2 = count2 + 1 end)
 | ---
 | ...
test_run:wait_cond(function() return count2 == 1 end)
 | ---
 | - true
 | ...
w3 = box.watch('foo', function() count3 = count3 + 1 end)
 | ---
 | ...
test_run:wait_cond(function() return count3 == 1 end)
 | ---
 | - true
 | ...
assert(count1 == 1)
 | ---
 | - true
 | ...
assert(count2 == 1)
 | ---
 | - true
 | ...
assert(count3 == 1)
 | ---
 | - true
 | ...
w1:unregister()
 | ---
 | ...
box.broadcast('foo')
 | ---
 | ...
test_run:wait_cond(function() return count2 == 2 end)
 | ---
 | - true
 | ...
test_run:wait_cond(function() return count3 == 2 end)
 | ---
 | - true
 | ...
assert(count1 == 1)
 | ---
 | - true
 | ...
assert(count2 == 2)
 | ---
 | - true
 | ...
assert(count3 == 2)
 | ---
 | - true
 | ...
w2:unregister()
 | ---
 | ...
box.broadcast('foo')
 | ---
 | ...
test_run:wait_cond(function() return count3 == 3 end)
 | ---
 | - true
 | ...
assert(count1 == 1)
 | ---
 | - true
 | ...
assert(count2 == 2)
 | ---
 | - true
 | ...
assert(count3 == 3)
 | ---
 | - true
 | ...
w3:unregister()
 | ---
 | ...

-- Watcher is rescheduled if the key is updated while it's running.
ch1 = fiber.channel()
 | ---
 | ...
ch2 = fiber.channel()
 | ---
 | ...
key = nil
 | ---
 | ...
value = nil
 | ---
 | ...
box.broadcast('foo', 'bar')
 | ---
 | ...
w = box.watch('foo', function(k, v) key = k value = v ch1:put(true) ch2:get() end)
 | ---
 | ...
ch1:get()
 | ---
 | - true
 | ...
assert(key == 'foo')
 | ---
 | - true
 | ...
assert(value == 'bar')
 | ---
 | - true
 | ...
box.broadcast('foo', 'baz')
 | ---
 | ...
ch2:put(true)
 | ---
 | - true
 | ...
ch1:get()
 | ---
 | - true
 | ...
assert(key == 'foo')
 | ---
 | - true
 | ...
assert(value == 'baz')
 | ---
 | - true
 | ...
ch2:put(true)
 | ---
 | - true
 | ...
w:unregister()
 | ---
 | ...

-- Unregistering a running watcher.
count = 0
 | ---
 | ...
ch = fiber.channel()
 | ---
 | ...
w = box.watch('foo', function() count = count + 1 ch:get() end)
 | ---
 | ...
test_run:wait_cond(function() return count == 1 end)
 | ---
 | - true
 | ...
assert(count == 1)
 | ---
 | - true
 | ...
box.broadcast('foo')
 | ---
 | ...
w:unregister();
 | ---
 | ...
ch:put(true)
 | ---
 | - true
 | ...
fiber.sleep(0.01)
 | ---
 | ...
assert(count == 1)
 | ---
 | - true
 | ...

-- Yielding watcher doesn't block other watchers.
count1 = 0
 | ---
 | ...
count2 = 0
 | ---
 | ...
ch = fiber.channel()
 | ---
 | ...
w1 = box.watch('foo', function() count1 = count1 + 1 end)
 | ---
 | ...
w2 = box.watch('foo', function() count2 = count2 + 1 ch:get() end)
 | ---
 | ...
test_run:wait_cond(function() return count1 == 1 end)
 | ---
 | - true
 | ...
test_run:wait_cond(function() return count2 == 1 end)
 | ---
 | - true
 | ...
assert(count1 == 1)
 | ---
 | - true
 | ...
assert(count2 == 1)
 | ---
 | - true
 | ...
box.broadcast('foo')
 | ---
 | ...
test_run:wait_cond(function() return count1 == 2 end)
 | ---
 | - true
 | ...
assert(count1 == 2)
 | ---
 | - true
 | ...
assert(count2 == 1)
 | ---
 | - true
 | ...
ch:put(true)
 | ---
 | - true
 | ...
test_run:wait_cond(function() return count2 == 2 end)
 | ---
 | - true
 | ...
assert(count1 == 2)
 | ---
 | - true
 | ...
assert(count2 == 2)
 | ---
 | - true
 | ...
w1:unregister()
 | ---
 | ...
w2:unregister()
 | ---
 | ...

-- Watcher is not unregistered if the handle is garbage collected.
count = 0
 | ---
 | ...
w = box.watch('foo', function() count = count + 1 end)
 | ---
 | ...
test_run:wait_cond(function() return count == 1 end)
 | ---
 | - true
 | ...
assert(count == 1)
 | ---
 | - true
 | ...
weak = setmetatable({w = w}, {__mode = 'v'})
 | ---
 | ...
w = nil
 | ---
 | ...
collectgarbage('collect')
 | ---
 | - 0
 | ...
assert(weak.w == nil)
 | ---
 | - true
 | ...
count = 0
 | ---
 | ...
box.broadcast('foo', 123)
 | ---
 | ...
test_run:wait_cond(function() return count == 1 end)
 | ---
 | - true
 | ...
assert(count == 1)
 | ---
 | - true
 | ...
