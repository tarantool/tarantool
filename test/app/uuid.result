-- box.uuid
uuid = require('uuid')
---
...
test_run = require('test_run').new()
---
...
test_run:cmd("push filter ".."'\\.lua.*:[0-9]+: ' to '.lua '")
---
- true
...
--
-- RFC4122 compliance
--
uu = uuid.new()
---
...
-- new()always generates RFC4122 variant
bit.band(uu.clock_seq_hi_and_reserved, 0xc0) == 0x80
---
- true
...
vsn = bit.rshift(uu.time_hi_and_version, 12)
---
...
-- new() generates time-based or random-based version
vsn == 1 or vsn == 4
---
- true
...
--
-- to/from string
--
uu = uuid()
---
...
#uu:str()
---
- 36
...
string.match(uu:str(), '^[a-f0-9%-]+$') ~= nil
---
- true
...
uu == uuid.fromstr(uu:str())
---
- true
...
uu = uuid.fromstr('ba90d815-14e0-431d-80c0-ce587885bb78')
---
...
uu:str()
---
- ba90d815-14e0-431d-80c0-ce587885bb78
...
tostring(uu)
---
- ba90d815-14e0-431d-80c0-ce587885bb78
...
tostring(uu) == uu:str()
---
- true
...
uu.time_low;
---
- 3130054677
...
uu.time_mid;
---
- 5344
...
uu.time_hi_and_version;
---
- 17181
...
uu.clock_seq_hi_and_reserved;
---
- 128
...
uu.clock_seq_low;
---
- 192
...
uu.node[0]
---
- 206
...
uu.node[1]
---
- 88
...
uu.node[2]
---
- 120
...
uu.node[3]
---
- 133
...
uu.node[4]
---
- 187
...
uu.node[5]
---
- 120
...
-- aliases
#uuid.str()
---
- 36
...
-- invalid values
uuid.fromstr(nil)
---
- error: 'builtin/uuid.lua fromstr(str)'
...
uuid.fromstr('')
---
- null
...
uuid.fromstr('blablabla')
---
- null
...
uuid.fromstr(string.rep(' ', 36))
---
- null
...
uuid.fromstr('ba90d81514e0431d80c0ce587885bb78')
---
- null
...
uuid.fromstr('ba90d815-14e0-431d-80c0')
---
- null
...
uuid.fromstr('ba90d815-14e0-431d-80c0-tt587885bb7')
---
- null
...
--
-- to/from binary
--
uu = uuid()
---
...
#uu:bin()
---
- 16
...
#uu:bin('h')
---
- 16
...
#uu:bin('l')
---
- 16
...
#uu:bin('n')
---
- 16
...
#uu:bin('b')
---
- 16
...
uu:bin() == uu:bin('h')
---
- true
...
uu:bin('n') ~= uu:bin('h')
---
- true
...
uu:bin('b') ~= uu:bin('l')
---
- true
...
uu == uuid.frombin(uu:bin())
---
- true
...
uu == uuid.frombin(uu:bin('b'), 'b')
---
- true
...
uu == uuid.frombin(uu:bin('l'), 'l')
---
- true
...
uu = uuid.fromstr('adf9d02e-0756-11e4-b5cf-525400123456')
---
...
string.hex(uu:bin('l'))
---
- 2ed0f9ad5607e411b5cf525400123456
...
string.hex(uu:bin('b'))
---
- adf9d02e075611e4b5cf525400123456
...
-- aliases
#uuid.bin()
---
- 16
...
#uuid.bin('l')
---
- 16
...
--
-- eq and nil
--
uu = uuid.new()
---
...
uuid.NULL
---
- 00000000-0000-0000-0000-000000000000
...
uuid.NULL:isnil()
---
- true
...
uuid.NULL ~= uu
---
- true
...
uu:isnil()
---
- false
...
uu ==  uu
---
- true
...
uu == uu
---
- true
...
uu == nil
---
- false
...
uu == 12345
---
- false
...
uu == "blablabla"
---
- false
...
--
-- invalid usage
--
uu = uuid.new()
---
...
uu.isnil()
---
- error: 'Usage: uuid:isnil()'
...
uu.bin()
---
- error: 'Usage: uuid:bin([byteorder])'
...
uu.str()
---
- error: 'Usage: uuid:str()'
...
uu = nil
---
...
--
-- gh-5171: is_uuid function
--
uuid.is_uuid(uuid.new())
---
- true
...
uuid.is_uuid(uuid.new():str())
---
- false
...
uuid.is_uuid(1)
---
- false
...
uuid.is_uuid(require('decimal').new('123'))
---
- false
...
--
-- gh-5511: allow to compare uuid values
--
u1 = uuid.fromstr('aaaaaaaa-aaaa-4000-b000-000000000001')
---
...
u2 = uuid.fromstr('bbbbbbbb-bbbb-4000-b000-000000000001')
---
...
u1 > u1
---
- false
...
u1 >= u1
---
- true
...
u1 <= u1
---
- true
...
u1 < u1
---
- false
...
u1 > u2
---
- false
...
u1 >= u2
---
- false
...
u1 <= u2
---
- true
...
u1 < u2
---
- true
...
u1 < 1
---
- error: '[string "return u1 < 1 "]:1: incorrect value to convert to uuid as 2 argument'
...
u1 <= 1
---
- error: '[string "return u1 <= 1 "]:1: incorrect value to convert to uuid as 2 argument'
...
u1 < 'abc'
---
- error: '[string "return u1 < ''abc'' "]:1: incorrect value to convert to uuid as
    2 argument'
...
u1 <= 'abc'
---
- error: '[string "return u1 <= ''abc'' "]:1: incorrect value to convert to uuid as
    2 argument'
...
1 < u1
---
- error: '[string "return 1 < u1 "]:1: incorrect value to convert to uuid as 1 argument'
...
1 <= u1
---
- error: '[string "return 1 <= u1 "]:1: incorrect value to convert to uuid as 1 argument'
...
'abc' < u1
---
- error: '[string "return ''abc'' < u1 "]:1: incorrect value to convert to uuid as
    1 argument'
...
'abc' <= u1
---
- error: '[string "return ''abc'' <= u1 "]:1: incorrect value to convert to uuid as
    1 argument'
...
u1 = nil
---
...
u2 = nil
---
...
--
-- allow to compare uuid values with strings
--
u1_str = 'aaaaaaaa-aaaa-4000-b000-000000000001'
---
...
u1 = uuid.fromstr(u1_str)
---
...
u2_str = 'bbbbbbbb-bbbb-4000-b000-000000000001'
---
...
u1 == u1_str
---
- true
...
u1 == u2_str
---
- false
...
u1_str == u1
---
- true
...
u2_str == u1
---
- false
...
u1 > u1_str
---
- false
...
u1 >= u1_str
---
- true
...
u1 < u1_str
---
- false
...
u1 <= u1_str
---
- true
...
u1 > u2_str
---
- false
...
u1 >= u2_str
---
- false
...
u1 < u2_str
---
- true
...
u1 <= u2_str
---
- true
...
u1 = nil
---
...
u1_str = nil
---
...
u2_str = nil
---
...
--
-- gh-6042: add UUID to SCALAR.
--
s = box.schema.space.create('s', {format={{'s', 'scalar'}}})
---
...
_ = s:create_index('i')
---
...
s:insert({uuid.fromstr('11111111-1111-1111-1111-111111111111')})
---
- [11111111-1111-1111-1111-111111111111]
...
s:insert({uuid.fromstr('11111111-1111-1111-1111-111111111112')})
---
- [11111111-1111-1111-1111-111111111112]
...
s:insert({1})
---
- [1]
...
s:insert({'1'})
---
- ['1']
...
s:insert({true})
---
- [true]
...
box.execute([[INSERT INTO "s" VALUES (x'303030')]])
---
- row_count: 1
...
--
-- Make sure that comparison is right. Comparison in SCALAR field:
-- bool < number < string < varbinary < uuid.
--
s:select()
---
- - [true]
  - [1]
  - ['1']
  - ['000']
  - [11111111-1111-1111-1111-111111111111]
  - [11111111-1111-1111-1111-111111111112]
...
s:select({}, {iterator='LE'})
---
- - [11111111-1111-1111-1111-111111111112]
  - [11111111-1111-1111-1111-111111111111]
  - ['000']
  - ['1']
  - [1]
  - [true]
...
s:drop()
---
...
uuid = nil
---
...
test_run:cmd("clear filter")
---
- true
...
