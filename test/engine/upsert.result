test_run = require('test_run').new()
---
...
engine = test_run:get_cfg('engine')
---
...
-- upsert (str)
space = box.schema.space.create('test', { engine = engine })
---
...
index = space:create_index('primary', { type = 'tree', parts = {1, 'string'} })
---
...
for key = 1, 100 do space:upsert({tostring(key), 0}, {{'+', 2, 1}}) end
---
...
t = {}
---
...
for key = 1, 100 do table.insert(t, space:get({tostring(key)})) end
---
...
t
---
- - ['1', 0]
  - ['2', 0]
  - ['3', 0]
  - ['4', 0]
  - ['5', 0]
  - ['6', 0]
  - ['7', 0]
  - ['8', 0]
  - ['9', 0]
  - ['10', 0]
  - ['11', 0]
  - ['12', 0]
  - ['13', 0]
  - ['14', 0]
  - ['15', 0]
  - ['16', 0]
  - ['17', 0]
  - ['18', 0]
  - ['19', 0]
  - ['20', 0]
  - ['21', 0]
  - ['22', 0]
  - ['23', 0]
  - ['24', 0]
  - ['25', 0]
  - ['26', 0]
  - ['27', 0]
  - ['28', 0]
  - ['29', 0]
  - ['30', 0]
  - ['31', 0]
  - ['32', 0]
  - ['33', 0]
  - ['34', 0]
  - ['35', 0]
  - ['36', 0]
  - ['37', 0]
  - ['38', 0]
  - ['39', 0]
  - ['40', 0]
  - ['41', 0]
  - ['42', 0]
  - ['43', 0]
  - ['44', 0]
  - ['45', 0]
  - ['46', 0]
  - ['47', 0]
  - ['48', 0]
  - ['49', 0]
  - ['50', 0]
  - ['51', 0]
  - ['52', 0]
  - ['53', 0]
  - ['54', 0]
  - ['55', 0]
  - ['56', 0]
  - ['57', 0]
  - ['58', 0]
  - ['59', 0]
  - ['60', 0]
  - ['61', 0]
  - ['62', 0]
  - ['63', 0]
  - ['64', 0]
  - ['65', 0]
  - ['66', 0]
  - ['67', 0]
  - ['68', 0]
  - ['69', 0]
  - ['70', 0]
  - ['71', 0]
  - ['72', 0]
  - ['73', 0]
  - ['74', 0]
  - ['75', 0]
  - ['76', 0]
  - ['77', 0]
  - ['78', 0]
  - ['79', 0]
  - ['80', 0]
  - ['81', 0]
  - ['82', 0]
  - ['83', 0]
  - ['84', 0]
  - ['85', 0]
  - ['86', 0]
  - ['87', 0]
  - ['88', 0]
  - ['89', 0]
  - ['90', 0]
  - ['91', 0]
  - ['92', 0]
  - ['93', 0]
  - ['94', 0]
  - ['95', 0]
  - ['96', 0]
  - ['97', 0]
  - ['98', 0]
  - ['99', 0]
  - ['100', 0]
...
for key = 1, 100 do space:upsert({tostring(key), 0}, {{'+', 2, 10}}) end
---
...
t = {}
---
...
for key = 1, 100 do table.insert(t, space:get({tostring(key)})) end
---
...
t
---
- - ['1', 10]
  - ['2', 10]
  - ['3', 10]
  - ['4', 10]
  - ['5', 10]
  - ['6', 10]
  - ['7', 10]
  - ['8', 10]
  - ['9', 10]
  - ['10', 10]
  - ['11', 10]
  - ['12', 10]
  - ['13', 10]
  - ['14', 10]
  - ['15', 10]
  - ['16', 10]
  - ['17', 10]
  - ['18', 10]
  - ['19', 10]
  - ['20', 10]
  - ['21', 10]
  - ['22', 10]
  - ['23', 10]
  - ['24', 10]
  - ['25', 10]
  - ['26', 10]
  - ['27', 10]
  - ['28', 10]
  - ['29', 10]
  - ['30', 10]
  - ['31', 10]
  - ['32', 10]
  - ['33', 10]
  - ['34', 10]
  - ['35', 10]
  - ['36', 10]
  - ['37', 10]
  - ['38', 10]
  - ['39', 10]
  - ['40', 10]
  - ['41', 10]
  - ['42', 10]
  - ['43', 10]
  - ['44', 10]
  - ['45', 10]
  - ['46', 10]
  - ['47', 10]
  - ['48', 10]
  - ['49', 10]
  - ['50', 10]
  - ['51', 10]
  - ['52', 10]
  - ['53', 10]
  - ['54', 10]
  - ['55', 10]
  - ['56', 10]
  - ['57', 10]
  - ['58', 10]
  - ['59', 10]
  - ['60', 10]
  - ['61', 10]
  - ['62', 10]
  - ['63', 10]
  - ['64', 10]
  - ['65', 10]
  - ['66', 10]
  - ['67', 10]
  - ['68', 10]
  - ['69', 10]
  - ['70', 10]
  - ['71', 10]
  - ['72', 10]
  - ['73', 10]
  - ['74', 10]
  - ['75', 10]
  - ['76', 10]
  - ['77', 10]
  - ['78', 10]
  - ['79', 10]
  - ['80', 10]
  - ['81', 10]
  - ['82', 10]
  - ['83', 10]
  - ['84', 10]
  - ['85', 10]
  - ['86', 10]
  - ['87', 10]
  - ['88', 10]
  - ['89', 10]
  - ['90', 10]
  - ['91', 10]
  - ['92', 10]
  - ['93', 10]
  - ['94', 10]
  - ['95', 10]
  - ['96', 10]
  - ['97', 10]
  - ['98', 10]
  - ['99', 10]
  - ['100', 10]
...
for key = 1, 100 do space:delete({tostring(key)}) end
---
...
for key = 1, 100 do space:upsert({tostring(key), 0}, {{'+', 2, 1}, {'=', 3, key}}) end
---
...
t = {}
---
...
for key = 1, 100 do table.insert(t, space:get({tostring(key)})) end
---
...
t
---
- - ['1', 0]
  - ['2', 0]
  - ['3', 0]
  - ['4', 0]
  - ['5', 0]
  - ['6', 0]
  - ['7', 0]
  - ['8', 0]
  - ['9', 0]
  - ['10', 0]
  - ['11', 0]
  - ['12', 0]
  - ['13', 0]
  - ['14', 0]
  - ['15', 0]
  - ['16', 0]
  - ['17', 0]
  - ['18', 0]
  - ['19', 0]
  - ['20', 0]
  - ['21', 0]
  - ['22', 0]
  - ['23', 0]
  - ['24', 0]
  - ['25', 0]
  - ['26', 0]
  - ['27', 0]
  - ['28', 0]
  - ['29', 0]
  - ['30', 0]
  - ['31', 0]
  - ['32', 0]
  - ['33', 0]
  - ['34', 0]
  - ['35', 0]
  - ['36', 0]
  - ['37', 0]
  - ['38', 0]
  - ['39', 0]
  - ['40', 0]
  - ['41', 0]
  - ['42', 0]
  - ['43', 0]
  - ['44', 0]
  - ['45', 0]
  - ['46', 0]
  - ['47', 0]
  - ['48', 0]
  - ['49', 0]
  - ['50', 0]
  - ['51', 0]
  - ['52', 0]
  - ['53', 0]
  - ['54', 0]
  - ['55', 0]
  - ['56', 0]
  - ['57', 0]
  - ['58', 0]
  - ['59', 0]
  - ['60', 0]
  - ['61', 0]
  - ['62', 0]
  - ['63', 0]
  - ['64', 0]
  - ['65', 0]
  - ['66', 0]
  - ['67', 0]
  - ['68', 0]
  - ['69', 0]
  - ['70', 0]
  - ['71', 0]
  - ['72', 0]
  - ['73', 0]
  - ['74', 0]
  - ['75', 0]
  - ['76', 0]
  - ['77', 0]
  - ['78', 0]
  - ['79', 0]
  - ['80', 0]
  - ['81', 0]
  - ['82', 0]
  - ['83', 0]
  - ['84', 0]
  - ['85', 0]
  - ['86', 0]
  - ['87', 0]
  - ['88', 0]
  - ['89', 0]
  - ['90', 0]
  - ['91', 0]
  - ['92', 0]
  - ['93', 0]
  - ['94', 0]
  - ['95', 0]
  - ['96', 0]
  - ['97', 0]
  - ['98', 0]
  - ['99', 0]
  - ['100', 0]
...
space:drop()
---
...
-- upsert (num)
space = box.schema.space.create('test', { engine = engine })
---
...
index = space:create_index('primary', { type = 'tree', parts = {1, 'unsigned'} })
---
...
for key = 1, 100 do space:upsert({key, 0}, {{'+', 2, 1}}) end
---
...
t = {}
---
...
for key = 1, 100 do table.insert(t, space:get({key})) end
---
...
t
---
- - [1, 0]
  - [2, 0]
  - [3, 0]
  - [4, 0]
  - [5, 0]
  - [6, 0]
  - [7, 0]
  - [8, 0]
  - [9, 0]
  - [10, 0]
  - [11, 0]
  - [12, 0]
  - [13, 0]
  - [14, 0]
  - [15, 0]
  - [16, 0]
  - [17, 0]
  - [18, 0]
  - [19, 0]
  - [20, 0]
  - [21, 0]
  - [22, 0]
  - [23, 0]
  - [24, 0]
  - [25, 0]
  - [26, 0]
  - [27, 0]
  - [28, 0]
  - [29, 0]
  - [30, 0]
  - [31, 0]
  - [32, 0]
  - [33, 0]
  - [34, 0]
  - [35, 0]
  - [36, 0]
  - [37, 0]
  - [38, 0]
  - [39, 0]
  - [40, 0]
  - [41, 0]
  - [42, 0]
  - [43, 0]
  - [44, 0]
  - [45, 0]
  - [46, 0]
  - [47, 0]
  - [48, 0]
  - [49, 0]
  - [50, 0]
  - [51, 0]
  - [52, 0]
  - [53, 0]
  - [54, 0]
  - [55, 0]
  - [56, 0]
  - [57, 0]
  - [58, 0]
  - [59, 0]
  - [60, 0]
  - [61, 0]
  - [62, 0]
  - [63, 0]
  - [64, 0]
  - [65, 0]
  - [66, 0]
  - [67, 0]
  - [68, 0]
  - [69, 0]
  - [70, 0]
  - [71, 0]
  - [72, 0]
  - [73, 0]
  - [74, 0]
  - [75, 0]
  - [76, 0]
  - [77, 0]
  - [78, 0]
  - [79, 0]
  - [80, 0]
  - [81, 0]
  - [82, 0]
  - [83, 0]
  - [84, 0]
  - [85, 0]
  - [86, 0]
  - [87, 0]
  - [88, 0]
  - [89, 0]
  - [90, 0]
  - [91, 0]
  - [92, 0]
  - [93, 0]
  - [94, 0]
  - [95, 0]
  - [96, 0]
  - [97, 0]
  - [98, 0]
  - [99, 0]
  - [100, 0]
...
for key = 1, 100 do space:upsert({key, 0}, {{'+', 2, 10}}) end
---
...
t = {}
---
...
for key = 1, 100 do table.insert(t, space:get({key})) end
---
...
t
---
- - [1, 10]
  - [2, 10]
  - [3, 10]
  - [4, 10]
  - [5, 10]
  - [6, 10]
  - [7, 10]
  - [8, 10]
  - [9, 10]
  - [10, 10]
  - [11, 10]
  - [12, 10]
  - [13, 10]
  - [14, 10]
  - [15, 10]
  - [16, 10]
  - [17, 10]
  - [18, 10]
  - [19, 10]
  - [20, 10]
  - [21, 10]
  - [22, 10]
  - [23, 10]
  - [24, 10]
  - [25, 10]
  - [26, 10]
  - [27, 10]
  - [28, 10]
  - [29, 10]
  - [30, 10]
  - [31, 10]
  - [32, 10]
  - [33, 10]
  - [34, 10]
  - [35, 10]
  - [36, 10]
  - [37, 10]
  - [38, 10]
  - [39, 10]
  - [40, 10]
  - [41, 10]
  - [42, 10]
  - [43, 10]
  - [44, 10]
  - [45, 10]
  - [46, 10]
  - [47, 10]
  - [48, 10]
  - [49, 10]
  - [50, 10]
  - [51, 10]
  - [52, 10]
  - [53, 10]
  - [54, 10]
  - [55, 10]
  - [56, 10]
  - [57, 10]
  - [58, 10]
  - [59, 10]
  - [60, 10]
  - [61, 10]
  - [62, 10]
  - [63, 10]
  - [64, 10]
  - [65, 10]
  - [66, 10]
  - [67, 10]
  - [68, 10]
  - [69, 10]
  - [70, 10]
  - [71, 10]
  - [72, 10]
  - [73, 10]
  - [74, 10]
  - [75, 10]
  - [76, 10]
  - [77, 10]
  - [78, 10]
  - [79, 10]
  - [80, 10]
  - [81, 10]
  - [82, 10]
  - [83, 10]
  - [84, 10]
  - [85, 10]
  - [86, 10]
  - [87, 10]
  - [88, 10]
  - [89, 10]
  - [90, 10]
  - [91, 10]
  - [92, 10]
  - [93, 10]
  - [94, 10]
  - [95, 10]
  - [96, 10]
  - [97, 10]
  - [98, 10]
  - [99, 10]
  - [100, 10]
...
for key = 1, 100 do space:delete({key}) end
---
...
for key = 1, 100 do space:upsert({key, 0}, {{'+', 2, 1}, {'=', 3, key}}) end
---
...
t = {}
---
...
for key = 1, 100 do table.insert(t, space:get({key})) end
---
...
t
---
- - [1, 0]
  - [2, 0]
  - [3, 0]
  - [4, 0]
  - [5, 0]
  - [6, 0]
  - [7, 0]
  - [8, 0]
  - [9, 0]
  - [10, 0]
  - [11, 0]
  - [12, 0]
  - [13, 0]
  - [14, 0]
  - [15, 0]
  - [16, 0]
  - [17, 0]
  - [18, 0]
  - [19, 0]
  - [20, 0]
  - [21, 0]
  - [22, 0]
  - [23, 0]
  - [24, 0]
  - [25, 0]
  - [26, 0]
  - [27, 0]
  - [28, 0]
  - [29, 0]
  - [30, 0]
  - [31, 0]
  - [32, 0]
  - [33, 0]
  - [34, 0]
  - [35, 0]
  - [36, 0]
  - [37, 0]
  - [38, 0]
  - [39, 0]
  - [40, 0]
  - [41, 0]
  - [42, 0]
  - [43, 0]
  - [44, 0]
  - [45, 0]
  - [46, 0]
  - [47, 0]
  - [48, 0]
  - [49, 0]
  - [50, 0]
  - [51, 0]
  - [52, 0]
  - [53, 0]
  - [54, 0]
  - [55, 0]
  - [56, 0]
  - [57, 0]
  - [58, 0]
  - [59, 0]
  - [60, 0]
  - [61, 0]
  - [62, 0]
  - [63, 0]
  - [64, 0]
  - [65, 0]
  - [66, 0]
  - [67, 0]
  - [68, 0]
  - [69, 0]
  - [70, 0]
  - [71, 0]
  - [72, 0]
  - [73, 0]
  - [74, 0]
  - [75, 0]
  - [76, 0]
  - [77, 0]
  - [78, 0]
  - [79, 0]
  - [80, 0]
  - [81, 0]
  - [82, 0]
  - [83, 0]
  - [84, 0]
  - [85, 0]
  - [86, 0]
  - [87, 0]
  - [88, 0]
  - [89, 0]
  - [90, 0]
  - [91, 0]
  - [92, 0]
  - [93, 0]
  - [94, 0]
  - [95, 0]
  - [96, 0]
  - [97, 0]
  - [98, 0]
  - [99, 0]
  - [100, 0]
...
space:drop()
---
...
-- upsert multi-part (num, num)
space = box.schema.space.create('test', { engine = engine })
---
...
index = space:create_index('primary', { type = 'tree', parts = {1, 'unsigned', 2, 'unsigned'} })
---
...
for key = 1, 100 do space:upsert({key, key, 0}, {{'+', 3, 1}}) end
---
...
t = {}
---
...
for key = 1, 100 do table.insert(t, space:get({key, key})) end
---
...
t
---
- - [1, 1, 0]
  - [2, 2, 0]
  - [3, 3, 0]
  - [4, 4, 0]
  - [5, 5, 0]
  - [6, 6, 0]
  - [7, 7, 0]
  - [8, 8, 0]
  - [9, 9, 0]
  - [10, 10, 0]
  - [11, 11, 0]
  - [12, 12, 0]
  - [13, 13, 0]
  - [14, 14, 0]
  - [15, 15, 0]
  - [16, 16, 0]
  - [17, 17, 0]
  - [18, 18, 0]
  - [19, 19, 0]
  - [20, 20, 0]
  - [21, 21, 0]
  - [22, 22, 0]
  - [23, 23, 0]
  - [24, 24, 0]
  - [25, 25, 0]
  - [26, 26, 0]
  - [27, 27, 0]
  - [28, 28, 0]
  - [29, 29, 0]
  - [30, 30, 0]
  - [31, 31, 0]
  - [32, 32, 0]
  - [33, 33, 0]
  - [34, 34, 0]
  - [35, 35, 0]
  - [36, 36, 0]
  - [37, 37, 0]
  - [38, 38, 0]
  - [39, 39, 0]
  - [40, 40, 0]
  - [41, 41, 0]
  - [42, 42, 0]
  - [43, 43, 0]
  - [44, 44, 0]
  - [45, 45, 0]
  - [46, 46, 0]
  - [47, 47, 0]
  - [48, 48, 0]
  - [49, 49, 0]
  - [50, 50, 0]
  - [51, 51, 0]
  - [52, 52, 0]
  - [53, 53, 0]
  - [54, 54, 0]
  - [55, 55, 0]
  - [56, 56, 0]
  - [57, 57, 0]
  - [58, 58, 0]
  - [59, 59, 0]
  - [60, 60, 0]
  - [61, 61, 0]
  - [62, 62, 0]
  - [63, 63, 0]
  - [64, 64, 0]
  - [65, 65, 0]
  - [66, 66, 0]
  - [67, 67, 0]
  - [68, 68, 0]
  - [69, 69, 0]
  - [70, 70, 0]
  - [71, 71, 0]
  - [72, 72, 0]
  - [73, 73, 0]
  - [74, 74, 0]
  - [75, 75, 0]
  - [76, 76, 0]
  - [77, 77, 0]
  - [78, 78, 0]
  - [79, 79, 0]
  - [80, 80, 0]
  - [81, 81, 0]
  - [82, 82, 0]
  - [83, 83, 0]
  - [84, 84, 0]
  - [85, 85, 0]
  - [86, 86, 0]
  - [87, 87, 0]
  - [88, 88, 0]
  - [89, 89, 0]
  - [90, 90, 0]
  - [91, 91, 0]
  - [92, 92, 0]
  - [93, 93, 0]
  - [94, 94, 0]
  - [95, 95, 0]
  - [96, 96, 0]
  - [97, 97, 0]
  - [98, 98, 0]
  - [99, 99, 0]
  - [100, 100, 0]
...
for key = 1, 100 do space:upsert({key, key, 0}, {{'+', 3, 10}}) end
---
...
t = {}
---
...
for key = 1, 100 do table.insert(t, space:get({key, key})) end
---
...
t
---
- - [1, 1, 10]
  - [2, 2, 10]
  - [3, 3, 10]
  - [4, 4, 10]
  - [5, 5, 10]
  - [6, 6, 10]
  - [7, 7, 10]
  - [8, 8, 10]
  - [9, 9, 10]
  - [10, 10, 10]
  - [11, 11, 10]
  - [12, 12, 10]
  - [13, 13, 10]
  - [14, 14, 10]
  - [15, 15, 10]
  - [16, 16, 10]
  - [17, 17, 10]
  - [18, 18, 10]
  - [19, 19, 10]
  - [20, 20, 10]
  - [21, 21, 10]
  - [22, 22, 10]
  - [23, 23, 10]
  - [24, 24, 10]
  - [25, 25, 10]
  - [26, 26, 10]
  - [27, 27, 10]
  - [28, 28, 10]
  - [29, 29, 10]
  - [30, 30, 10]
  - [31, 31, 10]
  - [32, 32, 10]
  - [33, 33, 10]
  - [34, 34, 10]
  - [35, 35, 10]
  - [36, 36, 10]
  - [37, 37, 10]
  - [38, 38, 10]
  - [39, 39, 10]
  - [40, 40, 10]
  - [41, 41, 10]
  - [42, 42, 10]
  - [43, 43, 10]
  - [44, 44, 10]
  - [45, 45, 10]
  - [46, 46, 10]
  - [47, 47, 10]
  - [48, 48, 10]
  - [49, 49, 10]
  - [50, 50, 10]
  - [51, 51, 10]
  - [52, 52, 10]
  - [53, 53, 10]
  - [54, 54, 10]
  - [55, 55, 10]
  - [56, 56, 10]
  - [57, 57, 10]
  - [58, 58, 10]
  - [59, 59, 10]
  - [60, 60, 10]
  - [61, 61, 10]
  - [62, 62, 10]
  - [63, 63, 10]
  - [64, 64, 10]
  - [65, 65, 10]
  - [66, 66, 10]
  - [67, 67, 10]
  - [68, 68, 10]
  - [69, 69, 10]
  - [70, 70, 10]
  - [71, 71, 10]
  - [72, 72, 10]
  - [73, 73, 10]
  - [74, 74, 10]
  - [75, 75, 10]
  - [76, 76, 10]
  - [77, 77, 10]
  - [78, 78, 10]
  - [79, 79, 10]
  - [80, 80, 10]
  - [81, 81, 10]
  - [82, 82, 10]
  - [83, 83, 10]
  - [84, 84, 10]
  - [85, 85, 10]
  - [86, 86, 10]
  - [87, 87, 10]
  - [88, 88, 10]
  - [89, 89, 10]
  - [90, 90, 10]
  - [91, 91, 10]
  - [92, 92, 10]
  - [93, 93, 10]
  - [94, 94, 10]
  - [95, 95, 10]
  - [96, 96, 10]
  - [97, 97, 10]
  - [98, 98, 10]
  - [99, 99, 10]
  - [100, 100, 10]
...
for key = 1, 100 do space:delete({key, key}) end
---
...
for key = 1, 100 do space:upsert({key, key, 0}, {{'+', 3, 1}, {'=', 4, key}}) end
---
...
t = {}
---
...
for key = 1, 100 do table.insert(t, space:get({key, key})) end
---
...
t
---
- - [1, 1, 0]
  - [2, 2, 0]
  - [3, 3, 0]
  - [4, 4, 0]
  - [5, 5, 0]
  - [6, 6, 0]
  - [7, 7, 0]
  - [8, 8, 0]
  - [9, 9, 0]
  - [10, 10, 0]
  - [11, 11, 0]
  - [12, 12, 0]
  - [13, 13, 0]
  - [14, 14, 0]
  - [15, 15, 0]
  - [16, 16, 0]
  - [17, 17, 0]
  - [18, 18, 0]
  - [19, 19, 0]
  - [20, 20, 0]
  - [21, 21, 0]
  - [22, 22, 0]
  - [23, 23, 0]
  - [24, 24, 0]
  - [25, 25, 0]
  - [26, 26, 0]
  - [27, 27, 0]
  - [28, 28, 0]
  - [29, 29, 0]
  - [30, 30, 0]
  - [31, 31, 0]
  - [32, 32, 0]
  - [33, 33, 0]
  - [34, 34, 0]
  - [35, 35, 0]
  - [36, 36, 0]
  - [37, 37, 0]
  - [38, 38, 0]
  - [39, 39, 0]
  - [40, 40, 0]
  - [41, 41, 0]
  - [42, 42, 0]
  - [43, 43, 0]
  - [44, 44, 0]
  - [45, 45, 0]
  - [46, 46, 0]
  - [47, 47, 0]
  - [48, 48, 0]
  - [49, 49, 0]
  - [50, 50, 0]
  - [51, 51, 0]
  - [52, 52, 0]
  - [53, 53, 0]
  - [54, 54, 0]
  - [55, 55, 0]
  - [56, 56, 0]
  - [57, 57, 0]
  - [58, 58, 0]
  - [59, 59, 0]
  - [60, 60, 0]
  - [61, 61, 0]
  - [62, 62, 0]
  - [63, 63, 0]
  - [64, 64, 0]
  - [65, 65, 0]
  - [66, 66, 0]
  - [67, 67, 0]
  - [68, 68, 0]
  - [69, 69, 0]
  - [70, 70, 0]
  - [71, 71, 0]
  - [72, 72, 0]
  - [73, 73, 0]
  - [74, 74, 0]
  - [75, 75, 0]
  - [76, 76, 0]
  - [77, 77, 0]
  - [78, 78, 0]
  - [79, 79, 0]
  - [80, 80, 0]
  - [81, 81, 0]
  - [82, 82, 0]
  - [83, 83, 0]
  - [84, 84, 0]
  - [85, 85, 0]
  - [86, 86, 0]
  - [87, 87, 0]
  - [88, 88, 0]
  - [89, 89, 0]
  - [90, 90, 0]
  - [91, 91, 0]
  - [92, 92, 0]
  - [93, 93, 0]
  - [94, 94, 0]
  - [95, 95, 0]
  - [96, 96, 0]
  - [97, 97, 0]
  - [98, 98, 0]
  - [99, 99, 0]
  - [100, 100, 0]
...
space:drop()
---
...
test_run:cmd("setopt delimiter ';'");
---
- true
...
function less(a, b)
    if type(a[2]) ~= type(b[2]) then
        return type(a[2]) < type(b[2])
    end
    if a[2] == b[2] then
        return a[1] < b[1]
    end
    if type(a[2]) == 'boolean' then
        return a[2] == false and b[2] == true
    end
    return a[2] < b[2]
end;
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
function sort(t) table.sort(t, less) return t end
---
...
-- upsert default tuple constraint
space = box.schema.space.create('test', { engine = engine })
---
...
index = space:create_index('primary', { type = 'tree', parts = {1, 'unsigned', 2, 'unsigned'} })
---
...
space:upsert({0, 'key', 0}, {{'+', 3, 1}})
---
- error: 'Tuple field 2 type does not match one required by operation: expected unsigned,
    got string'
...
space:drop()
---
...
-- upsert primary key modify (skipped)
space = box.schema.space.create('test', { engine = engine })
---
...
index = space:create_index('primary', { type = 'tree', parts = {1, 'unsigned'} })
---
...
space:upsert({0, 0}, {{'+', 1, 1}, {'+', 2, 1}})
---
...
space:get({0})
---
- [0, 0]
...
space:drop()
---
...
-- upsert with box.tuple.new
space = box.schema.space.create('test', { engine = engine })
---
...
index = space:create_index('primary', { type = 'tree', parts = {1, 'unsigned', 2, 'unsigned'} })
---
...
for key = 1, 100 do space:upsert(box.tuple.new{key, key, 0}, box.tuple.new{{'+', 3, 1}}) end
---
...
t = {}
---
...
for key = 1, 100 do table.insert(t, space:get({key, key})) end
---
...
t
---
- - [1, 1, 0]
  - [2, 2, 0]
  - [3, 3, 0]
  - [4, 4, 0]
  - [5, 5, 0]
  - [6, 6, 0]
  - [7, 7, 0]
  - [8, 8, 0]
  - [9, 9, 0]
  - [10, 10, 0]
  - [11, 11, 0]
  - [12, 12, 0]
  - [13, 13, 0]
  - [14, 14, 0]
  - [15, 15, 0]
  - [16, 16, 0]
  - [17, 17, 0]
  - [18, 18, 0]
  - [19, 19, 0]
  - [20, 20, 0]
  - [21, 21, 0]
  - [22, 22, 0]
  - [23, 23, 0]
  - [24, 24, 0]
  - [25, 25, 0]
  - [26, 26, 0]
  - [27, 27, 0]
  - [28, 28, 0]
  - [29, 29, 0]
  - [30, 30, 0]
  - [31, 31, 0]
  - [32, 32, 0]
  - [33, 33, 0]
  - [34, 34, 0]
  - [35, 35, 0]
  - [36, 36, 0]
  - [37, 37, 0]
  - [38, 38, 0]
  - [39, 39, 0]
  - [40, 40, 0]
  - [41, 41, 0]
  - [42, 42, 0]
  - [43, 43, 0]
  - [44, 44, 0]
  - [45, 45, 0]
  - [46, 46, 0]
  - [47, 47, 0]
  - [48, 48, 0]
  - [49, 49, 0]
  - [50, 50, 0]
  - [51, 51, 0]
  - [52, 52, 0]
  - [53, 53, 0]
  - [54, 54, 0]
  - [55, 55, 0]
  - [56, 56, 0]
  - [57, 57, 0]
  - [58, 58, 0]
  - [59, 59, 0]
  - [60, 60, 0]
  - [61, 61, 0]
  - [62, 62, 0]
  - [63, 63, 0]
  - [64, 64, 0]
  - [65, 65, 0]
  - [66, 66, 0]
  - [67, 67, 0]
  - [68, 68, 0]
  - [69, 69, 0]
  - [70, 70, 0]
  - [71, 71, 0]
  - [72, 72, 0]
  - [73, 73, 0]
  - [74, 74, 0]
  - [75, 75, 0]
  - [76, 76, 0]
  - [77, 77, 0]
  - [78, 78, 0]
  - [79, 79, 0]
  - [80, 80, 0]
  - [81, 81, 0]
  - [82, 82, 0]
  - [83, 83, 0]
  - [84, 84, 0]
  - [85, 85, 0]
  - [86, 86, 0]
  - [87, 87, 0]
  - [88, 88, 0]
  - [89, 89, 0]
  - [90, 90, 0]
  - [91, 91, 0]
  - [92, 92, 0]
  - [93, 93, 0]
  - [94, 94, 0]
  - [95, 95, 0]
  - [96, 96, 0]
  - [97, 97, 0]
  - [98, 98, 0]
  - [99, 99, 0]
  - [100, 100, 0]
...
for key = 1, 100 do space:upsert(box.tuple.new{key, key, 0}, box.tuple.new{{'+', 3, 10}}) end
---
...
t = {}
---
...
for key = 1, 100 do table.insert(t, space:get({key, key})) end
---
...
t
---
- - [1, 1, 10]
  - [2, 2, 10]
  - [3, 3, 10]
  - [4, 4, 10]
  - [5, 5, 10]
  - [6, 6, 10]
  - [7, 7, 10]
  - [8, 8, 10]
  - [9, 9, 10]
  - [10, 10, 10]
  - [11, 11, 10]
  - [12, 12, 10]
  - [13, 13, 10]
  - [14, 14, 10]
  - [15, 15, 10]
  - [16, 16, 10]
  - [17, 17, 10]
  - [18, 18, 10]
  - [19, 19, 10]
  - [20, 20, 10]
  - [21, 21, 10]
  - [22, 22, 10]
  - [23, 23, 10]
  - [24, 24, 10]
  - [25, 25, 10]
  - [26, 26, 10]
  - [27, 27, 10]
  - [28, 28, 10]
  - [29, 29, 10]
  - [30, 30, 10]
  - [31, 31, 10]
  - [32, 32, 10]
  - [33, 33, 10]
  - [34, 34, 10]
  - [35, 35, 10]
  - [36, 36, 10]
  - [37, 37, 10]
  - [38, 38, 10]
  - [39, 39, 10]
  - [40, 40, 10]
  - [41, 41, 10]
  - [42, 42, 10]
  - [43, 43, 10]
  - [44, 44, 10]
  - [45, 45, 10]
  - [46, 46, 10]
  - [47, 47, 10]
  - [48, 48, 10]
  - [49, 49, 10]
  - [50, 50, 10]
  - [51, 51, 10]
  - [52, 52, 10]
  - [53, 53, 10]
  - [54, 54, 10]
  - [55, 55, 10]
  - [56, 56, 10]
  - [57, 57, 10]
  - [58, 58, 10]
  - [59, 59, 10]
  - [60, 60, 10]
  - [61, 61, 10]
  - [62, 62, 10]
  - [63, 63, 10]
  - [64, 64, 10]
  - [65, 65, 10]
  - [66, 66, 10]
  - [67, 67, 10]
  - [68, 68, 10]
  - [69, 69, 10]
  - [70, 70, 10]
  - [71, 71, 10]
  - [72, 72, 10]
  - [73, 73, 10]
  - [74, 74, 10]
  - [75, 75, 10]
  - [76, 76, 10]
  - [77, 77, 10]
  - [78, 78, 10]
  - [79, 79, 10]
  - [80, 80, 10]
  - [81, 81, 10]
  - [82, 82, 10]
  - [83, 83, 10]
  - [84, 84, 10]
  - [85, 85, 10]
  - [86, 86, 10]
  - [87, 87, 10]
  - [88, 88, 10]
  - [89, 89, 10]
  - [90, 90, 10]
  - [91, 91, 10]
  - [92, 92, 10]
  - [93, 93, 10]
  - [94, 94, 10]
  - [95, 95, 10]
  - [96, 96, 10]
  - [97, 97, 10]
  - [98, 98, 10]
  - [99, 99, 10]
  - [100, 100, 10]
...
for key = 1, 100 do space:delete({key, key}) end
---
...
for key = 1, 100 do space:upsert(box.tuple.new{key, key, 0}, box.tuple.new{{'+', 3, 1}, {'=', 4, key}}) end
---
...
t = {}
---
...
for key = 1, 100 do table.insert(t, space:get({key, key})) end
---
...
t
---
- - [1, 1, 0]
  - [2, 2, 0]
  - [3, 3, 0]
  - [4, 4, 0]
  - [5, 5, 0]
  - [6, 6, 0]
  - [7, 7, 0]
  - [8, 8, 0]
  - [9, 9, 0]
  - [10, 10, 0]
  - [11, 11, 0]
  - [12, 12, 0]
  - [13, 13, 0]
  - [14, 14, 0]
  - [15, 15, 0]
  - [16, 16, 0]
  - [17, 17, 0]
  - [18, 18, 0]
  - [19, 19, 0]
  - [20, 20, 0]
  - [21, 21, 0]
  - [22, 22, 0]
  - [23, 23, 0]
  - [24, 24, 0]
  - [25, 25, 0]
  - [26, 26, 0]
  - [27, 27, 0]
  - [28, 28, 0]
  - [29, 29, 0]
  - [30, 30, 0]
  - [31, 31, 0]
  - [32, 32, 0]
  - [33, 33, 0]
  - [34, 34, 0]
  - [35, 35, 0]
  - [36, 36, 0]
  - [37, 37, 0]
  - [38, 38, 0]
  - [39, 39, 0]
  - [40, 40, 0]
  - [41, 41, 0]
  - [42, 42, 0]
  - [43, 43, 0]
  - [44, 44, 0]
  - [45, 45, 0]
  - [46, 46, 0]
  - [47, 47, 0]
  - [48, 48, 0]
  - [49, 49, 0]
  - [50, 50, 0]
  - [51, 51, 0]
  - [52, 52, 0]
  - [53, 53, 0]
  - [54, 54, 0]
  - [55, 55, 0]
  - [56, 56, 0]
  - [57, 57, 0]
  - [58, 58, 0]
  - [59, 59, 0]
  - [60, 60, 0]
  - [61, 61, 0]
  - [62, 62, 0]
  - [63, 63, 0]
  - [64, 64, 0]
  - [65, 65, 0]
  - [66, 66, 0]
  - [67, 67, 0]
  - [68, 68, 0]
  - [69, 69, 0]
  - [70, 70, 0]
  - [71, 71, 0]
  - [72, 72, 0]
  - [73, 73, 0]
  - [74, 74, 0]
  - [75, 75, 0]
  - [76, 76, 0]
  - [77, 77, 0]
  - [78, 78, 0]
  - [79, 79, 0]
  - [80, 80, 0]
  - [81, 81, 0]
  - [82, 82, 0]
  - [83, 83, 0]
  - [84, 84, 0]
  - [85, 85, 0]
  - [86, 86, 0]
  - [87, 87, 0]
  - [88, 88, 0]
  - [89, 89, 0]
  - [90, 90, 0]
  - [91, 91, 0]
  - [92, 92, 0]
  - [93, 93, 0]
  - [94, 94, 0]
  - [95, 95, 0]
  - [96, 96, 0]
  - [97, 97, 0]
  - [98, 98, 0]
  - [99, 99, 0]
  - [100, 100, 0]
...
space:drop()
---
...
-- https://github.com/tarantool/tarantool/issues/1671
space = box.schema.space.create('test', { engine = engine })
---
...
index1 = space:create_index('primary', { type = 'tree', parts = {1, 'unsigned'} })
---
...
index2 = space:create_index('secondary', { type = 'tree', parts = {2, 'unsigned'}, unique = false })
---
...
space:insert({1, 1})
---
- [1, 1]
...
space:insert({2, 2})
---
- [2, 2]
...
index1:select{}
---
- - [1, 1]
  - [2, 2]
...
index2:select{}
---
- - [1, 1]
  - [2, 2]
...
space:upsert({1, 1}, {{'=', 2, 2}})
---
...
sort(index1:select{})
---
- - [1, 2]
  - [2, 2]
...
sort(index2:select{})
---
- - [1, 2]
  - [2, 2]
...
space:drop()
---
...
s = box.schema.space.create('tweedledum', { engine = engine })
---
...
index = s:create_index('pk')
---
...
s:upsert({0, 0}, {{'+', 2, 2}})
---
...
s:select{0}
---
- - [0, 0]
...
tmp = s:delete{0}
---
...
s:upsert({0, 0, 0}, {{'+', 2, 2}})
---
...
s:select{0}
---
- - [0, 0, 0]
...
tmp = s:delete{0}
---
...
s:upsert({0}, {{'+', 2, 2}})
---
...
s:select{0}
---
- - [0]
...
s:replace{0, 1, 2, 4}
---
- [0, 1, 2, 4]
...
s:upsert({0, 0, "you will not see it"}, {{'+', 2, 2}})
---
...
s:select{0}
---
- - [0, 3, 2, 4]
...
s:replace{0, -0x4000000000000000ll}
---
- [0, -4611686018427387904]
...
s:upsert({0}, {{'+', 2, -0x4000000000000001ll}})  -- overflow
---
...
s:select{0}
---
- - [0, -4611686018427387904]
...
s:replace{0, "thing"}
---
- [0, 'thing']
...
s:upsert({0, "nothing"}, {{'+', 2, 2}})
---
...
s:select{0}
---
- - [0, 'thing']
...
tmp = s:delete{0}
---
...
s:upsert({0, "thing"}, {{'+', 2, 2}})
---
...
s:select{0}
---
- - [0, 'thing']
...
s:replace{0, 1.5}
---
- [0, 1.5]
...
s:select{}
---
- - [0, 1.5]
...
s:upsert({0}, {{'|', 1, 255}})
---
...
s:select{0}
---
- - [0, 1.5]
...
s:replace{0, 1.5}
---
- [0, 1.5]
...
s:replace{0, 'something to splice'}
---
- [0, 'something to splice']
...
s:upsert({0}, {{':', 2, 1, 4, 'no'}})
---
...
s:select{0}
---
- - [0, 'nothing to splice']
...
s:upsert({0}, {{':', 2, 1, 2, 'every'}})
---
...
s:select{0}
---
- - [0, 'everything to splice']
...
s:upsert({0}, {{':', 2, -100, 2, 'every'}})
---
...
s:select{0}
---
- - [0, 'everything to splice']
...
s:drop()
---
...
space = box.schema.space.create('test', { engine = engine, field_count = 1 })
---
...
index = space:create_index('primary', { type = 'tree', parts = {1, 'unsigned'} })
---
...
space:insert({1})
---
- [1]
...
space:select{}
---
- - [1]
...
space:upsert({2, 2}, {{'+', 2, 1}})
---
- error: Tuple field count 2 does not match space field count 1
...
-- TODO: https://github.com/tarantool/tarantool/issues/1622
-- space:upsert({1}, {{'=', 2, 10}})
space:select{}
---
- - [1]
...
space:drop()
---
...
space = box.schema.space.create('test', { engine = engine, field_count = 2 })
---
...
index = space:create_index('primary', { type = 'tree', parts = {1, 'unsigned'} })
---
...
space:insert({1, 1})
---
- [1, 1]
...
space:select{}
---
- - [1, 1]
...
space:upsert({2, 2, 2}, {{'+', 3, 1}})
---
- error: Tuple field count 3 does not match space field count 2
...
space:upsert({3, 3}, {{'+', 2, 1}})
---
...
-- TODO: https://github.com/tarantool/tarantool/issues/1622
--space:upsert({4}, {{'=', 2, 10}})
--space:upsert({1}, {{'#', 2}})
space:select{}
---
- - [1, 1]
  - [3, 3]
...
space:drop()
---
...
--UPSERT https://github.com/tarantool/tarantool/issues/966
test_run:cmd("setopt delimiter ';'")
---
- true
...
function anything_to_string(tab)
    if tab == nil then
        return 'nil'
    end
    local str = '['
    local first_route = true
    local t = 0
    for k,f in pairs(tab) do
        if not first_route then str = str .. ',' end
        first_route = false
        t = t + 1
        if k ~= t then
            str = str .. k .. '='
        end
        if type(f) == 'string' then
            str = str .. "'" .. f .. "'"
        elseif type (f) == 'number' then
            str = str .. tostring(f)
        elseif type (f) == 'table' or type (f) == 'cdata' then
            str = str .. anything_to_string(f)
        else
            str = str .. '?'
        end
    end
    str = str .. ']'
    return str
end;
---
...
function things_equal(var1, var2)
    local type1 = type(var1) == 'cdata' and 'table' or type(var1)
    local type2 = type(var2) == 'cdata' and 'table' or type(var2)
    if type1 ~= type2 then
        return false
    end
    if type1 ~= 'table' then
        return var1 == var2
    end
    for k,v in pairs(var1) do
        if not things_equal(v, var2[k]) then
            return false
        end
    end
    for k,v in pairs(var2) do
        if not things_equal(v, var1[k]) then
            return false
        end
    end
    return true
end;
---
...
function copy_thing(t)
    if type(t) ~= 'table' then
        return t
    end
    local res = {}
    for k,v in pairs(t) do
        res[copy_thing(k)] = copy_thing(v)
    end
    return res
end;
---
...
function test(key_tuple, ops, expect)
    box.space.s:upsert(key_tuple, ops)
    if (things_equal(box.space.s:select{}, expect)) then
        return 'upsert('.. anything_to_string(key_tuple) .. ', ' ..
                anything_to_string(ops) .. ', '  ..
                ') OK ' .. anything_to_string(box.space.s:select{})
    end
    return 'upsert('.. anything_to_string(key_tuple) .. ', ' ..
            anything_to_string(ops) .. ', ' ..
            ') FAILED, got ' .. anything_to_string(box.space.s:select{}) ..
            ' expected ' .. anything_to_string(expect)
end;
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
-- https://github.com/tarantool/tarantool/issues/1671
-- test upserts without triggers
-- test case with one index
space = box.schema.space.create('test', { engine = engine })
---
...
index1 = space:create_index('primary', { parts = {1, 'string'} })
---
...
space:upsert({1}, {{'!', 2, 100}}) -- must fail on checking tuple
---
- error: 'Tuple field 1 type does not match one required by operation: expected string,
    got unsigned'
...
space:upsert({'a'}, {{'a', 2, 100}}) -- must fail on checking ops
---
- error: 'Unknown UPDATE operation #1: "a"'
...
space:upsert({'a'}, {{'!', 2, 'ups1'}}) -- 'fast' upsert via insert in one index
---
...
space:upsert({'a', 'b'}, {{'!', 2, 'ups2'}}) -- 'fast' upsert via update in one index
---
...
space:select{}
---
- - ['a', 'ups2']
...
space:drop()
---
...
-- tests on multiple indexes
space = box.schema.space.create('test', { engine = engine })
---
...
index1 = space:create_index('primary', { parts = {1, 'string'} })
---
...
index2 = space:create_index('secondary', { parts = {2, 'scalar', 3, 'unsigned'} })
---
...
-- test upsert that executes as insert in all indexes
space:upsert({'a', 100, 100}, {{'!', 4, 200}})
---
...
space:upsert({'b', 100, 200}, {{'!', 4, 300}})
---
...
space:upsert({'c', 100, 300}, {{'!', 4, 400}})
---
...
index1:select{}
---
- - ['a', 100, 100]
  - ['b', 100, 200]
  - ['c', 100, 300]
...
index2:select{}
---
- - ['a', 100, 100]
  - ['b', 100, 200]
  - ['c', 100, 300]
...
-- test upsert that executes as update
space:upsert({'a', 100, 100}, {{'=', 3, -200}}) -- must fail on cheking new tuple in secondary index
---
- error: 'Tuple field 3 type does not match one required by operation: expected unsigned,
    got integer'
...
space:upsert({'b', 100, 200}, {{'=', 1, 'd'}}) -- must fail with attempt to modify primary index
---
...
index1:select{}
---
- - ['a', 100, 100]
  - ['b', 100, 200]
  - ['c', 100, 300]
...
index2:select{}
---
- - ['a', 100, 100]
  - ['b', 100, 200]
  - ['c', 100, 300]
...
space:drop()
---
...
-- https://github.com/tarantool/tarantool/issues/1854
space = box.schema.space.create('test', { engine = engine })
---
...
index = space:create_index('primary', { type = 'tree', parts = {1, 'unsigned'} })
---
...
space:insert({1, 1, 1})
---
- [1, 1, 1]
...
space:insert({2, 2, 2})
---
- [2, 2, 2]
...
space:insert({3, 3, 3})
---
- [3, 3, 3]
...
space:select{}
---
- - [1, 1, 1]
  - [2, 2, 2]
  - [3, 3, 3]
...
space:upsert({2, 18, 76}, {})
---
...
space:upsert({4, 4, 4}, {})
---
...
space:select{}
---
- - [1, 1, 1]
  - [2, 2, 2]
  - [3, 3, 3]
  - [4, 4, 4]
...
space:drop()
---
...
s = box.schema.space.create('s', { engine = engine })
---
...
index1 = s:create_index('i1')
---
...
index2 = s:create_index('i2', { parts = {2, 'string'}, unique = false })
---
...
t = {1, '1', 1, 'qwerty'}
---
...
s:insert(t)
---
- [1, '1', 1, 'qwerty']
...
-- all good operations, one op, equivalent to update
test(t, {{'+', 3, 5}}, {{1, '1', 6, 'qwerty'}})
---
- upsert([1,'1',1,'qwerty'], [['+',3,5]], ) OK [[1,'1',6,'qwerty']]
...
test(t, {{'-', 3, 3}}, {{1, '1', 3, 'qwerty'}})
---
- upsert([1,'1',1,'qwerty'], [['-',3,3]], ) OK [[1,'1',3,'qwerty']]
...
test(t, {{'&', 3, 5}}, {{1, '1', 1, 'qwerty'}})
---
- upsert([1,'1',1,'qwerty'], [['&',3,5]], ) OK [[1,'1',1,'qwerty']]
...
test(t, {{'|', 3, 8}}, {{1, '1', 9, 'qwerty'}})
---
- upsert([1,'1',1,'qwerty'], [['|',3,8]], ) OK [[1,'1',9,'qwerty']]
...
test(t, {{'^', 3, 12}}, {{1, '1', 5, 'qwerty'}})
---
- upsert([1,'1',1,'qwerty'], [['^',3,12]], ) OK [[1,'1',5,'qwerty']]
...
test(t, {{':', 4, 2, 4, "uer"}}, {{1, '1', 5, 'query'}})
---
- upsert([1,'1',1,'qwerty'], [[':',4,2,4,'uer']], ) OK [[1,'1',5,'query']]
...
test(t, {{'!', 4, 'answer'}}, {{1, '1', 5, 'answer', 'query'}})
---
- upsert([1,'1',1,'qwerty'], [['!',4,'answer']], ) OK [[1,'1',5,'answer','query']]
...
test(t, {{'#', 5, 1}}, {{1, '1', 5, 'answer'}})
---
- upsert([1,'1',1,'qwerty'], [['#',5,1]], ) OK [[1,'1',5,'answer']]
...
test(t, {{'!', -1, 1}}, {{1, '1', 5, 'answer', 1}})
---
- upsert([1,'1',1,'qwerty'], [['!',-1,1]], ) OK [[1,'1',5,'answer',1]]
...
test(t, {{'!', -1, 2}}, {{1, '1', 5, 'answer', 1, 2}})
---
- upsert([1,'1',1,'qwerty'], [['!',-1,2]], ) OK [[1,'1',5,'answer',1,2]]
...
test(t, {{'!', -1, 3}}, {{1, '1', 5, 'answer', 1, 2 ,3}})
---
- upsert([1,'1',1,'qwerty'], [['!',-1,3]], ) OK [[1,'1',5,'answer',1,2,3]]
...
test(t, {{'#', 5, 100500}}, {{1, '1', 5, 'answer'}})
---
- upsert([1,'1',1,'qwerty'], [['#',5,100500]], ) OK [[1,'1',5,'answer']]
...
test(t, {{'=', 4, 'qwerty'}}, {{1, '1', 5, 'qwerty'}})
---
- upsert([1,'1',1,'qwerty'], [['=',4,'qwerty']], ) OK [[1,'1',5,'qwerty']]
...
-- same check for negative posistion
test(t, {{'+', -2, 5}}, {{1, '1', 10, 'qwerty'}})
---
- upsert([1,'1',1,'qwerty'], [['+',-2,5]], ) OK [[1,'1',10,'qwerty']]
...
test(t, {{'-', -2, 3}}, {{1, '1', 7, 'qwerty'}})
---
- upsert([1,'1',1,'qwerty'], [['-',-2,3]], ) OK [[1,'1',7,'qwerty']]
...
test(t, {{'&', -2, 5}}, {{1, '1', 5, 'qwerty'}})
---
- upsert([1,'1',1,'qwerty'], [['&',-2,5]], ) OK [[1,'1',5,'qwerty']]
...
test(t, {{'|', -2, 8}}, {{1, '1', 13, 'qwerty'}})
---
- upsert([1,'1',1,'qwerty'], [['|',-2,8]], ) OK [[1,'1',13,'qwerty']]
...
test(t, {{'^', -2, 12}}, {{1, '1', 1, 'qwerty'}})
---
- upsert([1,'1',1,'qwerty'], [['^',-2,12]], ) OK [[1,'1',1,'qwerty']]
...
test(t, {{':', -1, 2, 4, "uer"}}, {{1, '1', 1, 'query'}})
---
- upsert([1,'1',1,'qwerty'], [[':',-1,2,4,'uer']], ) OK [[1,'1',1,'query']]
...
test(t, {{'!', -2, 'answer'}}, {{1, '1', 1, 'answer', 'query'}})
---
- upsert([1,'1',1,'qwerty'], [['!',-2,'answer']], ) OK [[1,'1',1,'answer','query']]
...
test(t, {{'#', -1, 1}}, {{1, '1', 1, 'answer'}})
---
- upsert([1,'1',1,'qwerty'], [['#',-1,1]], ) OK [[1,'1',1,'answer']]
...
test(t, {{'=', -1, 'answer!'}}, {{1, '1', 1, 'answer!'}})
---
- upsert([1,'1',1,'qwerty'], [['=',-1,'answer!']], ) OK [[1,'1',1,'answer!']]
...
-- selective test for good multiple ops
test(t, {{'+', 3, 2}, {'!', 4, 42}}, {{1, '1', 3, 42, 'answer!'}})
---
- upsert([1,'1',1,'qwerty'], [['+',3,2],['!',4,42]], ) OK [[1,'1',3,42,'answer!']]
...
test(t, {{'!', 1, 666}, {'#', 1, 1}, {'+', 3, 2}}, {{1, '1', 5, 42, 'answer!'}})
---
- upsert([1,'1',1,'qwerty'], [['!',1,666],['#',1,1],['+',3,2]], ) OK [[1,'1',5,42,'answer!']]
...
test(t, {{'!', 3, 43}, {'+', 4, 2}}, {{1, '1', 43, 7, 42, 'answer!'}})
---
- upsert([1,'1',1,'qwerty'], [['!',3,43],['+',4,2]], ) OK [[1,'1',43,7,42,'answer!']]
...
test(t, {{'#', 3, 2}, {'=', 3, 1}, {'=', 4, '1'}}, {{1, '1', 1, '1'}})
---
- upsert([1,'1',1,'qwerty'], [['#',3,2],['=',3,1],['=',4,'1']], ) OK [[1,'1',1,'1']]
...
-- all bad operations, one op, equivalent to update but error is supressed
test(t, {{'+', 4, 3}}, {{1, '1', 1, '1'}})
---
- upsert([1,'1',1,'qwerty'], [['+',4,3]], ) OK [[1,'1',1,'1']]
...
test(t, {{'-', 4, 3}}, {{1, '1', 1, '1'}})
---
- upsert([1,'1',1,'qwerty'], [['-',4,3]], ) OK [[1,'1',1,'1']]
...
test(t, {{'&', 4, 1}}, {{1, '1', 1, '1'}})
---
- upsert([1,'1',1,'qwerty'], [['&',4,1]], ) OK [[1,'1',1,'1']]
...
test(t, {{'|', 4, 1}}, {{1, '1', 1, '1'}})
---
- upsert([1,'1',1,'qwerty'], [['|',4,1]], ) OK [[1,'1',1,'1']]
...
test(t, {{'^', 4, 1}}, {{1, '1', 1, '1'}})
---
- upsert([1,'1',1,'qwerty'], [['^',4,1]], ) OK [[1,'1',1,'1']]
...
test(t, {{':', 3, 2, 4, "uer"}}, {{1, '1', 1, '1'}})
---
- upsert([1,'1',1,'qwerty'], [[':',3,2,4,'uer']], ) OK [[1,'1',1,'1']]
...
test(t, {{'#', 18, 1}}, {{1, '1', 1, '1'}})
---
- upsert([1,'1',1,'qwerty'], [['#',18,1]], ) OK [[1,'1',1,'1']]
...
-- selective test for good/bad multiple ops mix
test(t, {{'+', 3, 1}, {'+', 4, 1}}, {{1, '1', 2, '1'}})
---
- upsert([1,'1',1,'qwerty'], [['+',3,1],['+',4,1]], ) OK [[1,'1',2,'1']]
...
test(t, {{'-', 4, 1}, {'-', 3, 1}}, {{1, '1', 1, '1'}})
---
- upsert([1,'1',1,'qwerty'], [['-',4,1],['-',3,1]], ) OK [[1,'1',1,'1']]
...
test(t, {{'#', 18, 1}, {'|', 3, 14}}, {{1, '1', 15, '1'}})
---
- upsert([1,'1',1,'qwerty'], [['#',18,1],['|',3,14]], ) OK [[1,'1',15,'1']]
...
test(t, {{'^', 42, 42}, {':', 1, 1, 1, ''}, {'^', 3, 8}}, {{1, '1', 7, '1'}})
---
- upsert([1,'1',1,'qwerty'], [['^',42,42],[':',1,1,1,''],['^',3,8]], ) OK [[1,'1',7,'1']]
...
test(t, {{'&', 3, 1}, {'&', 2, 1}, {'&', 4, 1}}, {{1, '1', 1, '1'}})
---
- upsert([1,'1',1,'qwerty'], [['&',3,1],['&',2,1],['&',4,1]], ) OK [[1,'1',1,'1']]
...
-- broken ops must raise an exception and discarded
'dump ' .. anything_to_string(box.space.s:select{})
---
- dump [[1,'1',1,'1']]
...
test(t, {{'&', 'a', 3}, {'+', 3, 3}}, {{1, '1', 1, '1'}})
---
- error: Field 'a' was not found in the tuple
...
test(t, {{'+', 3, 3}, {'&', 3, 'a'}}, {{1, '1', 1, '1'}})
---
- error: 'Argument type in operation ''&'' on field 3 does not match field type: expected
    a positive integer'
...
test(t, {{'+', 3}, {'&', 3, 'a'}}, {{1, '1', 1, '1'}})
---
- error: 'Unknown UPDATE operation #1: wrong number of arguments, expected 3, got
    2'
...
test(t, {{':', 3, 3}}, {{1, '1', 1, '1'}})
---
- error: 'Unknown UPDATE operation #1: wrong number of arguments, expected 5, got
    3'
...
test(t, {{':', 3, 3, 3}}, {{1, '1', 1, '1'}})
---
- error: 'Unknown UPDATE operation #1: wrong number of arguments, expected 5, got
    4'
...
test(t, {{'?', 3, 3}}, {{1, '1', 1, '1'}})
---
- error: 'Unknown UPDATE operation #1: "?"'
...
'dump ' .. anything_to_string(box.space.s:select{})
---
- dump [[1,'1',1,'1']]
...
-- ignoring ops for insert upsert
test({2, '2', 2, '2'}, {{}}, {{1, '1', 1, '1'}})
---
- error: update operation must be an array {op,..}, got empty array
...
test({3, '3', 3, '3'}, {{'+', 3, 3}}, {{1, '1', 1, '1'}, {3, '3', 3, '3'}})
---
- upsert([3,'3',3,'3'], [['+',3,3]], ) OK [[1,'1',1,'1'],[3,'3',3,'3']]
...
-- adding random ops
t[1] = 1
---
...
test(t, {{'+', 3, 3}, {'+', 4, 3}}, {{1, '1', 4, '1'}, {3, '3', 3, '3'}})
---
- upsert([1,'1',1,'qwerty'], [['+',3,3],['+',4,3]], ) OK [[1,'1',4,'1'],[3,'3',3,'3']]
...
t[1] = 2
---
...
test(t, {{'-', 4, 1}}, {{1, '1', 4, '1'}, {2, '1', 1, 'qwerty'}, {3, '3', 3, '3'}})
---
- upsert([2,'1',1,'qwerty'], [['-',4,1]], ) OK [[1,'1',4,'1'],[2,'1',1,'qwerty'],[3,'3',3,'3']]
...
t[1] = 3
---
...
test(t, {{':', 3, 3, 3, ''}, {'|', 3, 4}}, {{1, '1', 4, '1'}, {2, '1', 1, 'qwerty'}, {3, '3', 7, '3'}})
---
- upsert([3,'1',1,'qwerty'], [[':',3,3,3,''],['|',3,4]], ) OK [[1,'1',4,'1'],[2,'1',1,'qwerty'],[3,'3',7,'3']]
...
'dump ' .. anything_to_string(box.space.s:select{}) -- (1)
---
- dump [[1,'1',4,'1'],[2,'1',1,'qwerty'],[3,'3',7,'3']]
...
test_run:cmd("restart server default")
test_run = require('test_run').new()
---
...
engine = test_run:get_cfg('engine')
---
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
function anything_to_string(tab)
    if tab == nil then
        return 'nil'
    end
    local str = '['
    local first_route = true
    local t = 0
    for k,f in pairs(tab) do
        if not first_route then str = str .. ',' end
        first_route = false
        t = t + 1
        if k ~= t then
            str = str .. k .. '='
        end
        if type(f) == 'string' then
            str = str .. "'" .. f .. "'"
        elseif type (f) == 'number' then
            str = str .. tostring(f)
        elseif type (f) == 'table' or type (f) == 'cdata' then
            str = str .. anything_to_string(f)
        else
            str = str .. '?'
        end
    end
    str = str .. ']'
    return str
end;
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
s = box.space.s
---
...
'dump ' .. anything_to_string(box.space.s:select{})-- compare with (1) visually!
---
- dump [[1,'1',4,'1'],[2,'1',1,'qwerty'],[3,'3',7,'3']]
...
box.space.s:drop()
---
...
--
-- gh-2104: vinyl: assert in tuple_upsert_squash
--
s = box.schema.space.create('test', {engine = engine})
---
...
i = s:create_index('test')
---
...
s:replace({1, 1, 1})
---
- [1, 1, 1]
...
box.snapshot()
---
- ok
...
s:upsert({1, 1}, {{'+', 2, 2}})
---
...
s:upsert({1, 1}, {{'+', 3, 4}})
---
...
s:select()
---
- - [1, 3, 5]
...
s:drop()
---
...
--
-- gh-2259: space:upsert() crashes in absence of indices
--
s = box.schema.space.create('test', {engine = engine})
---
...
s:upsert({1}, {})
---
- error: 'No index #0 is defined in space ''test'''
...
s:drop()
---
...
--
-- gh-2461 - segfault on sparse or unordered keys.
--
s = box.schema.space.create('test', {engine = engine})
---
...
pk = s:create_index('pk', {parts = {1, 'unsigned', 3, 'unsigned'}})
---
...
s:upsert({100, 100, 100}, {{'+', 2, 200}})
---
...
s:upsert({200, 100, 200}, {{'+', 2, 300}})
---
...
s:upsert({300, 100, 300}, {{'+', 2, 400}})
---
...
pk:select{}
---
- - [100, 100, 100]
  - [200, 100, 200]
  - [300, 100, 300]
...
s:drop()
---
...
-- test for non-spased and non-sequential index
s = box.schema.space.create('test', {engine = engine})
---
...
pk = s:create_index('pk', {parts = {2, 'unsigned', 3, 'unsigned'}})
---
...
s:upsert({100, 100, 100}, {{'+', 1, 200}})
---
...
s:upsert({200, 100, 200}, {{'+', 1, 300}})
---
...
s:upsert({300, 100, 300}, {{'+', 1, 400}})
---
...
pk:select{}
---
- - [100, 100, 100]
  - [200, 100, 200]
  - [300, 100, 300]
...
s:drop()
---
...
s = box.schema.space.create('test', {engine = engine})
---
...
pk = s:create_index('pk', {parts = {3, 'unsigned', 2, 'unsigned'}})
---
...
s:upsert({100, 100, 100}, {{'+', 1, 200}})
---
...
s:upsert({200, 100, 200}, {{'+', 1, 300}})
---
...
s:upsert({300, 100, 300}, {{'+', 1, 400}})
---
...
pk:select{}
---
- - [100, 100, 100]
  - [200, 100, 200]
  - [300, 100, 300]
...
s:drop()
---
...
s = box.schema.space.create('test', {engine = engine})
---
...
pk = s:create_index('pk', {parts = {1, 'unsigned'}})
---
...
sec = s:create_index('sec', {parts = {4, 'unsigned', 2, 'unsigned', 3, 'unsigned'}})
---
...
s:replace{1, 301, 300, 300}
---
- [1, 301, 300, 300]
...
sec:select{}
---
- - [1, 301, 300, 300]
...
s:upsert({1, 301, 300, 300}, {{'+', 2, 1}, {'+', 3, 1}, {'+', 4, 1}})
---
...
sec:select{}
---
- - [1, 302, 301, 301]
...
s:upsert({1, 302, 301, 301}, {{'+', 2, 1}, {'+', 3, 1}, {'+', 4, 1}})
---
...
sec:select{}
---
- - [1, 303, 302, 302]
...
s:upsert({2, 203, 200, 200}, {{'+', 2, 1}, {'+', 3, 1}, {'+', 4, 1}})
---
...
sec:select{}
---
- - [2, 203, 200, 200]
  - [1, 303, 302, 302]
...
s:replace{3, 302, 50, 100}
---
- [3, 302, 50, 100]
...
sec:select{}
---
- - [3, 302, 50, 100]
  - [2, 203, 200, 200]
  - [1, 303, 302, 302]
...
sec:get{100, 302, 50}
---
- [3, 302, 50, 100]
...
sec:get{200, 203, 200}
---
- [2, 203, 200, 200]
...
sec:get{302, 303, 302}
---
- [1, 303, 302, 302]
...
s:drop()
---
...
