test_run = require('test_run').new()
---
...
engine = test_run:get_cfg('engine')
---
...
--
-- gh-1012: Indexes for JSON-defined paths.
--
s = box.schema.space.create('withdata', {engine = engine})
---
...
-- Test build field tree conflicts.
s:create_index('test1', {parts = {{2, 'number'}, {3, 'str', path = 'FIO["fname"]'}, {3, 'str', path = '["FIO"].fname'}}})
---
- error: 'Can''t create or modify index ''test1'' in space ''withdata'': same key
    part is indexed twice'
...
s:create_index('test1', {parts = {{2, 'number'}, {3, 'str', path = 666}, {3, 'str', path = '["FIO"]["fname"]'}}})
---
- error: 'Wrong index part 2: ''path'' must be string'
...
s:create_index('test1', {parts = {{2, 'number'}, {3, 'map', path = 'FIO'}}})
---
- error: 'Can''t create or modify index ''test1'' in space ''withdata'': field type
    ''map'' is not supported'
...
s:create_index('test1', {parts = {{2, 'number'}, {3, 'array', path = '[1]'}}})
---
- error: 'Can''t create or modify index ''test1'' in space ''withdata'': field type
    ''array'' is not supported'
...
s:create_index('test1', {parts = {{2, 'number'}, {3, 'str', path = 'FIO'}, {3, 'str', path = 'FIO.fname'}}})
---
- error: Field [3]["FIO"] has type 'string' in one index, but type 'map' in another
...
s:create_index('test1', {parts = {{2, 'number'}, {3, 'str', path = '[1].sname'}, {3, 'str', path = '["FIO"].fname'}}})
---
- error: Field 3 has type 'array' in one index, but type 'map' in another
...
s:create_index('test1', {parts = {{2, 'number'}, {3, 'str', path = 'FIO....fname'}}})
---
- error: 'Wrong index part 2: invalid path'
...
idx = s:create_index('test1', {parts = {{2, 'number'}, {3, 'str', path = 'FIO.fname', is_nullable = false}, {3, 'str', path = '["FIO"]["sname"]'}}})
---
...
idx ~= nil
---
- true
...
idx.parts[2].path == 'FIO.fname'
---
- true
...
-- Test format mismatch.
format = {{'id', 'unsigned'}, {'meta', 'unsigned'}, {'data', 'array'}, {'age', 'unsigned'}, {'level', 'unsigned'}}
---
...
s:format(format)
---
- error: Field 3 (data) has type 'array' in one index, but type 'map' in another
...
format = {{'id', 'unsigned'}, {'meta', 'unsigned'}, {'data', 'map'}, {'age', 'unsigned'}, {'level', 'unsigned'}}
---
...
s:format(format)
---
...
s:create_index('test2', {parts = {{2, 'number'}, {3, 'number', path = 'FIO.fname'}, {3, 'str', path = '["FIO"]["sname"]'}}})
---
- error: Field [3]["FIO"]["fname"] has type 'string' in one index, but type 'number'
    in another
...
-- Test incompatable tuple insertion.
s:insert{7, 7, {town = 'London', FIO = 666}, 4, 5}
---
- error: 'Tuple field [3]["FIO"] type does not match one required by operation: expected
    map, got unsigned'
...
s:insert{7, 7, {town = 'London', FIO = {fname = 666, sname = 'Bond'}}, 4, 5}
---
- error: 'Tuple field [3]["FIO"]["fname"] type does not match one required by operation:
    expected string, got unsigned'
...
s:insert{7, 7, {town = 'London', FIO = {fname = "James"}}, 4, 5}
---
- error: Tuple field [3]["FIO"]["sname"] required by space format is missing
...
s:insert{7, 7, {town = 'London', FIO = {fname = 'James', sname = 'Bond'}}, 4, 5}
---
- [7, 7, {'town': 'London', 'FIO': {'fname': 'James', 'sname': 'Bond'}}, 4, 5]
...
s:insert{7, 7, {town = 'London', FIO = {fname = 'James', sname = 'Bond'}}, 4, 5}
---
- error: 'Duplicate key exists in unique index "test1" in space "withdata" with old
    tuple - [7, 7, {"town": "London", "FIO": {"sname": "Bond", "fname": "James"}},
    4, 5] and new tuple - [7, 7, {"town": "London", "FIO": {"sname": "Bond", "fname":
    "James"}}, 4, 5]'
...
s:insert{7, 7, {town = 'London', FIO = {fname = 'James', sname = 'Bond', data = "extra"}}, 4, 5}
---
- error: 'Duplicate key exists in unique index "test1" in space "withdata" with old
    tuple - [7, 7, {"town": "London", "FIO": {"sname": "Bond", "fname": "James"}},
    4, 5] and new tuple - [7, 7, {"town": "London", "FIO": {"fname": "James", "data":
    "extra", "sname": "Bond"}}, 4, 5]'
...
s:insert{7, 7, {town = 'Moscow', FIO = {fname = 'Max', sname = 'Isaev', data = "extra"}}, 4, 5}
---
- [7, 7, {'town': 'Moscow', 'FIO': {'fname': 'Max', 'data': 'extra', 'sname': 'Isaev'}},
  4, 5]
...
idx:select()
---
- - [7, 7, {'town': 'London', 'FIO': {'fname': 'James', 'sname': 'Bond'}}, 4, 5]
  - [7, 7, {'town': 'Moscow', 'FIO': {'fname': 'Max', 'data': 'extra', 'sname': 'Isaev'}},
    4, 5]
...
idx:min()
---
- [7, 7, {'town': 'London', 'FIO': {'fname': 'James', 'sname': 'Bond'}}, 4, 5]
...
idx:max()
---
- [7, 7, {'town': 'Moscow', 'FIO': {'fname': 'Max', 'data': 'extra', 'sname': 'Isaev'}},
  4, 5]
...
s:drop()
---
...
-- Test user-friendly index creation interface.
s = box.schema.space.create('withdata', {engine = engine})
---
...
format = {{'data', 'map'}, {'meta', 'str'}}
---
...
s:format(format)
---
...
s:create_index('pk_invalid', {parts = {{']sad.FIO["sname"]', 'str'}}})
---
- error: 'Illegal parameters, options.parts[1]: field was not found by name '']sad.FIO["sname"]'''
...
s:create_index('pk_unexistent', {parts = {{'unexistent.FIO["sname"]', 'str'}}})
---
- error: 'Illegal parameters, options.parts[1]: field was not found by name ''unexistent.FIO["sname"]'''
...
pk = s:create_index('pk', {parts = {{'data.FIO["sname"]', 'str'}}})
---
...
pk ~= nil
---
- true
...
sk2 = s:create_index('sk2', {parts = {{'["data"].FIO["sname"]', 'str'}}})
---
...
sk2 ~= nil
---
- true
...
sk3 = s:create_index('sk3', {parts = {{'[\'data\'].FIO["sname"]', 'str'}}})
---
...
sk3 ~= nil
---
- true
...
sk4 = s:create_index('sk4', {parts = {{'[1].FIO["sname"]', 'str'}}})
---
...
sk4 ~= nil
---
- true
...
pk.fieldno == sk2.fieldno
---
- true
...
sk2.fieldno == sk3.fieldno
---
- true
...
sk3.fieldno == sk4.fieldno
---
- true
...
pk.path == sk2.path
---
- true
...
sk2.path == sk3.path
---
- true
...
sk3.path == sk4.path
---
- true
...
s:insert{{town = 'London', FIO = {fname = 'James', sname = 'Bond'}}, "mi6"}
---
- [{'town': 'London', 'FIO': {'fname': 'James', 'sname': 'Bond'}}, 'mi6']
...
s:insert{{town = 'Moscow', FIO = {fname = 'Max', sname = 'Isaev', data = "extra"}}, "test"}
---
- [{'town': 'Moscow', 'FIO': {'fname': 'Max', 'data': 'extra', 'sname': 'Isaev'}},
  'test']
...
pk:get({'Bond'}) == sk2:get({'Bond'})
---
- true
...
sk2:get({'Bond'}) == sk3:get({'Bond'})
---
- true
...
sk3:get({'Bond'}) == sk4:get({'Bond'})
---
- true
...
s:drop()
---
...
-- Test upsert of JSON-indexed data.
s = box.schema.create_space('withdata', {engine = engine})
---
...
parts = {}
---
...
parts[1] = {1, 'unsigned', path='[2]'}
---
...
pk = s:create_index('pk', {parts = parts})
---
...
s:insert{{1, 2}, 3}
---
- [[1, 2], 3]
...
s:upsert({{box.null, 2}}, {{'+', 2, 5}})
---
...
s:get(2)
---
- [[1, 2], 8]
...
s:drop()
---
...
-- Test index creation on space with data.
s = box.schema.space.create('withdata', {engine = engine})
---
...
pk = s:create_index('primary', { type = 'tree', parts = {{2, 'number'}} })
---
...
s:insert{1, 1, 7, {town = 'London', FIO = 1234}, 4, 5}
---
- [1, 1, 7, {'town': 'London', 'FIO': 1234}, 4, 5]
...
s:insert{2, 2, 7, {town = 'London', FIO = {fname = 'James', sname = 'Bond'}}, 4, 5}
---
- [2, 2, 7, {'town': 'London', 'FIO': {'fname': 'James', 'sname': 'Bond'}}, 4, 5]
...
s:insert{3, 3, 7, {town = 'London', FIO = {fname = 'James', sname = 'Bond'}}, 4, 5}
---
- [3, 3, 7, {'town': 'London', 'FIO': {'fname': 'James', 'sname': 'Bond'}}, 4, 5]
...
s:insert{4, 4, 7, {town = 'London', FIO = {1,2,3}}, 4, 5}
---
- [4, 4, 7, {'town': 'London', 'FIO': [1, 2, 3]}, 4, 5]
...
s:create_index('test1', {parts = {{3, 'number'}, {4, 'str', path = '["FIO"]["fname"]'}, {4, 'str', path = '["FIO"]["sname"]'}}})
---
- error: 'Tuple field [4]["FIO"] type does not match one required by operation: expected
    map, got unsigned'
...
_ = s:delete(1)
---
...
s:create_index('test1', {parts = {{3, 'number'}, {4, 'str', path = '["FIO"]["fname"]'}, {4, 'str', path = '["FIO"]["sname"]'}}})
---
- error: 'Duplicate key exists in unique index "test1" in space "withdata" with old
    tuple - [2, 2, 7, {"town": "London", "FIO": {"sname": "Bond", "fname": "James"}},
    4, 5] and new tuple - [3, 3, 7, {"town": "London", "FIO": {"sname": "Bond", "fname":
    "James"}}, 4, 5]'
...
_ = s:delete(2)
---
...
s:create_index('test1', {parts = {{3, 'number'}, {4, 'str', path = '["FIO"]["fname"]'}, {4, 'str', path = '["FIO"]["sname"]'}}})
---
- error: 'Tuple field [4]["FIO"] type does not match one required by operation: expected
    map, got array'
...
_ = s:delete(4)
---
...
idx = s:create_index('test1', {parts = {{3, 'number'}, {4, 'str', path = '["FIO"]["fname"]', is_nullable = true}, {4, 'str', path = '["FIO"]["sname"]'}, {4, 'str', path = '["FIO"]["extra"]', is_nullable = true}}})
---
...
idx ~= nil
---
- true
...
s:create_index('test2', {parts = {{3, 'number'}, {4, 'number', path = '["FIO"]["fname"]'}}})
---
- error: Field [4]["FIO"]["fname"] has type 'string' in one index, but type 'number'
    in another
...
idx2 = s:create_index('test2', {parts = {{3, 'number'}, {4, 'str', path = '["FIO"]["fname"]'}}})
---
...
idx2 ~= nil
---
- true
...
t = s:insert{5, 5, 7, {town = 'Matrix', FIO = {fname = 'Agent', sname = 'Smith'}}, 4, 5}
---
...
idx:select()
---
- - [5, 5, 7, {'town': 'Matrix', 'FIO': {'fname': 'Agent', 'sname': 'Smith'}}, 4,
    5]
  - [3, 3, 7, {'town': 'London', 'FIO': {'fname': 'James', 'sname': 'Bond'}}, 4, 5]
...
idx:min()
---
- [5, 5, 7, {'town': 'Matrix', 'FIO': {'fname': 'Agent', 'sname': 'Smith'}}, 4, 5]
...
idx:max()
---
- [3, 3, 7, {'town': 'London', 'FIO': {'fname': 'James', 'sname': 'Bond'}}, 4, 5]
...
idx:drop()
---
...
s:drop()
---
...
-- Test complex JSON indexes with nullable fields.
s = box.schema.space.create('withdata', {engine = engine})
---
...
parts = {}
---
...
parts[1] = {1, 'str', path='[3][2].a'}
---
...
parts[2] = {1, 'unsigned', path = '[3][1]'}
---
...
parts[3] = {2, 'str', path = '[2].d[1]'}
---
...
pk = s:create_index('primary', { type = 'tree', parts =  parts})
---
...
s:insert{{1, 2, {3, {3, a = 'str', b = 5}}}, {'c', {d = {'e', 'f'}, e = 'g'}}, 6, {1, 2, 3}}
---
- [[1, 2, [3, {1: 3, 'a': 'str', 'b': 5}]], ['c', {'d': ['e', 'f'], 'e': 'g'}], 6,
  [1, 2, 3]]
...
s:insert{{1, 2, {3, {a = 'str', b = 1}}}, {'c', {d = {'e', 'f'}, e = 'g'}}, 6}
---
- error: 'Duplicate key exists in unique index "primary" in space "withdata" with
    old tuple - [[1, 2, [3, {1: 3, "a": "str", "b": 5}]], ["c", {"d": ["e", "f"],
    "e": "g"}], 6, [1, 2, 3]] and new tuple - [[1, 2, [3, {"a": "str", "b": 1}]],
    ["c", {"d": ["e", "f"], "e": "g"}], 6]'
...
parts = {}
---
...
parts[1] = {4, 'unsigned', path='[1]', is_nullable = false}
---
...
parts[2] = {4, 'unsigned', path='[2]', is_nullable = true}
---
...
parts[3] = {4, 'unsigned', path='[4]', is_nullable = true}
---
...
trap_idx = s:create_index('trap', { type = 'tree', parts = parts})
---
...
s:insert{{1, 2, {3, {3, a = 'str2', b = 5}}}, {'c', {d = {'e', 'f'}, e = 'g'}}, 6, {}}
---
- error: Tuple field [4][1] required by space format is missing
...
parts = {}
---
...
parts[1] = {1, 'unsigned', path='[3][2].b' }
---
...
parts[2] = {3, 'unsigned'}
---
...
crosspart_idx = s:create_index('crosspart', { parts =  parts})
---
...
s:insert{{1, 2, {3, {a = 'str2', b = 2}}}, {'c', {d = {'e', 'f'}, e = 'g'}}, 6, {9, 2, 3}}
---
- [[1, 2, [3, {'a': 'str2', 'b': 2}]], ['c', {'d': ['e', 'f'], 'e': 'g'}], 6, [9,
    2, 3]]
...
parts = {}
---
...
parts[1] = {1, 'unsigned', path='[3][2].b'}
---
...
num_idx = s:create_index('numeric', {parts =  parts})
---
...
s:insert{{1, 2, {3, {a = 'str3', b = 9}}}, {'c', {d = {'e', 'f'}, e = 'g'}}, 6, {0}}
---
- [[1, 2, [3, {'a': 'str3', 'b': 9}]], ['c', {'d': ['e', 'f'], 'e': 'g'}], 6, [0]]
...
num_idx:get(2)
---
- [[1, 2, [3, {'a': 'str2', 'b': 2}]], ['c', {'d': ['e', 'f'], 'e': 'g'}], 6, [9,
    2, 3]]
...
num_idx:select()
---
- - [[1, 2, [3, {'a': 'str2', 'b': 2}]], ['c', {'d': ['e', 'f'], 'e': 'g'}], 6, [
      9, 2, 3]]
  - [[1, 2, [3, {1: 3, 'a': 'str', 'b': 5}]], ['c', {'d': ['e', 'f'], 'e': 'g'}],
    6, [1, 2, 3]]
  - [[1, 2, [3, {'a': 'str3', 'b': 9}]], ['c', {'d': ['e', 'f'], 'e': 'g'}], 6, [
      0]]
...
num_idx:max()
---
- [[1, 2, [3, {'a': 'str3', 'b': 9}]], ['c', {'d': ['e', 'f'], 'e': 'g'}], 6, [0]]
...
num_idx:min()
---
- [[1, 2, [3, {'a': 'str2', 'b': 2}]], ['c', {'d': ['e', 'f'], 'e': 'g'}], 6, [9,
    2, 3]]
...
crosspart_idx:max() == num_idx:max()
---
- true
...
crosspart_idx:min() == num_idx:min()
---
- true
...
trap_idx:max()
---
- [[1, 2, [3, {'a': 'str2', 'b': 2}]], ['c', {'d': ['e', 'f'], 'e': 'g'}], 6, [9,
    2, 3]]
...
trap_idx:min()
---
- [[1, 2, [3, {'a': 'str3', 'b': 9}]], ['c', {'d': ['e', 'f'], 'e': 'g'}], 6, [0]]
...
s:drop()
---
...
-- Test index alter.
s = box.schema.space.create('withdata', {engine = engine})
---
...
pk_simplified = s:create_index('primary', { type = 'tree',  parts = {{1, 'unsigned'}}})
---
...
pk_simplified.path == box.NULL
---
- true
...
idx = s:create_index('idx', {parts = {{2, 'integer', path = 'a'}}})
---
...
s:insert{31, {a = 1, aa = -1}}
---
- [31, {'a': 1, 'aa': -1}]
...
s:insert{22, {a = 2, aa = -2}}
---
- [22, {'a': 2, 'aa': -2}]
...
s:insert{13, {a = 3, aa = -3}}
---
- [13, {'a': 3, 'aa': -3}]
...
idx:select()
---
- - [31, {'a': 1, 'aa': -1}]
  - [22, {'a': 2, 'aa': -2}]
  - [13, {'a': 3, 'aa': -3}]
...
idx:alter({parts = {{2, 'integer', path = 'aa'}}})
---
...
idx:select()
---
- - [13, {'a': 3, 'aa': -3}]
  - [22, {'a': 2, 'aa': -2}]
  - [31, {'a': 1, 'aa': -1}]
...
s:drop()
---
...
-- Incompatible format change.
s = box.schema.space.create('withdata')
---
...
i = s:create_index('pk', {parts = {{1, 'integer', path = '[1]'}}})
---
...
s:insert{{-1}}
---
- [[-1]]
...
i:alter{parts = {{1, 'string', path = '[1]'}}}
---
- error: 'Tuple field [1][1] type does not match one required by operation: expected
    string, got integer'
...
s:insert{{'a'}}
---
- error: 'Tuple field [1][1] type does not match one required by operation: expected
    integer, got string'
...
i:drop()
---
...
i = s:create_index('pk', {parts = {{1, 'integer', path = '[1].FIO'}}})
---
...
s:insert{{{FIO=-1}}}
---
- [[{'FIO': -1}]]
...
i:alter{parts = {{1, 'integer', path = '[1][1]'}}}
---
- error: 'Tuple field [1][1] type does not match one required by operation: expected
    array, got map'
...
i:alter{parts = {{1, 'integer', path = '[1].FIO[1]'}}}
---
- error: 'Tuple field [1][1]["FIO"] type does not match one required by operation:
    expected array, got integer'
...
s:drop()
---
...
-- Test snapshotting and recovery.
s = box.schema.space.create('withdata', {engine = engine})
---
...
pk = s:create_index('pk', {parts = {{1, 'integer'}, {3, 'string', path = 'town'}}})
---
...
name = s:create_index('name', {parts = {{3, 'string', path = 'FIO.fname'}, {3, 'string', path = 'FIO.sname'}, {3, 'string', path = 'FIO.extra', is_nullable = true}}})
---
...
s:insert{1, 1, {town = 'Moscow', FIO = {fname = 'Max', sname = 'Isaev'}}}
---
- [1, 1, {'town': 'Moscow', 'FIO': {'fname': 'Max', 'sname': 'Isaev'}}]
...
s:insert{1, 777, {town = 'London', FIO = {fname = 'James', sname = 'Bond'}}}
---
- [1, 777, {'town': 'London', 'FIO': {'fname': 'James', 'sname': 'Bond'}}]
...
s:insert{1, 45, {town = 'Berlin', FIO = {fname = 'Richard', sname = 'Sorge'}}}
---
- [1, 45, {'town': 'Berlin', 'FIO': {'fname': 'Richard', 'sname': 'Sorge'}}]
...
s:insert{4, 45, {town = 'Berlin', FIO = {fname = 'Max', extra = 'Otto', sname = 'Stierlitz'}}}
---
- [4, 45, {'town': 'Berlin', 'FIO': {'fname': 'Max', 'extra': 'Otto', 'sname': 'Stierlitz'}}]
...
pk:select({1})
---
- - [1, 45, {'town': 'Berlin', 'FIO': {'fname': 'Richard', 'sname': 'Sorge'}}]
  - [1, 777, {'town': 'London', 'FIO': {'fname': 'James', 'sname': 'Bond'}}]
  - [1, 1, {'town': 'Moscow', 'FIO': {'fname': 'Max', 'sname': 'Isaev'}}]
...
pk:select({1, 'Berlin'})
---
- - [1, 45, {'town': 'Berlin', 'FIO': {'fname': 'Richard', 'sname': 'Sorge'}}]
...
name:select({})
---
- - [1, 777, {'town': 'London', 'FIO': {'fname': 'James', 'sname': 'Bond'}}]
  - [1, 1, {'town': 'Moscow', 'FIO': {'fname': 'Max', 'sname': 'Isaev'}}]
  - [4, 45, {'town': 'Berlin', 'FIO': {'fname': 'Max', 'extra': 'Otto', 'sname': 'Stierlitz'}}]
  - [1, 45, {'town': 'Berlin', 'FIO': {'fname': 'Richard', 'sname': 'Sorge'}}]
...
name:select({'Max'})
---
- - [1, 1, {'town': 'Moscow', 'FIO': {'fname': 'Max', 'sname': 'Isaev'}}]
  - [4, 45, {'town': 'Berlin', 'FIO': {'fname': 'Max', 'extra': 'Otto', 'sname': 'Stierlitz'}}]
...
name:get({'Max', 'Stierlitz', 'Otto'})
---
- [4, 45, {'town': 'Berlin', 'FIO': {'fname': 'Max', 'extra': 'Otto', 'sname': 'Stierlitz'}}]
...
box.snapshot()
---
- ok
...
test_run:cmd("restart server default")
engine = test_run:get_cfg('engine')
---
...
s = box.space["withdata"]
---
...
pk = s.index["pk"]
---
...
name = s.index["name"]
---
...
pk:select({1})
---
- - [1, 45, {'town': 'Berlin', 'FIO': {'fname': 'Richard', 'sname': 'Sorge'}}]
  - [1, 777, {'town': 'London', 'FIO': {'fname': 'James', 'sname': 'Bond'}}]
  - [1, 1, {'town': 'Moscow', 'FIO': {'fname': 'Max', 'sname': 'Isaev'}}]
...
pk:select({1, 'Berlin'})
---
- - [1, 45, {'town': 'Berlin', 'FIO': {'fname': 'Richard', 'sname': 'Sorge'}}]
...
name:select({})
---
- - [1, 777, {'town': 'London', 'FIO': {'fname': 'James', 'sname': 'Bond'}}]
  - [1, 1, {'town': 'Moscow', 'FIO': {'fname': 'Max', 'sname': 'Isaev'}}]
  - [4, 45, {'town': 'Berlin', 'FIO': {'fname': 'Max', 'extra': 'Otto', 'sname': 'Stierlitz'}}]
  - [1, 45, {'town': 'Berlin', 'FIO': {'fname': 'Richard', 'sname': 'Sorge'}}]
...
name:select({'Max'})
---
- - [1, 1, {'town': 'Moscow', 'FIO': {'fname': 'Max', 'sname': 'Isaev'}}]
  - [4, 45, {'town': 'Berlin', 'FIO': {'fname': 'Max', 'extra': 'Otto', 'sname': 'Stierlitz'}}]
...
name:get({'Max', 'Stierlitz', 'Otto'})
---
- [4, 45, {'town': 'Berlin', 'FIO': {'fname': 'Max', 'extra': 'Otto', 'sname': 'Stierlitz'}}]
...
s:replace{4, 45, {town = 'Berlin', FIO = {fname = 'Max', sname = 'Stierlitz'}}}
---
- [4, 45, {'town': 'Berlin', 'FIO': {'fname': 'Max', 'sname': 'Stierlitz'}}]
...
name:select({'Max', 'Stierlitz'})
---
- - [4, 45, {'town': 'Berlin', 'FIO': {'fname': 'Max', 'sname': 'Stierlitz'}}]
...
town = s:create_index('town', {unique = false, parts = {{3, 'string', path = 'town'}}})
---
...
town:select({'Berlin'})
---
- - [1, 45, {'town': 'Berlin', 'FIO': {'fname': 'Richard', 'sname': 'Sorge'}}]
  - [4, 45, {'town': 'Berlin', 'FIO': {'fname': 'Max', 'sname': 'Stierlitz'}}]
...
_ = s:delete({4, 'Berlin'})
---
...
town:select({'Berlin'})
---
- - [1, 45, {'town': 'Berlin', 'FIO': {'fname': 'Richard', 'sname': 'Sorge'}}]
...
s:update({1, 'Berlin'}, {{"+", 2, 45}})
---
- [1, 90, {'town': 'Berlin', 'FIO': {'fname': 'Richard', 'sname': 'Sorge'}}]
...
box.snapshot()
---
- ok
...
s:upsert({1, 90, {town = 'Berlin', FIO = {fname = 'X', sname = 'Y'}}}, {{'+', 2, 1}})
---
...
town:select()
---
- - [1, 91, {'town': 'Berlin', 'FIO': {'fname': 'Richard', 'sname': 'Sorge'}}]
  - [1, 777, {'town': 'London', 'FIO': {'fname': 'James', 'sname': 'Bond'}}]
  - [1, 1, {'town': 'Moscow', 'FIO': {'fname': 'Max', 'sname': 'Isaev'}}]
...
name:drop()
---
...
town:select()
---
- - [1, 91, {'town': 'Berlin', 'FIO': {'fname': 'Richard', 'sname': 'Sorge'}}]
  - [1, 777, {'town': 'London', 'FIO': {'fname': 'James', 'sname': 'Bond'}}]
  - [1, 1, {'town': 'Moscow', 'FIO': {'fname': 'Max', 'sname': 'Isaev'}}]
...
s:drop()
---
...
-- Check replace with tuple with map having numeric keys that
-- cannot be included in JSON index.
s = box.schema.space.create('withdata', {engine = engine})
---
...
pk = s:create_index('pk', {parts={{1, 'int'}}})
---
...
idx0 = s:create_index('idx0', {parts = {{2, 'str', path = 'name'}, {3, "str"}}})
---
...
s:insert({4, {"d", name='D'}, "test"})
---
- [4, {1: 'd', 'name': 'D'}, 'test']
...
s:replace({4, {"d1", name='D1'}, "test"})
---
- [4, {1: 'd1', 'name': 'D1'}, 'test']
...
idx0:drop()
---
...
s:truncate()
---
...
idx0 = s:create_index('idx2', {parts = {{3, 'str', path = '[1].fname'}, {3, 'str', path = '[1].sname'}}})
---
...
s:insert({5, {1, 1, 1}, {{fname='A', sname='B'}, {fname='C', sname='D'}, {fname='A', sname='B'}}})
---
- [5, [1, 1, 1], [{'fname': 'A', 'sname': 'B'}, {'fname': 'C', 'sname': 'D'}, {'fname': 'A',
      'sname': 'B'}]]
...
_ = s:delete(5)
---
...
s:drop()
---
...
-- Check that null isn't allowed in case array/map is expected
-- according to json document format.
s = box.schema.space.create('test', {engine = engine})
---
...
_ = s:create_index('pk')
---
...
_ = s:create_index('sk', {parts = {{'[2][1].a', 'unsigned'}}})
---
...
s:insert{1, box.NULL} -- error
---
- error: Tuple field [2][1]["a"] required by space format is missing
...
s:insert{2, {box.NULL}} -- error
---
- error: Tuple field [2][1]["a"] required by space format is missing
...
s:insert{3} -- error
---
- error: Tuple field [2][1]["a"] required by space format is missing
...
s:insert{4, {}} -- error
---
- error: Tuple field [2][1]["a"] required by space format is missing
...
s:insert{5, {{b = 1}}} -- error
---
- error: Tuple field [2][1]["a"] required by space format is missing
...
s:insert{6, {{a = 1}}} -- ok
---
- [6, [{'a': 1}]]
...
s.index.sk:alter{parts = {{'[2][1].a', 'unsigned', is_nullable = true}}}
---
...
s:insert{7, box.NULL} -- ok
---
- [7, null]
...
s:insert{8, {box.NULL}} -- ok
---
- [8, [null]]
...
-- Skipping nullable fields is also okay.
s:insert{9} -- ok
---
- [9]
...
s:insert{10, {}} -- ok
---
- [10, []]
...
s:insert{11, {{b = 1}}} -- ok
---
- [11, [{'b': 1}]]
...
s:insert{12, {{a = box.NULL}}} -- ok
---
- [12, [{'a': null}]]
...
s.index.sk:select()
---
- - [7, null]
  - [8, [null]]
  - [9]
  - [10, []]
  - [11, [{'b': 1}]]
  - [12, [{'a': null}]]
  - [6, [{'a': 1}]]
...
s:drop()
---
...
--
-- gh-4520: Nullable fields in JSON index are not working with a
--          space having a format defined.
--
s = box.schema.space.create('x', {engine = engine})
---
...
pk = s:create_index('pk')
---
...
_ = s:create_index( '_rawdata', { type='tree', unique=false, parts={{ 5, 'scalar', path='pay_date_to', is_nullable=true }} } )
---
...
_ = s:insert{6, 1569246252, 2, 77, { f1 = 123, pay_date_to = box.NULL }, 21, 1, 361 }
---
...
s:format({{type='any', name='1'}, {type='any', name='2'}, {type='any', name='3'}, {type='any', name='4'}, {type='map', name='_rawdata', is_nullable=true}})
---
...
s:drop()
---
...
s = box.schema.space.create('sp', {engine = engine, format = {{type='string', name='key'}, {type='map', name='value', is_nullable=true}}})
---
...
_ = s:create_index('pk', {parts = {'key'}})
---
...
_ = s:create_index('clid', {parts = {{'value.clid', 'str', is_nullable = true}}})
---
...
_ = s:insert({'01', {clid = 'AA', cltp = 20}})
---
...
_ = s:insert({'02', {cltp = 'BB'}})
---
...
s:drop()
---
...
