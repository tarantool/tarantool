test_run = require('test_run')
---
...
inspector = test_run.new()
---
...
engine = inspector:get_cfg('engine')
---
...
inspector:cmd("push filter '"..engine.."' to 'engine'")
---
- true
...
-- iterator (str)
space = box.schema.space.create('test', { engine = engine })
---
...
index = space:create_index('primary', { type = 'tree', parts = {1, 'string'} })
---
...
for key = 1, 100 do space:replace({tostring(key)}) end
---
...
t = {} for state, v in index:pairs({}, {iterator = 'ALL'}) do table.insert(t, v) end
---
...
t
---
- - ['1']
  - ['10']
  - ['100']
  - ['11']
  - ['12']
  - ['13']
  - ['14']
  - ['15']
  - ['16']
  - ['17']
  - ['18']
  - ['19']
  - ['2']
  - ['20']
  - ['21']
  - ['22']
  - ['23']
  - ['24']
  - ['25']
  - ['26']
  - ['27']
  - ['28']
  - ['29']
  - ['3']
  - ['30']
  - ['31']
  - ['32']
  - ['33']
  - ['34']
  - ['35']
  - ['36']
  - ['37']
  - ['38']
  - ['39']
  - ['4']
  - ['40']
  - ['41']
  - ['42']
  - ['43']
  - ['44']
  - ['45']
  - ['46']
  - ['47']
  - ['48']
  - ['49']
  - ['5']
  - ['50']
  - ['51']
  - ['52']
  - ['53']
  - ['54']
  - ['55']
  - ['56']
  - ['57']
  - ['58']
  - ['59']
  - ['6']
  - ['60']
  - ['61']
  - ['62']
  - ['63']
  - ['64']
  - ['65']
  - ['66']
  - ['67']
  - ['68']
  - ['69']
  - ['7']
  - ['70']
  - ['71']
  - ['72']
  - ['73']
  - ['74']
  - ['75']
  - ['76']
  - ['77']
  - ['78']
  - ['79']
  - ['8']
  - ['80']
  - ['81']
  - ['82']
  - ['83']
  - ['84']
  - ['85']
  - ['86']
  - ['87']
  - ['88']
  - ['89']
  - ['9']
  - ['90']
  - ['91']
  - ['92']
  - ['93']
  - ['94']
  - ['95']
  - ['96']
  - ['97']
  - ['98']
  - ['99']
...
t = {} for state, v in index:pairs({}, {iterator = 'GE'}) do table.insert(t, v) end
---
...
t
---
- - ['1']
  - ['10']
  - ['100']
  - ['11']
  - ['12']
  - ['13']
  - ['14']
  - ['15']
  - ['16']
  - ['17']
  - ['18']
  - ['19']
  - ['2']
  - ['20']
  - ['21']
  - ['22']
  - ['23']
  - ['24']
  - ['25']
  - ['26']
  - ['27']
  - ['28']
  - ['29']
  - ['3']
  - ['30']
  - ['31']
  - ['32']
  - ['33']
  - ['34']
  - ['35']
  - ['36']
  - ['37']
  - ['38']
  - ['39']
  - ['4']
  - ['40']
  - ['41']
  - ['42']
  - ['43']
  - ['44']
  - ['45']
  - ['46']
  - ['47']
  - ['48']
  - ['49']
  - ['5']
  - ['50']
  - ['51']
  - ['52']
  - ['53']
  - ['54']
  - ['55']
  - ['56']
  - ['57']
  - ['58']
  - ['59']
  - ['6']
  - ['60']
  - ['61']
  - ['62']
  - ['63']
  - ['64']
  - ['65']
  - ['66']
  - ['67']
  - ['68']
  - ['69']
  - ['7']
  - ['70']
  - ['71']
  - ['72']
  - ['73']
  - ['74']
  - ['75']
  - ['76']
  - ['77']
  - ['78']
  - ['79']
  - ['8']
  - ['80']
  - ['81']
  - ['82']
  - ['83']
  - ['84']
  - ['85']
  - ['86']
  - ['87']
  - ['88']
  - ['89']
  - ['9']
  - ['90']
  - ['91']
  - ['92']
  - ['93']
  - ['94']
  - ['95']
  - ['96']
  - ['97']
  - ['98']
  - ['99']
...
t = {} for state, v in index:pairs(tostring(44), {iterator = 'GE'}) do table.insert(t, v) end
---
...
t
---
- - ['44']
  - ['45']
  - ['46']
  - ['47']
  - ['48']
  - ['49']
  - ['5']
  - ['50']
  - ['51']
  - ['52']
  - ['53']
  - ['54']
  - ['55']
  - ['56']
  - ['57']
  - ['58']
  - ['59']
  - ['6']
  - ['60']
  - ['61']
  - ['62']
  - ['63']
  - ['64']
  - ['65']
  - ['66']
  - ['67']
  - ['68']
  - ['69']
  - ['7']
  - ['70']
  - ['71']
  - ['72']
  - ['73']
  - ['74']
  - ['75']
  - ['76']
  - ['77']
  - ['78']
  - ['79']
  - ['8']
  - ['80']
  - ['81']
  - ['82']
  - ['83']
  - ['84']
  - ['85']
  - ['86']
  - ['87']
  - ['88']
  - ['89']
  - ['9']
  - ['90']
  - ['91']
  - ['92']
  - ['93']
  - ['94']
  - ['95']
  - ['96']
  - ['97']
  - ['98']
  - ['99']
...
t = {} for state, v in index:pairs(tostring(44), {iterator = 'GT'}) do table.insert(t, v) end
---
...
t
---
- - ['45']
  - ['46']
  - ['47']
  - ['48']
  - ['49']
  - ['5']
  - ['50']
  - ['51']
  - ['52']
  - ['53']
  - ['54']
  - ['55']
  - ['56']
  - ['57']
  - ['58']
  - ['59']
  - ['6']
  - ['60']
  - ['61']
  - ['62']
  - ['63']
  - ['64']
  - ['65']
  - ['66']
  - ['67']
  - ['68']
  - ['69']
  - ['7']
  - ['70']
  - ['71']
  - ['72']
  - ['73']
  - ['74']
  - ['75']
  - ['76']
  - ['77']
  - ['78']
  - ['79']
  - ['8']
  - ['80']
  - ['81']
  - ['82']
  - ['83']
  - ['84']
  - ['85']
  - ['86']
  - ['87']
  - ['88']
  - ['89']
  - ['9']
  - ['90']
  - ['91']
  - ['92']
  - ['93']
  - ['94']
  - ['95']
  - ['96']
  - ['97']
  - ['98']
  - ['99']
...
t = {} for state, v in index:pairs({}, {iterator = 'LE'}) do table.insert(t, v) end
---
...
t
---
- - ['99']
  - ['98']
  - ['97']
  - ['96']
  - ['95']
  - ['94']
  - ['93']
  - ['92']
  - ['91']
  - ['90']
  - ['9']
  - ['89']
  - ['88']
  - ['87']
  - ['86']
  - ['85']
  - ['84']
  - ['83']
  - ['82']
  - ['81']
  - ['80']
  - ['8']
  - ['79']
  - ['78']
  - ['77']
  - ['76']
  - ['75']
  - ['74']
  - ['73']
  - ['72']
  - ['71']
  - ['70']
  - ['7']
  - ['69']
  - ['68']
  - ['67']
  - ['66']
  - ['65']
  - ['64']
  - ['63']
  - ['62']
  - ['61']
  - ['60']
  - ['6']
  - ['59']
  - ['58']
  - ['57']
  - ['56']
  - ['55']
  - ['54']
  - ['53']
  - ['52']
  - ['51']
  - ['50']
  - ['5']
  - ['49']
  - ['48']
  - ['47']
  - ['46']
  - ['45']
  - ['44']
  - ['43']
  - ['42']
  - ['41']
  - ['40']
  - ['4']
  - ['39']
  - ['38']
  - ['37']
  - ['36']
  - ['35']
  - ['34']
  - ['33']
  - ['32']
  - ['31']
  - ['30']
  - ['3']
  - ['29']
  - ['28']
  - ['27']
  - ['26']
  - ['25']
  - ['24']
  - ['23']
  - ['22']
  - ['21']
  - ['20']
  - ['2']
  - ['19']
  - ['18']
  - ['17']
  - ['16']
  - ['15']
  - ['14']
  - ['13']
  - ['12']
  - ['11']
  - ['100']
  - ['10']
  - ['1']
...
t = {} for state, v in index:pairs(tostring(77), {iterator = 'LE'}) do table.insert(t, v) end
---
...
t
---
- - ['77']
  - ['76']
  - ['75']
  - ['74']
  - ['73']
  - ['72']
  - ['71']
  - ['70']
  - ['7']
  - ['69']
  - ['68']
  - ['67']
  - ['66']
  - ['65']
  - ['64']
  - ['63']
  - ['62']
  - ['61']
  - ['60']
  - ['6']
  - ['59']
  - ['58']
  - ['57']
  - ['56']
  - ['55']
  - ['54']
  - ['53']
  - ['52']
  - ['51']
  - ['50']
  - ['5']
  - ['49']
  - ['48']
  - ['47']
  - ['46']
  - ['45']
  - ['44']
  - ['43']
  - ['42']
  - ['41']
  - ['40']
  - ['4']
  - ['39']
  - ['38']
  - ['37']
  - ['36']
  - ['35']
  - ['34']
  - ['33']
  - ['32']
  - ['31']
  - ['30']
  - ['3']
  - ['29']
  - ['28']
  - ['27']
  - ['26']
  - ['25']
  - ['24']
  - ['23']
  - ['22']
  - ['21']
  - ['20']
  - ['2']
  - ['19']
  - ['18']
  - ['17']
  - ['16']
  - ['15']
  - ['14']
  - ['13']
  - ['12']
  - ['11']
  - ['100']
  - ['10']
  - ['1']
...
t = {} for state, v in index:pairs({}, {iterator = 'LT'}) do table.insert(t, v) end
---
...
t
---
- - ['99']
  - ['98']
  - ['97']
  - ['96']
  - ['95']
  - ['94']
  - ['93']
  - ['92']
  - ['91']
  - ['90']
  - ['9']
  - ['89']
  - ['88']
  - ['87']
  - ['86']
  - ['85']
  - ['84']
  - ['83']
  - ['82']
  - ['81']
  - ['80']
  - ['8']
  - ['79']
  - ['78']
  - ['77']
  - ['76']
  - ['75']
  - ['74']
  - ['73']
  - ['72']
  - ['71']
  - ['70']
  - ['7']
  - ['69']
  - ['68']
  - ['67']
  - ['66']
  - ['65']
  - ['64']
  - ['63']
  - ['62']
  - ['61']
  - ['60']
  - ['6']
  - ['59']
  - ['58']
  - ['57']
  - ['56']
  - ['55']
  - ['54']
  - ['53']
  - ['52']
  - ['51']
  - ['50']
  - ['5']
  - ['49']
  - ['48']
  - ['47']
  - ['46']
  - ['45']
  - ['44']
  - ['43']
  - ['42']
  - ['41']
  - ['40']
  - ['4']
  - ['39']
  - ['38']
  - ['37']
  - ['36']
  - ['35']
  - ['34']
  - ['33']
  - ['32']
  - ['31']
  - ['30']
  - ['3']
  - ['29']
  - ['28']
  - ['27']
  - ['26']
  - ['25']
  - ['24']
  - ['23']
  - ['22']
  - ['21']
  - ['20']
  - ['2']
  - ['19']
  - ['18']
  - ['17']
  - ['16']
  - ['15']
  - ['14']
  - ['13']
  - ['12']
  - ['11']
  - ['100']
  - ['10']
  - ['1']
...
t = {} for state, v in index:pairs(tostring(77), {iterator = 'LT'}) do table.insert(t, v) end
---
...
t
---
- - ['76']
  - ['75']
  - ['74']
  - ['73']
  - ['72']
  - ['71']
  - ['70']
  - ['7']
  - ['69']
  - ['68']
  - ['67']
  - ['66']
  - ['65']
  - ['64']
  - ['63']
  - ['62']
  - ['61']
  - ['60']
  - ['6']
  - ['59']
  - ['58']
  - ['57']
  - ['56']
  - ['55']
  - ['54']
  - ['53']
  - ['52']
  - ['51']
  - ['50']
  - ['5']
  - ['49']
  - ['48']
  - ['47']
  - ['46']
  - ['45']
  - ['44']
  - ['43']
  - ['42']
  - ['41']
  - ['40']
  - ['4']
  - ['39']
  - ['38']
  - ['37']
  - ['36']
  - ['35']
  - ['34']
  - ['33']
  - ['32']
  - ['31']
  - ['30']
  - ['3']
  - ['29']
  - ['28']
  - ['27']
  - ['26']
  - ['25']
  - ['24']
  - ['23']
  - ['22']
  - ['21']
  - ['20']
  - ['2']
  - ['19']
  - ['18']
  - ['17']
  - ['16']
  - ['15']
  - ['14']
  - ['13']
  - ['12']
  - ['11']
  - ['100']
  - ['10']
  - ['1']
...
space:drop()
---
...
-- iterator (num)
space = box.schema.space.create('test', { engine = engine })
---
...
index = space:create_index('primary', { type = 'tree', parts = {1, 'unsigned'} })
---
...
for key = 1, 100 do space:replace({key}) end
---
...
t = {} for state, v in index:pairs({}, {iterator = 'ALL'}) do table.insert(t, v) end
---
...
t
---
- - [1]
  - [2]
  - [3]
  - [4]
  - [5]
  - [6]
  - [7]
  - [8]
  - [9]
  - [10]
  - [11]
  - [12]
  - [13]
  - [14]
  - [15]
  - [16]
  - [17]
  - [18]
  - [19]
  - [20]
  - [21]
  - [22]
  - [23]
  - [24]
  - [25]
  - [26]
  - [27]
  - [28]
  - [29]
  - [30]
  - [31]
  - [32]
  - [33]
  - [34]
  - [35]
  - [36]
  - [37]
  - [38]
  - [39]
  - [40]
  - [41]
  - [42]
  - [43]
  - [44]
  - [45]
  - [46]
  - [47]
  - [48]
  - [49]
  - [50]
  - [51]
  - [52]
  - [53]
  - [54]
  - [55]
  - [56]
  - [57]
  - [58]
  - [59]
  - [60]
  - [61]
  - [62]
  - [63]
  - [64]
  - [65]
  - [66]
  - [67]
  - [68]
  - [69]
  - [70]
  - [71]
  - [72]
  - [73]
  - [74]
  - [75]
  - [76]
  - [77]
  - [78]
  - [79]
  - [80]
  - [81]
  - [82]
  - [83]
  - [84]
  - [85]
  - [86]
  - [87]
  - [88]
  - [89]
  - [90]
  - [91]
  - [92]
  - [93]
  - [94]
  - [95]
  - [96]
  - [97]
  - [98]
  - [99]
  - [100]
...
t = {} for state, v in index:pairs({}, {iterator = 'GE'}) do table.insert(t, v) end
---
...
t
---
- - [1]
  - [2]
  - [3]
  - [4]
  - [5]
  - [6]
  - [7]
  - [8]
  - [9]
  - [10]
  - [11]
  - [12]
  - [13]
  - [14]
  - [15]
  - [16]
  - [17]
  - [18]
  - [19]
  - [20]
  - [21]
  - [22]
  - [23]
  - [24]
  - [25]
  - [26]
  - [27]
  - [28]
  - [29]
  - [30]
  - [31]
  - [32]
  - [33]
  - [34]
  - [35]
  - [36]
  - [37]
  - [38]
  - [39]
  - [40]
  - [41]
  - [42]
  - [43]
  - [44]
  - [45]
  - [46]
  - [47]
  - [48]
  - [49]
  - [50]
  - [51]
  - [52]
  - [53]
  - [54]
  - [55]
  - [56]
  - [57]
  - [58]
  - [59]
  - [60]
  - [61]
  - [62]
  - [63]
  - [64]
  - [65]
  - [66]
  - [67]
  - [68]
  - [69]
  - [70]
  - [71]
  - [72]
  - [73]
  - [74]
  - [75]
  - [76]
  - [77]
  - [78]
  - [79]
  - [80]
  - [81]
  - [82]
  - [83]
  - [84]
  - [85]
  - [86]
  - [87]
  - [88]
  - [89]
  - [90]
  - [91]
  - [92]
  - [93]
  - [94]
  - [95]
  - [96]
  - [97]
  - [98]
  - [99]
  - [100]
...
t = {} for state, v in index:pairs(44, {iterator = 'GE'}) do table.insert(t, v) end
---
...
t
---
- - [44]
  - [45]
  - [46]
  - [47]
  - [48]
  - [49]
  - [50]
  - [51]
  - [52]
  - [53]
  - [54]
  - [55]
  - [56]
  - [57]
  - [58]
  - [59]
  - [60]
  - [61]
  - [62]
  - [63]
  - [64]
  - [65]
  - [66]
  - [67]
  - [68]
  - [69]
  - [70]
  - [71]
  - [72]
  - [73]
  - [74]
  - [75]
  - [76]
  - [77]
  - [78]
  - [79]
  - [80]
  - [81]
  - [82]
  - [83]
  - [84]
  - [85]
  - [86]
  - [87]
  - [88]
  - [89]
  - [90]
  - [91]
  - [92]
  - [93]
  - [94]
  - [95]
  - [96]
  - [97]
  - [98]
  - [99]
  - [100]
...
t = {} for state, v in index:pairs(44, {iterator = 'GT'}) do table.insert(t, v) end
---
...
t
---
- - [45]
  - [46]
  - [47]
  - [48]
  - [49]
  - [50]
  - [51]
  - [52]
  - [53]
  - [54]
  - [55]
  - [56]
  - [57]
  - [58]
  - [59]
  - [60]
  - [61]
  - [62]
  - [63]
  - [64]
  - [65]
  - [66]
  - [67]
  - [68]
  - [69]
  - [70]
  - [71]
  - [72]
  - [73]
  - [74]
  - [75]
  - [76]
  - [77]
  - [78]
  - [79]
  - [80]
  - [81]
  - [82]
  - [83]
  - [84]
  - [85]
  - [86]
  - [87]
  - [88]
  - [89]
  - [90]
  - [91]
  - [92]
  - [93]
  - [94]
  - [95]
  - [96]
  - [97]
  - [98]
  - [99]
  - [100]
...
t = {} for state, v in index:pairs({}, {iterator = 'LE'}) do table.insert(t, v) end
---
...
t
---
- - [100]
  - [99]
  - [98]
  - [97]
  - [96]
  - [95]
  - [94]
  - [93]
  - [92]
  - [91]
  - [90]
  - [89]
  - [88]
  - [87]
  - [86]
  - [85]
  - [84]
  - [83]
  - [82]
  - [81]
  - [80]
  - [79]
  - [78]
  - [77]
  - [76]
  - [75]
  - [74]
  - [73]
  - [72]
  - [71]
  - [70]
  - [69]
  - [68]
  - [67]
  - [66]
  - [65]
  - [64]
  - [63]
  - [62]
  - [61]
  - [60]
  - [59]
  - [58]
  - [57]
  - [56]
  - [55]
  - [54]
  - [53]
  - [52]
  - [51]
  - [50]
  - [49]
  - [48]
  - [47]
  - [46]
  - [45]
  - [44]
  - [43]
  - [42]
  - [41]
  - [40]
  - [39]
  - [38]
  - [37]
  - [36]
  - [35]
  - [34]
  - [33]
  - [32]
  - [31]
  - [30]
  - [29]
  - [28]
  - [27]
  - [26]
  - [25]
  - [24]
  - [23]
  - [22]
  - [21]
  - [20]
  - [19]
  - [18]
  - [17]
  - [16]
  - [15]
  - [14]
  - [13]
  - [12]
  - [11]
  - [10]
  - [9]
  - [8]
  - [7]
  - [6]
  - [5]
  - [4]
  - [3]
  - [2]
  - [1]
...
t = {} for state, v in index:pairs(77, {iterator = 'LE'}) do table.insert(t, v) end
---
...
t
---
- - [77]
  - [76]
  - [75]
  - [74]
  - [73]
  - [72]
  - [71]
  - [70]
  - [69]
  - [68]
  - [67]
  - [66]
  - [65]
  - [64]
  - [63]
  - [62]
  - [61]
  - [60]
  - [59]
  - [58]
  - [57]
  - [56]
  - [55]
  - [54]
  - [53]
  - [52]
  - [51]
  - [50]
  - [49]
  - [48]
  - [47]
  - [46]
  - [45]
  - [44]
  - [43]
  - [42]
  - [41]
  - [40]
  - [39]
  - [38]
  - [37]
  - [36]
  - [35]
  - [34]
  - [33]
  - [32]
  - [31]
  - [30]
  - [29]
  - [28]
  - [27]
  - [26]
  - [25]
  - [24]
  - [23]
  - [22]
  - [21]
  - [20]
  - [19]
  - [18]
  - [17]
  - [16]
  - [15]
  - [14]
  - [13]
  - [12]
  - [11]
  - [10]
  - [9]
  - [8]
  - [7]
  - [6]
  - [5]
  - [4]
  - [3]
  - [2]
  - [1]
...
t = {} for state, v in index:pairs({}, {iterator = 'LT'}) do table.insert(t, v) end
---
...
t
---
- - [100]
  - [99]
  - [98]
  - [97]
  - [96]
  - [95]
  - [94]
  - [93]
  - [92]
  - [91]
  - [90]
  - [89]
  - [88]
  - [87]
  - [86]
  - [85]
  - [84]
  - [83]
  - [82]
  - [81]
  - [80]
  - [79]
  - [78]
  - [77]
  - [76]
  - [75]
  - [74]
  - [73]
  - [72]
  - [71]
  - [70]
  - [69]
  - [68]
  - [67]
  - [66]
  - [65]
  - [64]
  - [63]
  - [62]
  - [61]
  - [60]
  - [59]
  - [58]
  - [57]
  - [56]
  - [55]
  - [54]
  - [53]
  - [52]
  - [51]
  - [50]
  - [49]
  - [48]
  - [47]
  - [46]
  - [45]
  - [44]
  - [43]
  - [42]
  - [41]
  - [40]
  - [39]
  - [38]
  - [37]
  - [36]
  - [35]
  - [34]
  - [33]
  - [32]
  - [31]
  - [30]
  - [29]
  - [28]
  - [27]
  - [26]
  - [25]
  - [24]
  - [23]
  - [22]
  - [21]
  - [20]
  - [19]
  - [18]
  - [17]
  - [16]
  - [15]
  - [14]
  - [13]
  - [12]
  - [11]
  - [10]
  - [9]
  - [8]
  - [7]
  - [6]
  - [5]
  - [4]
  - [3]
  - [2]
  - [1]
...
t = {} for state, v in index:pairs(77, {iterator = 'LT'}) do table.insert(t, v) end
---
...
t
---
- - [76]
  - [75]
  - [74]
  - [73]
  - [72]
  - [71]
  - [70]
  - [69]
  - [68]
  - [67]
  - [66]
  - [65]
  - [64]
  - [63]
  - [62]
  - [61]
  - [60]
  - [59]
  - [58]
  - [57]
  - [56]
  - [55]
  - [54]
  - [53]
  - [52]
  - [51]
  - [50]
  - [49]
  - [48]
  - [47]
  - [46]
  - [45]
  - [44]
  - [43]
  - [42]
  - [41]
  - [40]
  - [39]
  - [38]
  - [37]
  - [36]
  - [35]
  - [34]
  - [33]
  - [32]
  - [31]
  - [30]
  - [29]
  - [28]
  - [27]
  - [26]
  - [25]
  - [24]
  - [23]
  - [22]
  - [21]
  - [20]
  - [19]
  - [18]
  - [17]
  - [16]
  - [15]
  - [14]
  - [13]
  - [12]
  - [11]
  - [10]
  - [9]
  - [8]
  - [7]
  - [6]
  - [5]
  - [4]
  - [3]
  - [2]
  - [1]
...
space:drop()
---
...
-- iterator (decimal)
decimal = require('decimal')
---
...
space = box.schema.space.create('test', { engine = engine })
---
...
index = space:create_index('primary', { type = 'tree', parts = {1, 'decimal'} })
---
...
for key = 1, 100 do space:replace{decimal.new((key-50)/10)} end
---
...
t = {} for state, v in index:pairs({}, {iterator = 'ALL'}) do table.insert(t, v) end
---
...
t
---
- - [-4.9]
  - [-4.8]
  - [-4.7]
  - [-4.6]
  - [-4.5]
  - [-4.4]
  - [-4.3]
  - [-4.2]
  - [-4.1]
  - [-4]
  - [-3.9]
  - [-3.8]
  - [-3.7]
  - [-3.6]
  - [-3.5]
  - [-3.4]
  - [-3.3]
  - [-3.2]
  - [-3.1]
  - [-3]
  - [-2.9]
  - [-2.8]
  - [-2.7]
  - [-2.6]
  - [-2.5]
  - [-2.4]
  - [-2.3]
  - [-2.2]
  - [-2.1]
  - [-2]
  - [-1.9]
  - [-1.8]
  - [-1.7]
  - [-1.6]
  - [-1.5]
  - [-1.4]
  - [-1.3]
  - [-1.2]
  - [-1.1]
  - [-1]
  - [-0.9]
  - [-0.8]
  - [-0.7]
  - [-0.6]
  - [-0.5]
  - [-0.4]
  - [-0.3]
  - [-0.2]
  - [-0.1]
  - [0]
  - [0.1]
  - [0.2]
  - [0.3]
  - [0.4]
  - [0.5]
  - [0.6]
  - [0.7]
  - [0.8]
  - [0.9]
  - [1]
  - [1.1]
  - [1.2]
  - [1.3]
  - [1.4]
  - [1.5]
  - [1.6]
  - [1.7]
  - [1.8]
  - [1.9]
  - [2]
  - [2.1]
  - [2.2]
  - [2.3]
  - [2.4]
  - [2.5]
  - [2.6]
  - [2.7]
  - [2.8]
  - [2.9]
  - [3]
  - [3.1]
  - [3.2]
  - [3.3]
  - [3.4]
  - [3.5]
  - [3.6]
  - [3.7]
  - [3.8]
  - [3.9]
  - [4]
  - [4.1]
  - [4.2]
  - [4.3]
  - [4.4]
  - [4.5]
  - [4.6]
  - [4.7]
  - [4.8]
  - [4.9]
  - [5]
...
t = {} for state, v in index:pairs({}, {iterator = 'GE'}) do table.insert(t, v) end
---
...
t
---
- - [-4.9]
  - [-4.8]
  - [-4.7]
  - [-4.6]
  - [-4.5]
  - [-4.4]
  - [-4.3]
  - [-4.2]
  - [-4.1]
  - [-4]
  - [-3.9]
  - [-3.8]
  - [-3.7]
  - [-3.6]
  - [-3.5]
  - [-3.4]
  - [-3.3]
  - [-3.2]
  - [-3.1]
  - [-3]
  - [-2.9]
  - [-2.8]
  - [-2.7]
  - [-2.6]
  - [-2.5]
  - [-2.4]
  - [-2.3]
  - [-2.2]
  - [-2.1]
  - [-2]
  - [-1.9]
  - [-1.8]
  - [-1.7]
  - [-1.6]
  - [-1.5]
  - [-1.4]
  - [-1.3]
  - [-1.2]
  - [-1.1]
  - [-1]
  - [-0.9]
  - [-0.8]
  - [-0.7]
  - [-0.6]
  - [-0.5]
  - [-0.4]
  - [-0.3]
  - [-0.2]
  - [-0.1]
  - [0]
  - [0.1]
  - [0.2]
  - [0.3]
  - [0.4]
  - [0.5]
  - [0.6]
  - [0.7]
  - [0.8]
  - [0.9]
  - [1]
  - [1.1]
  - [1.2]
  - [1.3]
  - [1.4]
  - [1.5]
  - [1.6]
  - [1.7]
  - [1.8]
  - [1.9]
  - [2]
  - [2.1]
  - [2.2]
  - [2.3]
  - [2.4]
  - [2.5]
  - [2.6]
  - [2.7]
  - [2.8]
  - [2.9]
  - [3]
  - [3.1]
  - [3.2]
  - [3.3]
  - [3.4]
  - [3.5]
  - [3.6]
  - [3.7]
  - [3.8]
  - [3.9]
  - [4]
  - [4.1]
  - [4.2]
  - [4.3]
  - [4.4]
  - [4.5]
  - [4.6]
  - [4.7]
  - [4.8]
  - [4.9]
  - [5]
...
t = {} for state, v in index:pairs(decimal.new(-0.6), {iterator = 'GE'}) do table.insert(t, v) end
---
...
t
---
- - [-0.6]
  - [-0.5]
  - [-0.4]
  - [-0.3]
  - [-0.2]
  - [-0.1]
  - [0]
  - [0.1]
  - [0.2]
  - [0.3]
  - [0.4]
  - [0.5]
  - [0.6]
  - [0.7]
  - [0.8]
  - [0.9]
  - [1]
  - [1.1]
  - [1.2]
  - [1.3]
  - [1.4]
  - [1.5]
  - [1.6]
  - [1.7]
  - [1.8]
  - [1.9]
  - [2]
  - [2.1]
  - [2.2]
  - [2.3]
  - [2.4]
  - [2.5]
  - [2.6]
  - [2.7]
  - [2.8]
  - [2.9]
  - [3]
  - [3.1]
  - [3.2]
  - [3.3]
  - [3.4]
  - [3.5]
  - [3.6]
  - [3.7]
  - [3.8]
  - [3.9]
  - [4]
  - [4.1]
  - [4.2]
  - [4.3]
  - [4.4]
  - [4.5]
  - [4.6]
  - [4.7]
  - [4.8]
  - [4.9]
  - [5]
...
t = {} for state, v in index:pairs(decimal.new(-0.6), {iterator = 'GT'}) do table.insert(t, v) end
---
...
t
---
- - [-0.5]
  - [-0.4]
  - [-0.3]
  - [-0.2]
  - [-0.1]
  - [0]
  - [0.1]
  - [0.2]
  - [0.3]
  - [0.4]
  - [0.5]
  - [0.6]
  - [0.7]
  - [0.8]
  - [0.9]
  - [1]
  - [1.1]
  - [1.2]
  - [1.3]
  - [1.4]
  - [1.5]
  - [1.6]
  - [1.7]
  - [1.8]
  - [1.9]
  - [2]
  - [2.1]
  - [2.2]
  - [2.3]
  - [2.4]
  - [2.5]
  - [2.6]
  - [2.7]
  - [2.8]
  - [2.9]
  - [3]
  - [3.1]
  - [3.2]
  - [3.3]
  - [3.4]
  - [3.5]
  - [3.6]
  - [3.7]
  - [3.8]
  - [3.9]
  - [4]
  - [4.1]
  - [4.2]
  - [4.3]
  - [4.4]
  - [4.5]
  - [4.6]
  - [4.7]
  - [4.8]
  - [4.9]
  - [5]
...
t = {} for state, v in index:pairs({}, {iterator = 'LE'}) do table.insert(t, v) end
---
...
t
---
- - [5]
  - [4.9]
  - [4.8]
  - [4.7]
  - [4.6]
  - [4.5]
  - [4.4]
  - [4.3]
  - [4.2]
  - [4.1]
  - [4]
  - [3.9]
  - [3.8]
  - [3.7]
  - [3.6]
  - [3.5]
  - [3.4]
  - [3.3]
  - [3.2]
  - [3.1]
  - [3]
  - [2.9]
  - [2.8]
  - [2.7]
  - [2.6]
  - [2.5]
  - [2.4]
  - [2.3]
  - [2.2]
  - [2.1]
  - [2]
  - [1.9]
  - [1.8]
  - [1.7]
  - [1.6]
  - [1.5]
  - [1.4]
  - [1.3]
  - [1.2]
  - [1.1]
  - [1]
  - [0.9]
  - [0.8]
  - [0.7]
  - [0.6]
  - [0.5]
  - [0.4]
  - [0.3]
  - [0.2]
  - [0.1]
  - [0]
  - [-0.1]
  - [-0.2]
  - [-0.3]
  - [-0.4]
  - [-0.5]
  - [-0.6]
  - [-0.7]
  - [-0.8]
  - [-0.9]
  - [-1]
  - [-1.1]
  - [-1.2]
  - [-1.3]
  - [-1.4]
  - [-1.5]
  - [-1.6]
  - [-1.7]
  - [-1.8]
  - [-1.9]
  - [-2]
  - [-2.1]
  - [-2.2]
  - [-2.3]
  - [-2.4]
  - [-2.5]
  - [-2.6]
  - [-2.7]
  - [-2.8]
  - [-2.9]
  - [-3]
  - [-3.1]
  - [-3.2]
  - [-3.3]
  - [-3.4]
  - [-3.5]
  - [-3.6]
  - [-3.7]
  - [-3.8]
  - [-3.9]
  - [-4]
  - [-4.1]
  - [-4.2]
  - [-4.3]
  - [-4.4]
  - [-4.5]
  - [-4.6]
  - [-4.7]
  - [-4.8]
  - [-4.9]
...
t = {} for state, v in index:pairs(decimal.new(2.7), {iterator = 'LE'}) do table.insert(t, v) end
---
...
t
---
- - [2.7]
  - [2.6]
  - [2.5]
  - [2.4]
  - [2.3]
  - [2.2]
  - [2.1]
  - [2]
  - [1.9]
  - [1.8]
  - [1.7]
  - [1.6]
  - [1.5]
  - [1.4]
  - [1.3]
  - [1.2]
  - [1.1]
  - [1]
  - [0.9]
  - [0.8]
  - [0.7]
  - [0.6]
  - [0.5]
  - [0.4]
  - [0.3]
  - [0.2]
  - [0.1]
  - [0]
  - [-0.1]
  - [-0.2]
  - [-0.3]
  - [-0.4]
  - [-0.5]
  - [-0.6]
  - [-0.7]
  - [-0.8]
  - [-0.9]
  - [-1]
  - [-1.1]
  - [-1.2]
  - [-1.3]
  - [-1.4]
  - [-1.5]
  - [-1.6]
  - [-1.7]
  - [-1.8]
  - [-1.9]
  - [-2]
  - [-2.1]
  - [-2.2]
  - [-2.3]
  - [-2.4]
  - [-2.5]
  - [-2.6]
  - [-2.7]
  - [-2.8]
  - [-2.9]
  - [-3]
  - [-3.1]
  - [-3.2]
  - [-3.3]
  - [-3.4]
  - [-3.5]
  - [-3.6]
  - [-3.7]
  - [-3.8]
  - [-3.9]
  - [-4]
  - [-4.1]
  - [-4.2]
  - [-4.3]
  - [-4.4]
  - [-4.5]
  - [-4.6]
  - [-4.7]
  - [-4.8]
  - [-4.9]
...
t = {} for state, v in index:pairs({}, {iterator = 'LT'}) do table.insert(t, v) end
---
...
t
---
- - [5]
  - [4.9]
  - [4.8]
  - [4.7]
  - [4.6]
  - [4.5]
  - [4.4]
  - [4.3]
  - [4.2]
  - [4.1]
  - [4]
  - [3.9]
  - [3.8]
  - [3.7]
  - [3.6]
  - [3.5]
  - [3.4]
  - [3.3]
  - [3.2]
  - [3.1]
  - [3]
  - [2.9]
  - [2.8]
  - [2.7]
  - [2.6]
  - [2.5]
  - [2.4]
  - [2.3]
  - [2.2]
  - [2.1]
  - [2]
  - [1.9]
  - [1.8]
  - [1.7]
  - [1.6]
  - [1.5]
  - [1.4]
  - [1.3]
  - [1.2]
  - [1.1]
  - [1]
  - [0.9]
  - [0.8]
  - [0.7]
  - [0.6]
  - [0.5]
  - [0.4]
  - [0.3]
  - [0.2]
  - [0.1]
  - [0]
  - [-0.1]
  - [-0.2]
  - [-0.3]
  - [-0.4]
  - [-0.5]
  - [-0.6]
  - [-0.7]
  - [-0.8]
  - [-0.9]
  - [-1]
  - [-1.1]
  - [-1.2]
  - [-1.3]
  - [-1.4]
  - [-1.5]
  - [-1.6]
  - [-1.7]
  - [-1.8]
  - [-1.9]
  - [-2]
  - [-2.1]
  - [-2.2]
  - [-2.3]
  - [-2.4]
  - [-2.5]
  - [-2.6]
  - [-2.7]
  - [-2.8]
  - [-2.9]
  - [-3]
  - [-3.1]
  - [-3.2]
  - [-3.3]
  - [-3.4]
  - [-3.5]
  - [-3.6]
  - [-3.7]
  - [-3.8]
  - [-3.9]
  - [-4]
  - [-4.1]
  - [-4.2]
  - [-4.3]
  - [-4.4]
  - [-4.5]
  - [-4.6]
  - [-4.7]
  - [-4.8]
  - [-4.9]
...
t = {} for state, v in index:pairs(decimal.new(2.7), {iterator = 'LT'}) do table.insert(t, v) end
---
...
t
---
- - [2.6]
  - [2.5]
  - [2.4]
  - [2.3]
  - [2.2]
  - [2.1]
  - [2]
  - [1.9]
  - [1.8]
  - [1.7]
  - [1.6]
  - [1.5]
  - [1.4]
  - [1.3]
  - [1.2]
  - [1.1]
  - [1]
  - [0.9]
  - [0.8]
  - [0.7]
  - [0.6]
  - [0.5]
  - [0.4]
  - [0.3]
  - [0.2]
  - [0.1]
  - [0]
  - [-0.1]
  - [-0.2]
  - [-0.3]
  - [-0.4]
  - [-0.5]
  - [-0.6]
  - [-0.7]
  - [-0.8]
  - [-0.9]
  - [-1]
  - [-1.1]
  - [-1.2]
  - [-1.3]
  - [-1.4]
  - [-1.5]
  - [-1.6]
  - [-1.7]
  - [-1.8]
  - [-1.9]
  - [-2]
  - [-2.1]
  - [-2.2]
  - [-2.3]
  - [-2.4]
  - [-2.5]
  - [-2.6]
  - [-2.7]
  - [-2.8]
  - [-2.9]
  - [-3]
  - [-3.1]
  - [-3.2]
  - [-3.3]
  - [-3.4]
  - [-3.5]
  - [-3.6]
  - [-3.7]
  - [-3.8]
  - [-3.9]
  - [-4]
  - [-4.1]
  - [-4.2]
  - [-4.3]
  - [-4.4]
  - [-4.5]
  - [-4.6]
  - [-4.7]
  - [-4.8]
  - [-4.9]
...
space:drop()
---
...
-- iterator multi-part (num, num)
space = box.schema.space.create('test', { engine = engine })
---
...
index = space:create_index('primary', { type = 'tree', parts = {1, 'unsigned', 2, 'unsigned'} })
---
...
for key = 1, 100 do space:replace({key, key}) end
---
...
t = {} for state, v in index:pairs({}, {iterator = 'ALL'}) do table.insert(t, v) end
---
...
t
---
- - [1, 1]
  - [2, 2]
  - [3, 3]
  - [4, 4]
  - [5, 5]
  - [6, 6]
  - [7, 7]
  - [8, 8]
  - [9, 9]
  - [10, 10]
  - [11, 11]
  - [12, 12]
  - [13, 13]
  - [14, 14]
  - [15, 15]
  - [16, 16]
  - [17, 17]
  - [18, 18]
  - [19, 19]
  - [20, 20]
  - [21, 21]
  - [22, 22]
  - [23, 23]
  - [24, 24]
  - [25, 25]
  - [26, 26]
  - [27, 27]
  - [28, 28]
  - [29, 29]
  - [30, 30]
  - [31, 31]
  - [32, 32]
  - [33, 33]
  - [34, 34]
  - [35, 35]
  - [36, 36]
  - [37, 37]
  - [38, 38]
  - [39, 39]
  - [40, 40]
  - [41, 41]
  - [42, 42]
  - [43, 43]
  - [44, 44]
  - [45, 45]
  - [46, 46]
  - [47, 47]
  - [48, 48]
  - [49, 49]
  - [50, 50]
  - [51, 51]
  - [52, 52]
  - [53, 53]
  - [54, 54]
  - [55, 55]
  - [56, 56]
  - [57, 57]
  - [58, 58]
  - [59, 59]
  - [60, 60]
  - [61, 61]
  - [62, 62]
  - [63, 63]
  - [64, 64]
  - [65, 65]
  - [66, 66]
  - [67, 67]
  - [68, 68]
  - [69, 69]
  - [70, 70]
  - [71, 71]
  - [72, 72]
  - [73, 73]
  - [74, 74]
  - [75, 75]
  - [76, 76]
  - [77, 77]
  - [78, 78]
  - [79, 79]
  - [80, 80]
  - [81, 81]
  - [82, 82]
  - [83, 83]
  - [84, 84]
  - [85, 85]
  - [86, 86]
  - [87, 87]
  - [88, 88]
  - [89, 89]
  - [90, 90]
  - [91, 91]
  - [92, 92]
  - [93, 93]
  - [94, 94]
  - [95, 95]
  - [96, 96]
  - [97, 97]
  - [98, 98]
  - [99, 99]
  - [100, 100]
...
t = {} for state, v in index:pairs({}, {iterator = 'GE'}) do table.insert(t, v) end
---
...
t
---
- - [1, 1]
  - [2, 2]
  - [3, 3]
  - [4, 4]
  - [5, 5]
  - [6, 6]
  - [7, 7]
  - [8, 8]
  - [9, 9]
  - [10, 10]
  - [11, 11]
  - [12, 12]
  - [13, 13]
  - [14, 14]
  - [15, 15]
  - [16, 16]
  - [17, 17]
  - [18, 18]
  - [19, 19]
  - [20, 20]
  - [21, 21]
  - [22, 22]
  - [23, 23]
  - [24, 24]
  - [25, 25]
  - [26, 26]
  - [27, 27]
  - [28, 28]
  - [29, 29]
  - [30, 30]
  - [31, 31]
  - [32, 32]
  - [33, 33]
  - [34, 34]
  - [35, 35]
  - [36, 36]
  - [37, 37]
  - [38, 38]
  - [39, 39]
  - [40, 40]
  - [41, 41]
  - [42, 42]
  - [43, 43]
  - [44, 44]
  - [45, 45]
  - [46, 46]
  - [47, 47]
  - [48, 48]
  - [49, 49]
  - [50, 50]
  - [51, 51]
  - [52, 52]
  - [53, 53]
  - [54, 54]
  - [55, 55]
  - [56, 56]
  - [57, 57]
  - [58, 58]
  - [59, 59]
  - [60, 60]
  - [61, 61]
  - [62, 62]
  - [63, 63]
  - [64, 64]
  - [65, 65]
  - [66, 66]
  - [67, 67]
  - [68, 68]
  - [69, 69]
  - [70, 70]
  - [71, 71]
  - [72, 72]
  - [73, 73]
  - [74, 74]
  - [75, 75]
  - [76, 76]
  - [77, 77]
  - [78, 78]
  - [79, 79]
  - [80, 80]
  - [81, 81]
  - [82, 82]
  - [83, 83]
  - [84, 84]
  - [85, 85]
  - [86, 86]
  - [87, 87]
  - [88, 88]
  - [89, 89]
  - [90, 90]
  - [91, 91]
  - [92, 92]
  - [93, 93]
  - [94, 94]
  - [95, 95]
  - [96, 96]
  - [97, 97]
  - [98, 98]
  - [99, 99]
  - [100, 100]
...
t = {} for state, v in index:pairs({44, 44}, {iterator = 'GE'}) do table.insert(t, v) end
---
...
t
---
- - [44, 44]
  - [45, 45]
  - [46, 46]
  - [47, 47]
  - [48, 48]
  - [49, 49]
  - [50, 50]
  - [51, 51]
  - [52, 52]
  - [53, 53]
  - [54, 54]
  - [55, 55]
  - [56, 56]
  - [57, 57]
  - [58, 58]
  - [59, 59]
  - [60, 60]
  - [61, 61]
  - [62, 62]
  - [63, 63]
  - [64, 64]
  - [65, 65]
  - [66, 66]
  - [67, 67]
  - [68, 68]
  - [69, 69]
  - [70, 70]
  - [71, 71]
  - [72, 72]
  - [73, 73]
  - [74, 74]
  - [75, 75]
  - [76, 76]
  - [77, 77]
  - [78, 78]
  - [79, 79]
  - [80, 80]
  - [81, 81]
  - [82, 82]
  - [83, 83]
  - [84, 84]
  - [85, 85]
  - [86, 86]
  - [87, 87]
  - [88, 88]
  - [89, 89]
  - [90, 90]
  - [91, 91]
  - [92, 92]
  - [93, 93]
  - [94, 94]
  - [95, 95]
  - [96, 96]
  - [97, 97]
  - [98, 98]
  - [99, 99]
  - [100, 100]
...
t = {} for state, v in index:pairs({44, 44}, {iterator = 'GT'}) do table.insert(t, v) end
---
...
t
---
- - [45, 45]
  - [46, 46]
  - [47, 47]
  - [48, 48]
  - [49, 49]
  - [50, 50]
  - [51, 51]
  - [52, 52]
  - [53, 53]
  - [54, 54]
  - [55, 55]
  - [56, 56]
  - [57, 57]
  - [58, 58]
  - [59, 59]
  - [60, 60]
  - [61, 61]
  - [62, 62]
  - [63, 63]
  - [64, 64]
  - [65, 65]
  - [66, 66]
  - [67, 67]
  - [68, 68]
  - [69, 69]
  - [70, 70]
  - [71, 71]
  - [72, 72]
  - [73, 73]
  - [74, 74]
  - [75, 75]
  - [76, 76]
  - [77, 77]
  - [78, 78]
  - [79, 79]
  - [80, 80]
  - [81, 81]
  - [82, 82]
  - [83, 83]
  - [84, 84]
  - [85, 85]
  - [86, 86]
  - [87, 87]
  - [88, 88]
  - [89, 89]
  - [90, 90]
  - [91, 91]
  - [92, 92]
  - [93, 93]
  - [94, 94]
  - [95, 95]
  - [96, 96]
  - [97, 97]
  - [98, 98]
  - [99, 99]
  - [100, 100]
...
t = {} for state, v in index:pairs({}, {iterator = 'LE'}) do table.insert(t, v) end
---
...
t
---
- - [100, 100]
  - [99, 99]
  - [98, 98]
  - [97, 97]
  - [96, 96]
  - [95, 95]
  - [94, 94]
  - [93, 93]
  - [92, 92]
  - [91, 91]
  - [90, 90]
  - [89, 89]
  - [88, 88]
  - [87, 87]
  - [86, 86]
  - [85, 85]
  - [84, 84]
  - [83, 83]
  - [82, 82]
  - [81, 81]
  - [80, 80]
  - [79, 79]
  - [78, 78]
  - [77, 77]
  - [76, 76]
  - [75, 75]
  - [74, 74]
  - [73, 73]
  - [72, 72]
  - [71, 71]
  - [70, 70]
  - [69, 69]
  - [68, 68]
  - [67, 67]
  - [66, 66]
  - [65, 65]
  - [64, 64]
  - [63, 63]
  - [62, 62]
  - [61, 61]
  - [60, 60]
  - [59, 59]
  - [58, 58]
  - [57, 57]
  - [56, 56]
  - [55, 55]
  - [54, 54]
  - [53, 53]
  - [52, 52]
  - [51, 51]
  - [50, 50]
  - [49, 49]
  - [48, 48]
  - [47, 47]
  - [46, 46]
  - [45, 45]
  - [44, 44]
  - [43, 43]
  - [42, 42]
  - [41, 41]
  - [40, 40]
  - [39, 39]
  - [38, 38]
  - [37, 37]
  - [36, 36]
  - [35, 35]
  - [34, 34]
  - [33, 33]
  - [32, 32]
  - [31, 31]
  - [30, 30]
  - [29, 29]
  - [28, 28]
  - [27, 27]
  - [26, 26]
  - [25, 25]
  - [24, 24]
  - [23, 23]
  - [22, 22]
  - [21, 21]
  - [20, 20]
  - [19, 19]
  - [18, 18]
  - [17, 17]
  - [16, 16]
  - [15, 15]
  - [14, 14]
  - [13, 13]
  - [12, 12]
  - [11, 11]
  - [10, 10]
  - [9, 9]
  - [8, 8]
  - [7, 7]
  - [6, 6]
  - [5, 5]
  - [4, 4]
  - [3, 3]
  - [2, 2]
  - [1, 1]
...
t = {} for state, v in index:pairs({77, 77}, {iterator = 'LE'}) do table.insert(t, v) end
---
...
t
---
- - [77, 77]
  - [76, 76]
  - [75, 75]
  - [74, 74]
  - [73, 73]
  - [72, 72]
  - [71, 71]
  - [70, 70]
  - [69, 69]
  - [68, 68]
  - [67, 67]
  - [66, 66]
  - [65, 65]
  - [64, 64]
  - [63, 63]
  - [62, 62]
  - [61, 61]
  - [60, 60]
  - [59, 59]
  - [58, 58]
  - [57, 57]
  - [56, 56]
  - [55, 55]
  - [54, 54]
  - [53, 53]
  - [52, 52]
  - [51, 51]
  - [50, 50]
  - [49, 49]
  - [48, 48]
  - [47, 47]
  - [46, 46]
  - [45, 45]
  - [44, 44]
  - [43, 43]
  - [42, 42]
  - [41, 41]
  - [40, 40]
  - [39, 39]
  - [38, 38]
  - [37, 37]
  - [36, 36]
  - [35, 35]
  - [34, 34]
  - [33, 33]
  - [32, 32]
  - [31, 31]
  - [30, 30]
  - [29, 29]
  - [28, 28]
  - [27, 27]
  - [26, 26]
  - [25, 25]
  - [24, 24]
  - [23, 23]
  - [22, 22]
  - [21, 21]
  - [20, 20]
  - [19, 19]
  - [18, 18]
  - [17, 17]
  - [16, 16]
  - [15, 15]
  - [14, 14]
  - [13, 13]
  - [12, 12]
  - [11, 11]
  - [10, 10]
  - [9, 9]
  - [8, 8]
  - [7, 7]
  - [6, 6]
  - [5, 5]
  - [4, 4]
  - [3, 3]
  - [2, 2]
  - [1, 1]
...
t = {} for state, v in index:pairs({}, {iterator = 'LT'}) do table.insert(t, v) end
---
...
t
---
- - [100, 100]
  - [99, 99]
  - [98, 98]
  - [97, 97]
  - [96, 96]
  - [95, 95]
  - [94, 94]
  - [93, 93]
  - [92, 92]
  - [91, 91]
  - [90, 90]
  - [89, 89]
  - [88, 88]
  - [87, 87]
  - [86, 86]
  - [85, 85]
  - [84, 84]
  - [83, 83]
  - [82, 82]
  - [81, 81]
  - [80, 80]
  - [79, 79]
  - [78, 78]
  - [77, 77]
  - [76, 76]
  - [75, 75]
  - [74, 74]
  - [73, 73]
  - [72, 72]
  - [71, 71]
  - [70, 70]
  - [69, 69]
  - [68, 68]
  - [67, 67]
  - [66, 66]
  - [65, 65]
  - [64, 64]
  - [63, 63]
  - [62, 62]
  - [61, 61]
  - [60, 60]
  - [59, 59]
  - [58, 58]
  - [57, 57]
  - [56, 56]
  - [55, 55]
  - [54, 54]
  - [53, 53]
  - [52, 52]
  - [51, 51]
  - [50, 50]
  - [49, 49]
  - [48, 48]
  - [47, 47]
  - [46, 46]
  - [45, 45]
  - [44, 44]
  - [43, 43]
  - [42, 42]
  - [41, 41]
  - [40, 40]
  - [39, 39]
  - [38, 38]
  - [37, 37]
  - [36, 36]
  - [35, 35]
  - [34, 34]
  - [33, 33]
  - [32, 32]
  - [31, 31]
  - [30, 30]
  - [29, 29]
  - [28, 28]
  - [27, 27]
  - [26, 26]
  - [25, 25]
  - [24, 24]
  - [23, 23]
  - [22, 22]
  - [21, 21]
  - [20, 20]
  - [19, 19]
  - [18, 18]
  - [17, 17]
  - [16, 16]
  - [15, 15]
  - [14, 14]
  - [13, 13]
  - [12, 12]
  - [11, 11]
  - [10, 10]
  - [9, 9]
  - [8, 8]
  - [7, 7]
  - [6, 6]
  - [5, 5]
  - [4, 4]
  - [3, 3]
  - [2, 2]
  - [1, 1]
...
t = {} for state, v in index:pairs({77, 77}, {iterator = 'LT'}) do table.insert(t, v) end
---
...
t
---
- - [76, 76]
  - [75, 75]
  - [74, 74]
  - [73, 73]
  - [72, 72]
  - [71, 71]
  - [70, 70]
  - [69, 69]
  - [68, 68]
  - [67, 67]
  - [66, 66]
  - [65, 65]
  - [64, 64]
  - [63, 63]
  - [62, 62]
  - [61, 61]
  - [60, 60]
  - [59, 59]
  - [58, 58]
  - [57, 57]
  - [56, 56]
  - [55, 55]
  - [54, 54]
  - [53, 53]
  - [52, 52]
  - [51, 51]
  - [50, 50]
  - [49, 49]
  - [48, 48]
  - [47, 47]
  - [46, 46]
  - [45, 45]
  - [44, 44]
  - [43, 43]
  - [42, 42]
  - [41, 41]
  - [40, 40]
  - [39, 39]
  - [38, 38]
  - [37, 37]
  - [36, 36]
  - [35, 35]
  - [34, 34]
  - [33, 33]
  - [32, 32]
  - [31, 31]
  - [30, 30]
  - [29, 29]
  - [28, 28]
  - [27, 27]
  - [26, 26]
  - [25, 25]
  - [24, 24]
  - [23, 23]
  - [22, 22]
  - [21, 21]
  - [20, 20]
  - [19, 19]
  - [18, 18]
  - [17, 17]
  - [16, 16]
  - [15, 15]
  - [14, 14]
  - [13, 13]
  - [12, 12]
  - [11, 11]
  - [10, 10]
  - [9, 9]
  - [8, 8]
  - [7, 7]
  - [6, 6]
  - [5, 5]
  - [4, 4]
  - [3, 3]
  - [2, 2]
  - [1, 1]
...
space:drop()
---
...
-- iterator with tuple.new
space = box.schema.space.create('test', { engine = engine })
---
...
index = space:create_index('primary', { type = 'tree', parts = {1, 'string'} })
---
...
for key = 1, 100 do space:replace({tostring(key)}) end
---
...
t = {} for state, v in index:pairs(box.tuple.new{}, {iterator = 'ALL'}) do table.insert(t, v) end
---
...
t
---
- - ['1']
  - ['10']
  - ['100']
  - ['11']
  - ['12']
  - ['13']
  - ['14']
  - ['15']
  - ['16']
  - ['17']
  - ['18']
  - ['19']
  - ['2']
  - ['20']
  - ['21']
  - ['22']
  - ['23']
  - ['24']
  - ['25']
  - ['26']
  - ['27']
  - ['28']
  - ['29']
  - ['3']
  - ['30']
  - ['31']
  - ['32']
  - ['33']
  - ['34']
  - ['35']
  - ['36']
  - ['37']
  - ['38']
  - ['39']
  - ['4']
  - ['40']
  - ['41']
  - ['42']
  - ['43']
  - ['44']
  - ['45']
  - ['46']
  - ['47']
  - ['48']
  - ['49']
  - ['5']
  - ['50']
  - ['51']
  - ['52']
  - ['53']
  - ['54']
  - ['55']
  - ['56']
  - ['57']
  - ['58']
  - ['59']
  - ['6']
  - ['60']
  - ['61']
  - ['62']
  - ['63']
  - ['64']
  - ['65']
  - ['66']
  - ['67']
  - ['68']
  - ['69']
  - ['7']
  - ['70']
  - ['71']
  - ['72']
  - ['73']
  - ['74']
  - ['75']
  - ['76']
  - ['77']
  - ['78']
  - ['79']
  - ['8']
  - ['80']
  - ['81']
  - ['82']
  - ['83']
  - ['84']
  - ['85']
  - ['86']
  - ['87']
  - ['88']
  - ['89']
  - ['9']
  - ['90']
  - ['91']
  - ['92']
  - ['93']
  - ['94']
  - ['95']
  - ['96']
  - ['97']
  - ['98']
  - ['99']
...
t = {} for state, v in index:pairs(box.tuple.new{}, {iterator = 'GE'}) do table.insert(t, v) end
---
...
t
---
- - ['1']
  - ['10']
  - ['100']
  - ['11']
  - ['12']
  - ['13']
  - ['14']
  - ['15']
  - ['16']
  - ['17']
  - ['18']
  - ['19']
  - ['2']
  - ['20']
  - ['21']
  - ['22']
  - ['23']
  - ['24']
  - ['25']
  - ['26']
  - ['27']
  - ['28']
  - ['29']
  - ['3']
  - ['30']
  - ['31']
  - ['32']
  - ['33']
  - ['34']
  - ['35']
  - ['36']
  - ['37']
  - ['38']
  - ['39']
  - ['4']
  - ['40']
  - ['41']
  - ['42']
  - ['43']
  - ['44']
  - ['45']
  - ['46']
  - ['47']
  - ['48']
  - ['49']
  - ['5']
  - ['50']
  - ['51']
  - ['52']
  - ['53']
  - ['54']
  - ['55']
  - ['56']
  - ['57']
  - ['58']
  - ['59']
  - ['6']
  - ['60']
  - ['61']
  - ['62']
  - ['63']
  - ['64']
  - ['65']
  - ['66']
  - ['67']
  - ['68']
  - ['69']
  - ['7']
  - ['70']
  - ['71']
  - ['72']
  - ['73']
  - ['74']
  - ['75']
  - ['76']
  - ['77']
  - ['78']
  - ['79']
  - ['8']
  - ['80']
  - ['81']
  - ['82']
  - ['83']
  - ['84']
  - ['85']
  - ['86']
  - ['87']
  - ['88']
  - ['89']
  - ['9']
  - ['90']
  - ['91']
  - ['92']
  - ['93']
  - ['94']
  - ['95']
  - ['96']
  - ['97']
  - ['98']
  - ['99']
...
t = {} for state, v in index:pairs(box.tuple.new(tostring(44)), {iterator = 'GE'}) do table.insert(t, v) end
---
...
t
---
- - ['44']
  - ['45']
  - ['46']
  - ['47']
  - ['48']
  - ['49']
  - ['5']
  - ['50']
  - ['51']
  - ['52']
  - ['53']
  - ['54']
  - ['55']
  - ['56']
  - ['57']
  - ['58']
  - ['59']
  - ['6']
  - ['60']
  - ['61']
  - ['62']
  - ['63']
  - ['64']
  - ['65']
  - ['66']
  - ['67']
  - ['68']
  - ['69']
  - ['7']
  - ['70']
  - ['71']
  - ['72']
  - ['73']
  - ['74']
  - ['75']
  - ['76']
  - ['77']
  - ['78']
  - ['79']
  - ['8']
  - ['80']
  - ['81']
  - ['82']
  - ['83']
  - ['84']
  - ['85']
  - ['86']
  - ['87']
  - ['88']
  - ['89']
  - ['9']
  - ['90']
  - ['91']
  - ['92']
  - ['93']
  - ['94']
  - ['95']
  - ['96']
  - ['97']
  - ['98']
  - ['99']
...
t = {} for state, v in index:pairs(box.tuple.new(tostring(44)), {iterator = 'GT'}) do table.insert(t, v) end
---
...
t
---
- - ['45']
  - ['46']
  - ['47']
  - ['48']
  - ['49']
  - ['5']
  - ['50']
  - ['51']
  - ['52']
  - ['53']
  - ['54']
  - ['55']
  - ['56']
  - ['57']
  - ['58']
  - ['59']
  - ['6']
  - ['60']
  - ['61']
  - ['62']
  - ['63']
  - ['64']
  - ['65']
  - ['66']
  - ['67']
  - ['68']
  - ['69']
  - ['7']
  - ['70']
  - ['71']
  - ['72']
  - ['73']
  - ['74']
  - ['75']
  - ['76']
  - ['77']
  - ['78']
  - ['79']
  - ['8']
  - ['80']
  - ['81']
  - ['82']
  - ['83']
  - ['84']
  - ['85']
  - ['86']
  - ['87']
  - ['88']
  - ['89']
  - ['9']
  - ['90']
  - ['91']
  - ['92']
  - ['93']
  - ['94']
  - ['95']
  - ['96']
  - ['97']
  - ['98']
  - ['99']
...
t = {} for state, v in index:pairs(box.tuple.new{}, {iterator = 'LE'}) do table.insert(t, v) end
---
...
t
---
- - ['99']
  - ['98']
  - ['97']
  - ['96']
  - ['95']
  - ['94']
  - ['93']
  - ['92']
  - ['91']
  - ['90']
  - ['9']
  - ['89']
  - ['88']
  - ['87']
  - ['86']
  - ['85']
  - ['84']
  - ['83']
  - ['82']
  - ['81']
  - ['80']
  - ['8']
  - ['79']
  - ['78']
  - ['77']
  - ['76']
  - ['75']
  - ['74']
  - ['73']
  - ['72']
  - ['71']
  - ['70']
  - ['7']
  - ['69']
  - ['68']
  - ['67']
  - ['66']
  - ['65']
  - ['64']
  - ['63']
  - ['62']
  - ['61']
  - ['60']
  - ['6']
  - ['59']
  - ['58']
  - ['57']
  - ['56']
  - ['55']
  - ['54']
  - ['53']
  - ['52']
  - ['51']
  - ['50']
  - ['5']
  - ['49']
  - ['48']
  - ['47']
  - ['46']
  - ['45']
  - ['44']
  - ['43']
  - ['42']
  - ['41']
  - ['40']
  - ['4']
  - ['39']
  - ['38']
  - ['37']
  - ['36']
  - ['35']
  - ['34']
  - ['33']
  - ['32']
  - ['31']
  - ['30']
  - ['3']
  - ['29']
  - ['28']
  - ['27']
  - ['26']
  - ['25']
  - ['24']
  - ['23']
  - ['22']
  - ['21']
  - ['20']
  - ['2']
  - ['19']
  - ['18']
  - ['17']
  - ['16']
  - ['15']
  - ['14']
  - ['13']
  - ['12']
  - ['11']
  - ['100']
  - ['10']
  - ['1']
...
t = {} for state, v in index:pairs(box.tuple.new(tostring(77)), {iterator = 'LE'}) do table.insert(t, v) end
---
...
t
---
- - ['77']
  - ['76']
  - ['75']
  - ['74']
  - ['73']
  - ['72']
  - ['71']
  - ['70']
  - ['7']
  - ['69']
  - ['68']
  - ['67']
  - ['66']
  - ['65']
  - ['64']
  - ['63']
  - ['62']
  - ['61']
  - ['60']
  - ['6']
  - ['59']
  - ['58']
  - ['57']
  - ['56']
  - ['55']
  - ['54']
  - ['53']
  - ['52']
  - ['51']
  - ['50']
  - ['5']
  - ['49']
  - ['48']
  - ['47']
  - ['46']
  - ['45']
  - ['44']
  - ['43']
  - ['42']
  - ['41']
  - ['40']
  - ['4']
  - ['39']
  - ['38']
  - ['37']
  - ['36']
  - ['35']
  - ['34']
  - ['33']
  - ['32']
  - ['31']
  - ['30']
  - ['3']
  - ['29']
  - ['28']
  - ['27']
  - ['26']
  - ['25']
  - ['24']
  - ['23']
  - ['22']
  - ['21']
  - ['20']
  - ['2']
  - ['19']
  - ['18']
  - ['17']
  - ['16']
  - ['15']
  - ['14']
  - ['13']
  - ['12']
  - ['11']
  - ['100']
  - ['10']
  - ['1']
...
t = {} for state, v in index:pairs(box.tuple.new{}, {iterator = 'LT'}) do table.insert(t, v) end
---
...
t
---
- - ['99']
  - ['98']
  - ['97']
  - ['96']
  - ['95']
  - ['94']
  - ['93']
  - ['92']
  - ['91']
  - ['90']
  - ['9']
  - ['89']
  - ['88']
  - ['87']
  - ['86']
  - ['85']
  - ['84']
  - ['83']
  - ['82']
  - ['81']
  - ['80']
  - ['8']
  - ['79']
  - ['78']
  - ['77']
  - ['76']
  - ['75']
  - ['74']
  - ['73']
  - ['72']
  - ['71']
  - ['70']
  - ['7']
  - ['69']
  - ['68']
  - ['67']
  - ['66']
  - ['65']
  - ['64']
  - ['63']
  - ['62']
  - ['61']
  - ['60']
  - ['6']
  - ['59']
  - ['58']
  - ['57']
  - ['56']
  - ['55']
  - ['54']
  - ['53']
  - ['52']
  - ['51']
  - ['50']
  - ['5']
  - ['49']
  - ['48']
  - ['47']
  - ['46']
  - ['45']
  - ['44']
  - ['43']
  - ['42']
  - ['41']
  - ['40']
  - ['4']
  - ['39']
  - ['38']
  - ['37']
  - ['36']
  - ['35']
  - ['34']
  - ['33']
  - ['32']
  - ['31']
  - ['30']
  - ['3']
  - ['29']
  - ['28']
  - ['27']
  - ['26']
  - ['25']
  - ['24']
  - ['23']
  - ['22']
  - ['21']
  - ['20']
  - ['2']
  - ['19']
  - ['18']
  - ['17']
  - ['16']
  - ['15']
  - ['14']
  - ['13']
  - ['12']
  - ['11']
  - ['100']
  - ['10']
  - ['1']
...
t = {} for state, v in index:pairs(box.tuple.new(tostring(77)), {iterator = 'LT'}) do table.insert(t, v) end
---
...
t
---
- - ['76']
  - ['75']
  - ['74']
  - ['73']
  - ['72']
  - ['71']
  - ['70']
  - ['7']
  - ['69']
  - ['68']
  - ['67']
  - ['66']
  - ['65']
  - ['64']
  - ['63']
  - ['62']
  - ['61']
  - ['60']
  - ['6']
  - ['59']
  - ['58']
  - ['57']
  - ['56']
  - ['55']
  - ['54']
  - ['53']
  - ['52']
  - ['51']
  - ['50']
  - ['5']
  - ['49']
  - ['48']
  - ['47']
  - ['46']
  - ['45']
  - ['44']
  - ['43']
  - ['42']
  - ['41']
  - ['40']
  - ['4']
  - ['39']
  - ['38']
  - ['37']
  - ['36']
  - ['35']
  - ['34']
  - ['33']
  - ['32']
  - ['31']
  - ['30']
  - ['3']
  - ['29']
  - ['28']
  - ['27']
  - ['26']
  - ['25']
  - ['24']
  - ['23']
  - ['22']
  - ['21']
  - ['20']
  - ['2']
  - ['19']
  - ['18']
  - ['17']
  - ['16']
  - ['15']
  - ['14']
  - ['13']
  - ['12']
  - ['11']
  - ['100']
  - ['10']
  - ['1']
...
space:drop()
---
...
iterate = dofile('utils.lua').iterate
---
...
inspector:cmd("push filter '(error: .builtin/.*[.]lua):[0-9]+' to '\\1'")
---
- true
...
# Tree single-part unique
---
...
space = box.schema.space.create('tweedledum', { engine = engine })
---
...
idx1 = space:create_index('primary', { type = 'tree', parts = {1, 'string'}, unique = true})
---
...
-- Tree single-part non-unique
idx2 = space:create_index('i1', { type = 'tree', parts = {2, 'string'}, unique = false})
---
...
-- Tree multi-part unique
idx3 = space:create_index('i2', { type = 'tree', parts = {2, 'string', 3, 'string'}, unique = true})
---
...
-- Tree multi-part non-unique
idx4 = space:create_index('i3', { type = 'tree', parts = {3, 'string', 4, 'string'}, unique = false })
---
...
space:insert{'pid_001', 'sid_001', 'tid_998', 'a'}
---
- ['pid_001', 'sid_001', 'tid_998', 'a']
...
space:insert{'pid_002', 'sid_001', 'tid_997', 'a'}
---
- ['pid_002', 'sid_001', 'tid_997', 'a']
...
space:insert{'pid_003', 'sid_002', 'tid_997', 'b'}
---
- ['pid_003', 'sid_002', 'tid_997', 'b']
...
space:insert{'pid_005', 'sid_002', 'tid_996', 'b'}
---
- ['pid_005', 'sid_002', 'tid_996', 'b']
...
space:insert{'pid_007', 'sid_003', 'tid_996', 'a'}
---
- ['pid_007', 'sid_003', 'tid_996', 'a']
...
space:insert{'pid_011', 'sid_004', 'tid_996', 'c'}
---
- ['pid_011', 'sid_004', 'tid_996', 'c']
...
space:insert{'pid_013', 'sid_005', 'tid_996', 'b'}
---
- ['pid_013', 'sid_005', 'tid_996', 'b']
...
space:insert{'pid_017', 'sid_006', 'tid_996', 'a'}
---
- ['pid_017', 'sid_006', 'tid_996', 'a']
...
space:insert{'pid_019', 'sid_005', 'tid_995', 'a'}
---
- ['pid_019', 'sid_005', 'tid_995', 'a']
...
space:insert{'pid_023', 'sid_005', 'tid_994', 'a'}
---
- ['pid_023', 'sid_005', 'tid_994', 'a']
...
-------------------------------------------------------------------------------
-- Iterator: tree single-part unique
-------------------------------------------------------------------------------
iterate('tweedledum', 'primary', 0, 1)
---
- - $pid_001$
  - $pid_002$
  - $pid_003$
  - $pid_005$
  - $pid_007$
  - $pid_011$
  - $pid_013$
  - $pid_017$
  - $pid_019$
  - $pid_023$
...
iterate('tweedledum', 'primary', 0, 1, box.index.ALL)
---
- - $pid_001$
  - $pid_002$
  - $pid_003$
  - $pid_005$
  - $pid_007$
  - $pid_011$
  - $pid_013$
  - $pid_017$
  - $pid_019$
  - $pid_023$
...
iterate('tweedledum', 'primary', 0, 1, box.index.EQ)
---
- - $pid_001$
  - $pid_002$
  - $pid_003$
  - $pid_005$
  - $pid_007$
  - $pid_011$
  - $pid_013$
  - $pid_017$
  - $pid_019$
  - $pid_023$
...
iterate('tweedledum', 'primary', 0, 1, box.index.REQ)
---
- - $pid_023$
  - $pid_019$
  - $pid_017$
  - $pid_013$
  - $pid_011$
  - $pid_007$
  - $pid_005$
  - $pid_003$
  - $pid_002$
  - $pid_001$
...
iterate('tweedledum', 'primary', 0, 1, box.index.GE)
---
- - $pid_001$
  - $pid_002$
  - $pid_003$
  - $pid_005$
  - $pid_007$
  - $pid_011$
  - $pid_013$
  - $pid_017$
  - $pid_019$
  - $pid_023$
...
iterate('tweedledum', 'primary', 0, 1, box.index.GT)
---
- - $pid_001$
  - $pid_002$
  - $pid_003$
  - $pid_005$
  - $pid_007$
  - $pid_011$
  - $pid_013$
  - $pid_017$
  - $pid_019$
  - $pid_023$
...
iterate('tweedledum', 'primary', 0, 1, box.index.LE)
---
- - $pid_023$
  - $pid_019$
  - $pid_017$
  - $pid_013$
  - $pid_011$
  - $pid_007$
  - $pid_005$
  - $pid_003$
  - $pid_002$
  - $pid_001$
...
iterate('tweedledum', 'primary', 0, 1, box.index.LT)
---
- - $pid_023$
  - $pid_019$
  - $pid_017$
  - $pid_013$
  - $pid_011$
  - $pid_007$
  - $pid_005$
  - $pid_003$
  - $pid_002$
  - $pid_001$
...
iterate('tweedledum', 'primary', 0, 1, box.index.EQ, 'pid_003')
---
- - $pid_003$
...
iterate('tweedledum', 'primary', 0, 1, box.index.REQ, 'pid_003')
---
- - $pid_003$
...
iterate('tweedledum', 'primary', 0, 1, box.index.EQ, 'pid_666')
---
- []
...
iterate('tweedledum', 'primary', 0, 1, box.index.REQ, 'pid_666')
---
- []
...
iterate('tweedledum', 'primary', 0, 1, box.index.GE, 'pid_001')
---
- - $pid_001$
  - $pid_002$
  - $pid_003$
  - $pid_005$
  - $pid_007$
  - $pid_011$
  - $pid_013$
  - $pid_017$
  - $pid_019$
  - $pid_023$
...
iterate('tweedledum', 'primary', 0, 1, box.index.GT, 'pid_001')
---
- - $pid_002$
  - $pid_003$
  - $pid_005$
  - $pid_007$
  - $pid_011$
  - $pid_013$
  - $pid_017$
  - $pid_019$
  - $pid_023$
...
iterate('tweedledum', 'primary', 0, 1, box.index.GE, 'pid_999')
---
- []
...
iterate('tweedledum', 'primary', 0, 1, box.index.GT, 'pid_999')
---
- []
...
iterate('tweedledum', 'primary', 0, 1, box.index.LE, 'pid_002')
---
- - $pid_002$
  - $pid_001$
...
iterate('tweedledum', 'primary', 0, 1, box.index.LT, 'pid_002')
---
- - $pid_001$
...
iterate('tweedledum', 'primary', 0, 1, box.index.LE, 'pid_000')
---
- []
...
iterate('tweedledum', 'primary', 0, 1, box.index.LT, 'pid_000')
---
- []
...
-------------------------------------------------------------------------------
-- Iterator: tree single-part non-unique
-------------------------------------------------------------------------------
iterate('tweedledum', 'i1', 1, 2, box.index.ALL)
---
- - $sid_001$
  - $sid_001$
  - $sid_002$
  - $sid_002$
  - $sid_003$
  - $sid_004$
  - $sid_005$
  - $sid_005$
  - $sid_005$
  - $sid_006$
...
iterate('tweedledum', 'i1', 1, 2, box.index.EQ)
---
- - $sid_001$
  - $sid_001$
  - $sid_002$
  - $sid_002$
  - $sid_003$
  - $sid_004$
  - $sid_005$
  - $sid_005$
  - $sid_005$
  - $sid_006$
...
iterate('tweedledum', 'i1', 1, 2, box.index.REQ)
---
- - $sid_006$
  - $sid_005$
  - $sid_005$
  - $sid_005$
  - $sid_004$
  - $sid_003$
  - $sid_002$
  - $sid_002$
  - $sid_001$
  - $sid_001$
...
iterate('tweedledum', 'i1', 1, 2, box.index.GE)
---
- - $sid_001$
  - $sid_001$
  - $sid_002$
  - $sid_002$
  - $sid_003$
  - $sid_004$
  - $sid_005$
  - $sid_005$
  - $sid_005$
  - $sid_006$
...
iterate('tweedledum', 'i1', 1, 2, box.index.GT)
---
- - $sid_001$
  - $sid_001$
  - $sid_002$
  - $sid_002$
  - $sid_003$
  - $sid_004$
  - $sid_005$
  - $sid_005$
  - $sid_005$
  - $sid_006$
...
iterate('tweedledum', 'i1', 1, 2, box.index.LE)
---
- - $sid_006$
  - $sid_005$
  - $sid_005$
  - $sid_005$
  - $sid_004$
  - $sid_003$
  - $sid_002$
  - $sid_002$
  - $sid_001$
  - $sid_001$
...
iterate('tweedledum', 'i1', 1, 2, box.index.LT)
---
- - $sid_006$
  - $sid_005$
  - $sid_005$
  - $sid_005$
  - $sid_004$
  - $sid_003$
  - $sid_002$
  - $sid_002$
  - $sid_001$
  - $sid_001$
...
iterate('tweedledum', 'i1', 1, 2, box.index.EQ, 'sid_005')
---
- - $sid_005$
  - $sid_005$
  - $sid_005$
...
iterate('tweedledum', 'i1', 1, 2, box.index.REQ, 'sid_005')
---
- - $sid_005$
  - $sid_005$
  - $sid_005$
...
iterate('tweedledum', 'i1', 1, 2, box.index.GE, 'sid_005')
---
- - $sid_005$
  - $sid_005$
  - $sid_005$
  - $sid_006$
...
iterate('tweedledum', 'i1', 1, 2, box.index.GT, 'sid_005')
---
- - $sid_006$
...
iterate('tweedledum', 'i1', 1, 2, box.index.GE, 'sid_999')
---
- []
...
iterate('tweedledum', 'i1', 1, 2, box.index.GT, 'sid_999')
---
- []
...
iterate('tweedledum', 'i1', 1, 2, box.index.LE, 'sid_005')
---
- - $sid_005$
  - $sid_005$
  - $sid_005$
  - $sid_004$
  - $sid_003$
  - $sid_002$
  - $sid_002$
  - $sid_001$
  - $sid_001$
...
iterate('tweedledum', 'i1', 1, 2, box.index.LT, 'sid_005')
---
- - $sid_004$
  - $sid_003$
  - $sid_002$
  - $sid_002$
  - $sid_001$
  - $sid_001$
...
iterate('tweedledum', 'i1', 1, 2, box.index.LE, 'sid_000')
---
- []
...
iterate('tweedledum', 'i1', 1, 2, box.index.LT, 'sid_000')
---
- []
...
-------------------------------------------------------------------------------
-- Iterator: tree multi-part unique
-------------------------------------------------------------------------------
iterate('tweedledum', 'i2', 1, 3, box.index.ALL)
---
- - $sid_001$tid_997$
  - $sid_001$tid_998$
  - $sid_002$tid_996$
  - $sid_002$tid_997$
  - $sid_003$tid_996$
  - $sid_004$tid_996$
  - $sid_005$tid_994$
  - $sid_005$tid_995$
  - $sid_005$tid_996$
  - $sid_006$tid_996$
...
iterate('tweedledum', 'i2', 1, 3, box.index.EQ)
---
- - $sid_001$tid_997$
  - $sid_001$tid_998$
  - $sid_002$tid_996$
  - $sid_002$tid_997$
  - $sid_003$tid_996$
  - $sid_004$tid_996$
  - $sid_005$tid_994$
  - $sid_005$tid_995$
  - $sid_005$tid_996$
  - $sid_006$tid_996$
...
iterate('tweedledum', 'i2', 1, 3, box.index.REQ)
---
- - $sid_006$tid_996$
  - $sid_005$tid_996$
  - $sid_005$tid_995$
  - $sid_005$tid_994$
  - $sid_004$tid_996$
  - $sid_003$tid_996$
  - $sid_002$tid_997$
  - $sid_002$tid_996$
  - $sid_001$tid_998$
  - $sid_001$tid_997$
...
iterate('tweedledum', 'i2', 1, 3, box.index.GE)
---
- - $sid_001$tid_997$
  - $sid_001$tid_998$
  - $sid_002$tid_996$
  - $sid_002$tid_997$
  - $sid_003$tid_996$
  - $sid_004$tid_996$
  - $sid_005$tid_994$
  - $sid_005$tid_995$
  - $sid_005$tid_996$
  - $sid_006$tid_996$
...
iterate('tweedledum', 'i2', 1, 3, box.index.GT)
---
- - $sid_001$tid_997$
  - $sid_001$tid_998$
  - $sid_002$tid_996$
  - $sid_002$tid_997$
  - $sid_003$tid_996$
  - $sid_004$tid_996$
  - $sid_005$tid_994$
  - $sid_005$tid_995$
  - $sid_005$tid_996$
  - $sid_006$tid_996$
...
iterate('tweedledum', 'i2', 1, 3, box.index.LE)
---
- - $sid_006$tid_996$
  - $sid_005$tid_996$
  - $sid_005$tid_995$
  - $sid_005$tid_994$
  - $sid_004$tid_996$
  - $sid_003$tid_996$
  - $sid_002$tid_997$
  - $sid_002$tid_996$
  - $sid_001$tid_998$
  - $sid_001$tid_997$
...
iterate('tweedledum', 'i2', 1, 3, box.index.LT)
---
- - $sid_006$tid_996$
  - $sid_005$tid_996$
  - $sid_005$tid_995$
  - $sid_005$tid_994$
  - $sid_004$tid_996$
  - $sid_003$tid_996$
  - $sid_002$tid_997$
  - $sid_002$tid_996$
  - $sid_001$tid_998$
  - $sid_001$tid_997$
...
iterate('tweedledum', 'i2', 1, 3, box.index.EQ, 'sid_005')
---
- - $sid_005$tid_994$
  - $sid_005$tid_995$
  - $sid_005$tid_996$
...
iterate('tweedledum', 'i2', 1, 3, box.index.EQ, 'sid_005', 'tid_995')
---
- - $sid_005$tid_995$
...
iterate('tweedledum', 'i2', 1, 3, box.index.EQ, 'sid_005', 'tid_999')
---
- []
...
iterate('tweedledum', 'i2', 1, 3, box.index.REQ, 'sid_005')
---
- - $sid_005$tid_996$
  - $sid_005$tid_995$
  - $sid_005$tid_994$
...
iterate('tweedledum', 'i2', 1, 3, box.index.REQ, 'sid_005', 'tid_995')
---
- - $sid_005$tid_995$
...
iterate('tweedledum', 'i2', 1, 3, box.index.REQ, 'sid_005', 'tid_999')
---
- []
...
iterate('tweedledum', 'i2', 1, 3, box.index.GE, 'sid_005')
---
- - $sid_005$tid_994$
  - $sid_005$tid_995$
  - $sid_005$tid_996$
  - $sid_006$tid_996$
...
iterate('tweedledum', 'i2', 1, 3, box.index.GT, 'sid_005')
---
- - $sid_006$tid_996$
...
iterate('tweedledum', 'i2', 1, 3, box.index.GE, 'sid_005', 'tid_995')
---
- - $sid_005$tid_995$
  - $sid_005$tid_996$
  - $sid_006$tid_996$
...
iterate('tweedledum', 'i2', 1, 3, box.index.GT, 'sid_005', 'tid_995')
---
- - $sid_005$tid_996$
  - $sid_006$tid_996$
...
iterate('tweedledum', 'i2', 1, 3, box.index.GE, 'sid_005', 'tid_999')
---
- - $sid_006$tid_996$
...
iterate('tweedledum', 'i2', 1, 3, box.index.GT, 'sid_005', 'tid_999')
---
- - $sid_006$tid_996$
...
iterate('tweedledum', 'i2', 1, 3, box.index.GE, 'sid_999')
---
- []
...
iterate('tweedledum', 'i2', 1, 3, box.index.GT, 'sid_999')
---
- []
...
iterate('tweedledum', 'i2', 1, 3, box.index.LE, 'sid_005')
---
- - $sid_005$tid_996$
  - $sid_005$tid_995$
  - $sid_005$tid_994$
  - $sid_004$tid_996$
  - $sid_003$tid_996$
  - $sid_002$tid_997$
  - $sid_002$tid_996$
  - $sid_001$tid_998$
  - $sid_001$tid_997$
...
iterate('tweedledum', 'i2', 1, 3, box.index.LT, 'sid_005')
---
- - $sid_004$tid_996$
  - $sid_003$tid_996$
  - $sid_002$tid_997$
  - $sid_002$tid_996$
  - $sid_001$tid_998$
  - $sid_001$tid_997$
...
iterate('tweedledum', 'i2', 1, 3, box.index.LE, 'sid_005', 'tid_997')
---
- - $sid_005$tid_996$
  - $sid_005$tid_995$
  - $sid_005$tid_994$
  - $sid_004$tid_996$
  - $sid_003$tid_996$
  - $sid_002$tid_997$
  - $sid_002$tid_996$
  - $sid_001$tid_998$
  - $sid_001$tid_997$
...
iterate('tweedledum', 'i2', 1, 3, box.index.LT, 'sid_005', 'tid_997')
---
- - $sid_005$tid_996$
  - $sid_005$tid_995$
  - $sid_005$tid_994$
  - $sid_004$tid_996$
  - $sid_003$tid_996$
  - $sid_002$tid_997$
  - $sid_002$tid_996$
  - $sid_001$tid_998$
  - $sid_001$tid_997$
...
iterate('tweedledum', 'i2', 1, 3, box.index.LE, 'sid_005', 'tid_000')
---
- - $sid_004$tid_996$
  - $sid_003$tid_996$
  - $sid_002$tid_997$
  - $sid_002$tid_996$
  - $sid_001$tid_998$
  - $sid_001$tid_997$
...
iterate('tweedledum', 'i2', 1, 3, box.index.LT, 'sid_005', 'tid_000')
---
- - $sid_004$tid_996$
  - $sid_003$tid_996$
  - $sid_002$tid_997$
  - $sid_002$tid_996$
  - $sid_001$tid_998$
  - $sid_001$tid_997$
...
iterate('tweedledum', 'i2', 1, 3, box.index.LE, 'sid_000')
---
- []
...
iterate('tweedledum', 'i2', 1, 3, box.index.LT, 'sid_000')
---
- []
...
-------------------------------------------------------------------------------
-- Iterator: tree multi-part non-unique
-------------------------------------------------------------------------------
iterate('tweedledum', 'i3', 2, 4, box.index.ALL)
---
- - $tid_994$a$
  - $tid_995$a$
  - $tid_996$a$
  - $tid_996$a$
  - $tid_996$b$
  - $tid_996$b$
  - $tid_996$c$
  - $tid_997$a$
  - $tid_997$b$
  - $tid_998$a$
...
iterate('tweedledum', 'i3', 2, 4, box.index.EQ)
---
- - $tid_994$a$
  - $tid_995$a$
  - $tid_996$a$
  - $tid_996$a$
  - $tid_996$b$
  - $tid_996$b$
  - $tid_996$c$
  - $tid_997$a$
  - $tid_997$b$
  - $tid_998$a$
...
iterate('tweedledum', 'i3', 2, 4, box.index.REQ)
---
- - $tid_998$a$
  - $tid_997$b$
  - $tid_997$a$
  - $tid_996$c$
  - $tid_996$b$
  - $tid_996$b$
  - $tid_996$a$
  - $tid_996$a$
  - $tid_995$a$
  - $tid_994$a$
...
iterate('tweedledum', 'i3', 2, 4, box.index.GE)
---
- - $tid_994$a$
  - $tid_995$a$
  - $tid_996$a$
  - $tid_996$a$
  - $tid_996$b$
  - $tid_996$b$
  - $tid_996$c$
  - $tid_997$a$
  - $tid_997$b$
  - $tid_998$a$
...
iterate('tweedledum', 'i3', 2, 4, box.index.GT)
---
- - $tid_994$a$
  - $tid_995$a$
  - $tid_996$a$
  - $tid_996$a$
  - $tid_996$b$
  - $tid_996$b$
  - $tid_996$c$
  - $tid_997$a$
  - $tid_997$b$
  - $tid_998$a$
...
iterate('tweedledum', 'i3', 2, 4, box.index.LE)
---
- - $tid_998$a$
  - $tid_997$b$
  - $tid_997$a$
  - $tid_996$c$
  - $tid_996$b$
  - $tid_996$b$
  - $tid_996$a$
  - $tid_996$a$
  - $tid_995$a$
  - $tid_994$a$
...
iterate('tweedledum', 'i3', 2, 4, box.index.LT)
---
- - $tid_998$a$
  - $tid_997$b$
  - $tid_997$a$
  - $tid_996$c$
  - $tid_996$b$
  - $tid_996$b$
  - $tid_996$a$
  - $tid_996$a$
  - $tid_995$a$
  - $tid_994$a$
...
iterate('tweedledum', 'i3', 2, 4, box.index.EQ, 'tid_996')
---
- - $tid_996$a$
  - $tid_996$a$
  - $tid_996$b$
  - $tid_996$b$
  - $tid_996$c$
...
iterate('tweedledum', 'i3', 2, 4, box.index.EQ, 'tid_996', 'a')
---
- - $tid_996$a$
  - $tid_996$a$
...
iterate('tweedledum', 'i3', 2, 4, box.index.EQ, 'tid_996', 'z')
---
- []
...
iterate('tweedledum', 'i3', 2, 4, box.index.REQ, 'tid_996')
---
- - $tid_996$c$
  - $tid_996$b$
  - $tid_996$b$
  - $tid_996$a$
  - $tid_996$a$
...
iterate('tweedledum', 'i3', 2, 4, box.index.REQ, 'tid_996', 'a')
---
- - $tid_996$a$
  - $tid_996$a$
...
iterate('tweedledum', 'i3', 2, 4, box.index.REQ, 'tid_996', '0')
---
- []
...
iterate('tweedledum', 'i3', 2, 4, box.index.GE, 'tid_997')
---
- - $tid_997$a$
  - $tid_997$b$
  - $tid_998$a$
...
iterate('tweedledum', 'i3', 2, 4, box.index.GT, 'tid_997')
---
- - $tid_998$a$
...
iterate('tweedledum', 'i3', 2, 4, box.index.GE, 'tid_998')
---
- - $tid_998$a$
...
iterate('tweedledum', 'i3', 2, 4, box.index.GT, 'tid_998')
---
- []
...
iterate('tweedledum', 'i3', 2, 4, box.index.LE, 'tid_997')
---
- - $tid_997$b$
  - $tid_997$a$
  - $tid_996$c$
  - $tid_996$b$
  - $tid_996$b$
  - $tid_996$a$
  - $tid_996$a$
  - $tid_995$a$
  - $tid_994$a$
...
iterate('tweedledum', 'i3', 2, 4, box.index.LT, 'tid_997')
---
- - $tid_996$c$
  - $tid_996$b$
  - $tid_996$b$
  - $tid_996$a$
  - $tid_996$a$
  - $tid_995$a$
  - $tid_994$a$
...
iterate('tweedledum', 'i3', 2, 4, box.index.LE, 'tid_000')
---
- []
...
iterate('tweedledum', 'i3', 2, 4, box.index.LT, 'tid_000')
---
- []
...
iterate('tweedledum', 'i3', 2, 4, box.index.LT, 'tid_996', 'to', 'many', 'keys')
---
- error: Invalid key part count (expected [0..2], got 4)
...
-------------------------------------------------------------------------------
-- Iterator: various
-------------------------------------------------------------------------------
space.index['primary']:pairs({}, {iterator = 666 })
---
- error: Invalid iterator type
...
-- Test cases for #123: box.index.count does not check arguments properly
status, msg = pcall(function() space.index['primary']:pairs(function() end, { iterator = box.index.EQ }) end)
---
...
msg:match('function')
---
- function
...
-- Check that iterators successfully invalidated when index deleted
gen, param, state = space.index['i1']:pairs(nil, { iterator = box.index.GE })
---
...
index_space = box.space[box.schema.INDEX_ID]
---
...
_ = index_space:delete{space.id, space.index['i1'].id}
---
...
type(_)
---
- cdata
...
_, value = gen(param, state)
---
...
value
---
- null
...
space:drop()
---
...
-- gh-1801 space:pairs() don't pass arguments to index:pairs()
space = box.schema.space.create('test')
---
...
pk = space:create_index('primary')
---
...
space:replace({1})
---
- [1]
...
space:replace({2})
---
- [2]
...
space:replace({3})
---
- [3]
...
space:replace({4})
---
- [4]
...
space:pairs(2, { iterator = 'GE' }):totable()
---
- - [2]
  - [3]
  - [4]
...
space:drop()
---
...
inspector:cmd("clear filter")
---
- true
...
--
-- gh-1875 Add support for index:pairs(key, iterator-type) syntax
--
space = box.schema.space.create('test', {engine=engine})
---
...
pk = space:create_index('pk')
---
...
space:auto_increment{1}
---
- [1, 1]
...
space:auto_increment{2}
---
- [2, 2]
...
space:auto_increment{3}
---
- [3, 3]
...
space:auto_increment{4}
---
- [4, 4]
...
space:auto_increment{5}
---
- [5, 5]
...
--
-- test pairs()
--
space:pairs(3, 'GE'):totable()
---
- - [3, 3]
  - [4, 4]
  - [5, 5]
...
pk:pairs(3, 'GE'):totable()
---
- - [3, 3]
  - [4, 4]
  - [5, 5]
...
space:pairs(3, {iterator = 'GE' }):totable()
---
- - [3, 3]
  - [4, 4]
  - [5, 5]
...
pk:pairs(3, {iterator = 'GE' }):totable()
---
- - [3, 3]
  - [4, 4]
  - [5, 5]
...
space:pairs(3, 'EQ'):totable()
---
- - [3, 3]
...
pk:pairs(3, 'EQ'):totable()
---
- - [3, 3]
...
space:pairs(3, {iterator = 'EQ' }):totable()
---
- - [3, 3]
...
pk:pairs(3, {iterator = 'EQ' }):totable()
---
- - [3, 3]
...
space:pairs(3, 'GT'):totable()
---
- - [4, 4]
  - [5, 5]
...
pk:pairs(3, 'GT'):totable()
---
- - [4, 4]
  - [5, 5]
...
space:pairs(3, {iterator = 'GT' }):totable()
---
- - [4, 4]
  - [5, 5]
...
pk:pairs(3, {iterator = 'GT' }):totable()
---
- - [4, 4]
  - [5, 5]
...
--
-- test select()
--
pk:select({3}, 'LE')
---
- - [3, 3]
  - [2, 2]
  - [1, 1]
...
space:select({3}, 'LE')
---
- - [3, 3]
  - [2, 2]
  - [1, 1]
...
--
-- test count()
--
pk:count({3}, 'GT')
---
- 2
...
space:count({3}, 'GT')
---
- 2
...
space:drop()
---
...
-- vinyl: broken rollback to savepoint
-- https://github.com/tarantool/tarantool/issues/2589
s = box.schema.create_space('s', { engine = engine})
---
...
i1 = s:create_index('i1', { type = 'tree', parts = {1,'unsigned'}, unique = true })
---
...
i2 = s:create_index('i2', { type = 'tree', parts = {2,'unsigned'}, unique = true })
---
...
_ = s:replace{2, 2}
---
...
inspector:cmd("setopt delimiter ';'");
---
- true
...
box.begin()
_ = s:replace{1, 1}
_ = pcall(s.upsert, s, {1, 1}, {{"+", 2, 1}})
box.commit();
---
...
inspector:cmd("setopt delimiter ''");
---
- true
...
s:select{}
---
- - [1, 1]
  - [2, 2]
...
s:drop{}
---
...
-- implement lazy iterator positioning
s = box.schema.space.create('test' ,{engine=engine})
---
...
i = s:create_index('i', { type = 'tree', parts = {1, 'unsigned', 2, 'unsigned'} })
---
...
for i = 1,3 do for j = 1,3 do s:replace{i, j} end end
---
...
itr1,itr2,itr3 = s:pairs{2}
---
...
_ = s:replace{1, 4}
---
...
r = {}
---
...
for k,v in itr1,itr2,itr3 do table.insert(r, v) end
---
...
r
---
- - [2, 1]
  - [2, 2]
  - [2, 3]
...
itr1,itr2,itr3 = s:pairs({2}, {iterator = 'GE'})
---
...
_ = s:replace{1, 5}
---
...
r = {}
---
...
for k,v in itr1,itr2,itr3 do table.insert(r, v) end
---
...
r
---
- - [2, 1]
  - [2, 2]
  - [2, 3]
  - [3, 1]
  - [3, 2]
  - [3, 3]
...
itr1,itr2,itr3 = s:pairs({2}, {iterator = 'REQ'})
---
...
s:replace{2, 4}
---
- [2, 4]
...
r = {}
---
...
for k,v in itr1,itr2,itr3 do table.insert(r, v) end
---
...
r
---
- - [2, 4]
  - [2, 3]
  - [2, 2]
  - [2, 1]
...
r = nil
---
...
s:drop()
---
...
-- make tree iterators stable
-- https://github.com/tarantool/tarantool/issues/1796
s = box.schema.space.create('test')
---
...
i = s:create_index('i', { type = 'tree', parts = {1, 'unsigned'} })
---
...
for i = 1,10 do s:replace{i} end
---
...
r = {}
---
...
for k,v in s:pairs{} do table.insert(r, v[1]) s:delete(v[1]) end
---
...
r
---
- - 1
  - 2
  - 3
  - 4
  - 5
  - 6
  - 7
  - 8
  - 9
  - 10
...
s:select{}
---
- []
...
for i = 1,10 do s:replace{i} end
---
...
r = {}
---
...
for k,v in s:pairs({}, {iterator = 'REQ'}) do table.insert(r, v[1]) s:delete(v[1]) end
---
...
r
---
- - 10
  - 9
  - 8
  - 7
  - 6
  - 5
  - 4
  - 3
  - 2
  - 1
...
s:select{}
---
- []
...
s:drop()
---
...
s = box.schema.space.create('test')
---
...
i = s:create_index('i', { type = 'tree', parts = {1, 'unsigned', 2, 'unsigned'} })
---
...
for i = 1,3 do for j = 1,3 do s:replace{i, j} end end
---
...
r = {}
---
...
for k,v in s:pairs{2} do table.insert(r, v) s:delete{v[1], v[2]} end
---
...
r
---
- - [2, 1]
  - [2, 2]
  - [2, 3]
...
s:select{}
---
- - [1, 1]
  - [1, 2]
  - [1, 3]
  - [3, 1]
  - [3, 2]
  - [3, 3]
...
for i = 1,3 do for j = 1,3 do s:replace{i, j} end end
---
...
r = {}
---
...
for k,v in s:pairs({3}, {iterator = 'REQ'}) do table.insert(r, v) s:delete{v[1], v[2]} end
---
...
r
---
- - [3, 3]
  - [3, 2]
  - [3, 1]
...
s:select{}
---
- - [1, 1]
  - [1, 2]
  - [1, 3]
  - [2, 1]
  - [2, 2]
  - [2, 3]
...
r = nil
---
...
s:drop()
---
...
s = box.schema.space.create('test')
---
...
i = s:create_index('i', { type = 'tree', parts = {1, 'unsigned'} })
---
...
s:replace{10} s:replace{20} s:replace{30} s:replace{40} s:replace{50} s:replace{60}
---
...
gen,param,state = i:pairs({25})
---
...
s:replace{25}
---
- [25]
...
state, value = gen(param,state)
---
...
value
---
- [25]
...
state, value = gen(param,state)
---
...
value
---
- null
...
gen,param,state = i:pairs({35})
---
...
state, value = gen(param,state)
---
...
value
---
- null
...
s:replace{35}
---
- [35]
...
f = function() return gen(param, state) end
---
...
_, errmsg = pcall(f)
---
...
errmsg:match('usage: next%(param, state%)')
---
- 'usage: next(param, state)'
...
value
---
- null
...
s:drop()
---
...
s = box.schema.space.create('test')
---
...
i = s:create_index('i', { type = 'tree', parts = {1, 'unsigned'} })
---
...
s:replace{10} s:replace{20} s:replace{30} s:replace{40} s:replace{50} s:replace{60}
---
...
gen,param,state = i:pairs({30}, {iterator = 'GE'})
---
...
state, value = gen(param, state)
---
...
value
---
- [30]
...
s:replace{0}
---
- [0]
...
state, value = gen(param, state)
---
...
value
---
- [40]
...
s:replace{42}
---
- [42]
...
state, value = gen(param, state)
---
...
value
---
- [42]
...
s:replace{80}
---
- [80]
...
state, value = gen(param, state)
---
...
value
---
- [50]
...
s:replace{15}
---
- [15]
...
state, value = gen(param, state)
---
...
value
---
- [60]
...
state, value = gen(param, state)
---
...
value
---
- [80]
...
state, value = gen(param, state)
---
...
state
---
- null
...
value
---
- null
...
s:drop()
---
...
s = box.schema.space.create('test')
---
...
i = s:create_index('i', { type = 'tree', parts = {1, 'unsigned'} })
---
...
s:replace{10} s:replace{20} s:replace{30} s:replace{40} s:replace{50} s:replace{60}
---
...
gen,param,state = i:pairs({40}, {iterator = 'LE'})
---
...
state, value = gen(param, state)
---
...
value
---
- [40]
...
s:replace{0}
---
- [0]
...
state, value = gen(param, state)
---
...
value
---
- [30]
...
s:replace{15}
---
- [15]
...
state, value = gen(param, state)
---
...
value
---
- [20]
...
s:replace{42}
---
- [42]
...
state, value = gen(param, state)
---
...
value
---
- [15]
...
s:replace{32}
---
- [32]
...
state, value = gen(param, state)
---
...
value
---
- [10]
...
s:replace{80}
---
- [80]
...
state, value = gen(param, state)
---
...
value
---
- [0]
...
state, value = gen(param, state)
---
...
state
---
- null
...
value
---
- null
...
s:drop()
---
...
s = box.schema.space.create('test')
---
...
i = s:create_index('i', { type = 'tree', parts = {1, 'unsigned'} })
---
...
s:replace{10} s:replace{20} s:replace{30} s:replace{40} s:replace{50} s:replace{60}
---
...
gen,param,state = i:pairs({28}, {iterator = 'GE'})
---
...
s:replace{0}
---
- [0]
...
state, value = gen(param, state)
---
...
value
---
- [30]
...
s:replace{15}
---
- [15]
...
state, value = gen(param, state)
---
...
value
---
- [40]
...
s:replace{42}
---
- [42]
...
state, value = gen(param, state)
---
...
value
---
- [42]
...
s:replace{32}
---
- [32]
...
state, value = gen(param, state)
---
...
value
---
- [50]
...
s:replace{80}
---
- [80]
...
state, value = gen(param, state)
---
...
value
---
- [60]
...
state, value = gen(param, state)
---
...
value
---
- [80]
...
gen(param, state)
---
- null
...
-- test iterator dummy function, invoked when it's out of bounds
gen(param, state)
---
- null
...
s:drop()
---
...
s = box.schema.space.create('test')
---
...
i = s:create_index('i', { type = 'tree', parts = {1, 'unsigned'} })
---
...
s:replace{10} s:replace{20} s:replace{30} s:replace{40} s:replace{50} s:replace{60}
---
...
gen,param,state = i:pairs({42}, {iterator = 'LE'})
---
...
s:replace{0}
---
- [0]
...
state, value = gen(param, state)
---
...
value
---
- [40]
...
s:replace{42}
---
- [42]
...
state, value = gen(param, state)
---
...
value
---
- [30]
...
s:replace{15}
---
- [15]
...
state, value = gen(param, state)
---
...
value
---
- [20]
...
s:replace{32}
---
- [32]
...
state, value = gen(param, state)
---
...
value
---
- [15]
...
s:replace{80}
---
- [80]
...
state, value = gen(param, state)
---
...
value
---
- [10]
...
state, value = gen(param, state)
---
...
value
---
- [0]
...
gen(param, state)
---
- null
...
-- test iterator dummy function, invoked when it's out of bounds
gen(param, state)
---
- null
...
s:drop()
---
...
s = box.schema.space.create('test')
---
...
i = s:create_index('i', { type = 'tree', parts = {1, 'unsigned'} })
---
...
s:replace{10} s:replace{20} s:replace{30} s:replace{40} s:replace{50} s:replace{60}
---
...
gen,param,state = i:pairs({20}, {iterator = 'GT'})
---
...
state, value = gen(param, state)
---
...
value
---
- [30]
...
s:replace{0}
---
- [0]
...
state, value = gen(param, state)
---
...
value
---
- [40]
...
s:replace{42}
---
- [42]
...
state, value = gen(param, state)
---
...
value
---
- [42]
...
s:replace{80}
---
- [80]
...
state, value = gen(param, state)
---
...
value
---
- [50]
...
s:replace{15}
---
- [15]
...
state, value = gen(param, state)
---
...
value
---
- [60]
...
state, value = gen(param, state)
---
...
value
---
- [80]
...
gen(param, state)
---
- null
...
-- test iterator dummy function, invoked when it's out of bounds
gen(param, state)
---
- null
...
s:drop()
---
...
s = box.schema.space.create('test')
---
...
i = s:create_index('i', { type = 'tree', parts = {1, 'unsigned'} })
---
...
s:replace{10} s:replace{20} s:replace{30} s:replace{40} s:replace{50} s:replace{60}
---
...
gen,param,state = i:pairs({50}, {iterator = 'LT'})
---
...
state, value = gen(param, state)
---
...
value
---
- [40]
...
s:replace{0}
---
- [0]
...
state, value = gen(param, state)
---
...
value
---
- [30]
...
s:replace{15}
---
- [15]
...
state, value = gen(param, state)
---
...
value
---
- [20]
...
s:replace{42}
---
- [42]
...
state, value = gen(param, state)
---
...
value
---
- [15]
...
s:replace{32}
---
- [32]
...
state, value = gen(param, state)
---
...
value
---
- [10]
...
s:replace{80}
---
- [80]
...
state, value = gen(param, state)
---
...
value
---
- [0]
...
gen(param, state)
---
- null
...
-- test iterator dummy function, invoked when it's out of bounds
gen(param, state)
---
- null
...
s:drop()
---
...
s = box.schema.space.create('test')
---
...
i = s:create_index('i', { type = 'tree', parts = {1, 'unsigned'} })
---
...
s:replace{10} s:replace{20} s:replace{30} s:replace{40} s:replace{50} s:replace{60}
---
...
gen,param,state = i:pairs({28}, {iterator = 'GT'})
---
...
s:replace{0}
---
- [0]
...
state, value = gen(param, state)
---
...
value
---
- [30]
...
s:replace{15}
---
- [15]
...
state, value = gen(param, state)
---
...
value
---
- [40]
...
s:replace{42}
---
- [42]
...
state, value = gen(param, state)
---
...
value
---
- [42]
...
s:replace{32}
---
- [32]
...
state, value = gen(param, state)
---
...
value
---
- [50]
...
s:replace{80}
---
- [80]
...
state, value = gen(param, state)
---
...
value
---
- [60]
...
state, value = gen(param, state)
---
...
value
---
- [80]
...
gen(param, state)
---
- null
...
-- test iterator dummy function, invoked when it's out of bounds
gen(param, state)
---
- null
...
s:drop()
---
...
s = box.schema.space.create('test')
---
...
i = s:create_index('i', { type = 'tree', parts = {1, 'unsigned'} })
---
...
s:replace{10} s:replace{20} s:replace{30} s:replace{40} s:replace{50} s:replace{60}
---
...
gen,param,state = i:pairs({42}, {iterator = 'LT'})
---
...
s:replace{0}
---
- [0]
...
state, value = gen(param, state)
---
...
value
---
- [40]
...
s:replace{42}
---
- [42]
...
state, value = gen(param, state)
---
...
value
---
- [30]
...
s:replace{15}
---
- [15]
...
state, value = gen(param, state)
---
...
value
---
- [20]
...
s:replace{32}
---
- [32]
...
state, value = gen(param, state)
---
...
value
---
- [15]
...
s:replace{80}
---
- [80]
...
state, value = gen(param, state)
---
...
value
---
- [10]
...
state, value = gen(param, state)
---
...
value
---
- [0]
...
gen(param, state)
---
- null
...
-- test iterator dummy function, invoked when it's out of bounds
gen(param, state)
---
- null
...
s:drop()
---
...
