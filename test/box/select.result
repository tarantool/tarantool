msgpack = require('msgpack')
---
...
env = require('test_run')
---
...
test_run = env.new()
---
...
fiber = require('fiber')
---
...
fiber.set_max_slice(15)
---
...
s = box.schema.space.create('select', { temporary = true })
---
...
index1 = s:create_index('primary', { type = 'tree' })
---
...
index2 = s:create_index('second', { type = 'tree', unique = true,  parts = {2, 'unsigned', 1, 'unsigned'}})
---
...
for i = 1, 20 do s:insert({ i, 1, 2, 3 }) end
---
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
local function test_op(op, idx, ...)
    local t1 = idx[op .. '_ffi'](idx, ...)
    local t2 = idx[op .. '_luac'](idx, ...)
    if msgpack.encode(t1) ~= msgpack.encode(t2) then
        return 'different result from '..op..'_ffi and '..op..'_luac', t1, t2
    end
    return t1
end
test = setmetatable({}, {
    __index = function(_, op) return function(...) return test_op(op, ...) end end
});
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
--------------------------------------------------------------------------------
-- get tests
--------------------------------------------------------------------------------
s.index[0].get == s.index[0].get_ffi or s.index[0].get == s.index[0].get_luac
---
- true
...
test.get(s.index[0])
---
- error: Invalid key part count in an exact match (expected 1, got 0)
...
test.get(s.index[0], {})
---
- error: Invalid key part count in an exact match (expected 1, got 0)
...
test.get(s.index[0], nil)
---
- error: Invalid key part count in an exact match (expected 1, got 0)
...
test.get(s.index[0], 1)
---
- [1, 1, 2, 3]
...
test.get(s.index[0], {1})
---
- [1, 1, 2, 3]
...
test.get(s.index[0], {1, 2})
---
- error: Invalid key part count in an exact match (expected 1, got 2)
...
test.get(s.index[0], 0)
---
- null
...
test.get(s.index[0], {0})
---
- null
...
test.get(s.index[0], "0")
---
- error: 'Supplied key type of part 0 does not match index part type: expected unsigned'
...
test.get(s.index[0], {"0"})
---
- error: 'Supplied key type of part 0 does not match index part type: expected unsigned'
...
test.get(s.index[1], 1)
---
- error: Invalid key part count in an exact match (expected 2, got 1)
...
test.get(s.index[1], {1})
---
- error: Invalid key part count in an exact match (expected 2, got 1)
...
test.get(s.index[1], {1, 2})
---
- [2, 1, 2, 3]
...
--------------------------------------------------------------------------------
-- select tests
--------------------------------------------------------------------------------
s.index[0].select == s.index[0].select_ffi or s.index[0].select == s.index[0].select_luac
---
- true
...
test.select(s.index[0])
---
- - [1, 1, 2, 3]
  - [2, 1, 2, 3]
  - [3, 1, 2, 3]
  - [4, 1, 2, 3]
  - [5, 1, 2, 3]
  - [6, 1, 2, 3]
  - [7, 1, 2, 3]
  - [8, 1, 2, 3]
  - [9, 1, 2, 3]
  - [10, 1, 2, 3]
  - [11, 1, 2, 3]
  - [12, 1, 2, 3]
  - [13, 1, 2, 3]
  - [14, 1, 2, 3]
  - [15, 1, 2, 3]
  - [16, 1, 2, 3]
  - [17, 1, 2, 3]
  - [18, 1, 2, 3]
  - [19, 1, 2, 3]
  - [20, 1, 2, 3]
...
test.select(s.index[0], {})
---
- - [1, 1, 2, 3]
  - [2, 1, 2, 3]
  - [3, 1, 2, 3]
  - [4, 1, 2, 3]
  - [5, 1, 2, 3]
  - [6, 1, 2, 3]
  - [7, 1, 2, 3]
  - [8, 1, 2, 3]
  - [9, 1, 2, 3]
  - [10, 1, 2, 3]
  - [11, 1, 2, 3]
  - [12, 1, 2, 3]
  - [13, 1, 2, 3]
  - [14, 1, 2, 3]
  - [15, 1, 2, 3]
  - [16, 1, 2, 3]
  - [17, 1, 2, 3]
  - [18, 1, 2, 3]
  - [19, 1, 2, 3]
  - [20, 1, 2, 3]
...
test.select(s.index[0], nil)
---
- - [1, 1, 2, 3]
  - [2, 1, 2, 3]
  - [3, 1, 2, 3]
  - [4, 1, 2, 3]
  - [5, 1, 2, 3]
  - [6, 1, 2, 3]
  - [7, 1, 2, 3]
  - [8, 1, 2, 3]
  - [9, 1, 2, 3]
  - [10, 1, 2, 3]
  - [11, 1, 2, 3]
  - [12, 1, 2, 3]
  - [13, 1, 2, 3]
  - [14, 1, 2, 3]
  - [15, 1, 2, 3]
  - [16, 1, 2, 3]
  - [17, 1, 2, 3]
  - [18, 1, 2, 3]
  - [19, 1, 2, 3]
  - [20, 1, 2, 3]
...
test.select(s.index[0], {}, {iterator = 'ALL'})
---
- - [1, 1, 2, 3]
  - [2, 1, 2, 3]
  - [3, 1, 2, 3]
  - [4, 1, 2, 3]
  - [5, 1, 2, 3]
  - [6, 1, 2, 3]
  - [7, 1, 2, 3]
  - [8, 1, 2, 3]
  - [9, 1, 2, 3]
  - [10, 1, 2, 3]
  - [11, 1, 2, 3]
  - [12, 1, 2, 3]
  - [13, 1, 2, 3]
  - [14, 1, 2, 3]
  - [15, 1, 2, 3]
  - [16, 1, 2, 3]
  - [17, 1, 2, 3]
  - [18, 1, 2, 3]
  - [19, 1, 2, 3]
  - [20, 1, 2, 3]
...
test.select(s.index[0], nil, {iterator = box.index.ALL })
---
- - [1, 1, 2, 3]
  - [2, 1, 2, 3]
  - [3, 1, 2, 3]
  - [4, 1, 2, 3]
  - [5, 1, 2, 3]
  - [6, 1, 2, 3]
  - [7, 1, 2, 3]
  - [8, 1, 2, 3]
  - [9, 1, 2, 3]
  - [10, 1, 2, 3]
  - [11, 1, 2, 3]
  - [12, 1, 2, 3]
  - [13, 1, 2, 3]
  - [14, 1, 2, 3]
  - [15, 1, 2, 3]
  - [16, 1, 2, 3]
  - [17, 1, 2, 3]
  - [18, 1, 2, 3]
  - [19, 1, 2, 3]
  - [20, 1, 2, 3]
...
test.select(s.index[0], {}, {iterator = box.index.ALL, limit = 10})
---
- - [1, 1, 2, 3]
  - [2, 1, 2, 3]
  - [3, 1, 2, 3]
  - [4, 1, 2, 3]
  - [5, 1, 2, 3]
  - [6, 1, 2, 3]
  - [7, 1, 2, 3]
  - [8, 1, 2, 3]
  - [9, 1, 2, 3]
  - [10, 1, 2, 3]
...
test.select(s.index[0], nil, {iterator = box.index.ALL, limit = 0})
---
- []
...
test.select(s.index[0], {}, {iterator = 'ALL', limit = 1, offset = 15})
---
- - [16, 1, 2, 3]
...
test.select(s.index[0], nil, {iterator = 'ALL', limit = 20, offset = 15})
---
- - [16, 1, 2, 3]
  - [17, 1, 2, 3]
  - [18, 1, 2, 3]
  - [19, 1, 2, 3]
  - [20, 1, 2, 3]
...
test.select(s.index[0], nil, {iterator = box.index.EQ})
---
- - [1, 1, 2, 3]
  - [2, 1, 2, 3]
  - [3, 1, 2, 3]
  - [4, 1, 2, 3]
  - [5, 1, 2, 3]
  - [6, 1, 2, 3]
  - [7, 1, 2, 3]
  - [8, 1, 2, 3]
  - [9, 1, 2, 3]
  - [10, 1, 2, 3]
  - [11, 1, 2, 3]
  - [12, 1, 2, 3]
  - [13, 1, 2, 3]
  - [14, 1, 2, 3]
  - [15, 1, 2, 3]
  - [16, 1, 2, 3]
  - [17, 1, 2, 3]
  - [18, 1, 2, 3]
  - [19, 1, 2, 3]
  - [20, 1, 2, 3]
...
test.select(s.index[0], {}, {iterator = 'EQ'})
---
- - [1, 1, 2, 3]
  - [2, 1, 2, 3]
  - [3, 1, 2, 3]
  - [4, 1, 2, 3]
  - [5, 1, 2, 3]
  - [6, 1, 2, 3]
  - [7, 1, 2, 3]
  - [8, 1, 2, 3]
  - [9, 1, 2, 3]
  - [10, 1, 2, 3]
  - [11, 1, 2, 3]
  - [12, 1, 2, 3]
  - [13, 1, 2, 3]
  - [14, 1, 2, 3]
  - [15, 1, 2, 3]
  - [16, 1, 2, 3]
  - [17, 1, 2, 3]
  - [18, 1, 2, 3]
  - [19, 1, 2, 3]
  - [20, 1, 2, 3]
...
test.select(s.index[0], nil, {iterator = 'REQ'})
---
- - [20, 1, 2, 3]
  - [19, 1, 2, 3]
  - [18, 1, 2, 3]
  - [17, 1, 2, 3]
  - [16, 1, 2, 3]
  - [15, 1, 2, 3]
  - [14, 1, 2, 3]
  - [13, 1, 2, 3]
  - [12, 1, 2, 3]
  - [11, 1, 2, 3]
  - [10, 1, 2, 3]
  - [9, 1, 2, 3]
  - [8, 1, 2, 3]
  - [7, 1, 2, 3]
  - [6, 1, 2, 3]
  - [5, 1, 2, 3]
  - [4, 1, 2, 3]
  - [3, 1, 2, 3]
  - [2, 1, 2, 3]
  - [1, 1, 2, 3]
...
test.select(s.index[0], {}, {iterator = box.index.REQ})
---
- - [20, 1, 2, 3]
  - [19, 1, 2, 3]
  - [18, 1, 2, 3]
  - [17, 1, 2, 3]
  - [16, 1, 2, 3]
  - [15, 1, 2, 3]
  - [14, 1, 2, 3]
  - [13, 1, 2, 3]
  - [12, 1, 2, 3]
  - [11, 1, 2, 3]
  - [10, 1, 2, 3]
  - [9, 1, 2, 3]
  - [8, 1, 2, 3]
  - [7, 1, 2, 3]
  - [6, 1, 2, 3]
  - [5, 1, 2, 3]
  - [4, 1, 2, 3]
  - [3, 1, 2, 3]
  - [2, 1, 2, 3]
  - [1, 1, 2, 3]
...
test.select(s.index[0], nil, {iterator = 'EQ', limit = 2, offset = 1})
---
- - [2, 1, 2, 3]
  - [3, 1, 2, 3]
...
test.select(s.index[0], {}, {iterator = box.index.REQ, limit = 2, offset = 1})
---
- - [19, 1, 2, 3]
  - [18, 1, 2, 3]
...
test.select(s.index[0], 1)
---
- - [1, 1, 2, 3]
...
test.select(s.index[0], {1})
---
- - [1, 1, 2, 3]
...
test.select(s.index[0], {1, 2})
---
- error: Invalid key part count (expected [0..1], got 2)
...
test.select(s.index[0], 0)
---
- []
...
test.select(s.index[0], {0})
---
- []
...
test.select(s.index[0], "0")
---
- error: 'Supplied key type of part 0 does not match index part type: expected unsigned'
...
test.select(s.index[0], {"0"})
---
- error: 'Supplied key type of part 0 does not match index part type: expected unsigned'
...
test.select(s.index[1], 1)
---
- - [1, 1, 2, 3]
  - [2, 1, 2, 3]
  - [3, 1, 2, 3]
  - [4, 1, 2, 3]
  - [5, 1, 2, 3]
  - [6, 1, 2, 3]
  - [7, 1, 2, 3]
  - [8, 1, 2, 3]
  - [9, 1, 2, 3]
  - [10, 1, 2, 3]
  - [11, 1, 2, 3]
  - [12, 1, 2, 3]
  - [13, 1, 2, 3]
  - [14, 1, 2, 3]
  - [15, 1, 2, 3]
  - [16, 1, 2, 3]
  - [17, 1, 2, 3]
  - [18, 1, 2, 3]
  - [19, 1, 2, 3]
  - [20, 1, 2, 3]
...
test.select(s.index[1], {1})
---
- - [1, 1, 2, 3]
  - [2, 1, 2, 3]
  - [3, 1, 2, 3]
  - [4, 1, 2, 3]
  - [5, 1, 2, 3]
  - [6, 1, 2, 3]
  - [7, 1, 2, 3]
  - [8, 1, 2, 3]
  - [9, 1, 2, 3]
  - [10, 1, 2, 3]
  - [11, 1, 2, 3]
  - [12, 1, 2, 3]
  - [13, 1, 2, 3]
  - [14, 1, 2, 3]
  - [15, 1, 2, 3]
  - [16, 1, 2, 3]
  - [17, 1, 2, 3]
  - [18, 1, 2, 3]
  - [19, 1, 2, 3]
  - [20, 1, 2, 3]
...
test.select(s.index[1], {1}, {limit = 2})
---
- - [1, 1, 2, 3]
  - [2, 1, 2, 3]
...
test.select(s.index[1], 1, {iterator = 'EQ'})
---
- - [1, 1, 2, 3]
  - [2, 1, 2, 3]
  - [3, 1, 2, 3]
  - [4, 1, 2, 3]
  - [5, 1, 2, 3]
  - [6, 1, 2, 3]
  - [7, 1, 2, 3]
  - [8, 1, 2, 3]
  - [9, 1, 2, 3]
  - [10, 1, 2, 3]
  - [11, 1, 2, 3]
  - [12, 1, 2, 3]
  - [13, 1, 2, 3]
  - [14, 1, 2, 3]
  - [15, 1, 2, 3]
  - [16, 1, 2, 3]
  - [17, 1, 2, 3]
  - [18, 1, 2, 3]
  - [19, 1, 2, 3]
  - [20, 1, 2, 3]
...
test.select(s.index[1], {1}, {iterator = box.index.EQ, offset = 16, limit = 2})
---
- - [17, 1, 2, 3]
  - [18, 1, 2, 3]
...
test.select(s.index[1], {1}, {iterator = box.index.REQ, offset = 16, limit = 2 })
---
- - [4, 1, 2, 3]
  - [3, 1, 2, 3]
...
test.select(s.index[1], {1, 2}, {iterator = 'EQ'})
---
- - [2, 1, 2, 3]
...
test.select(s.index[1], {1, 2}, {iterator = box.index.REQ})
---
- - [2, 1, 2, 3]
...
test.select(s.index[1], {1, 2})
---
- - [2, 1, 2, 3]
...
test.select(s.index[0], nil, { iterator = 'ALL', offset = 0, limit = 4294967295 })
---
- - [1, 1, 2, 3]
  - [2, 1, 2, 3]
  - [3, 1, 2, 3]
  - [4, 1, 2, 3]
  - [5, 1, 2, 3]
  - [6, 1, 2, 3]
  - [7, 1, 2, 3]
  - [8, 1, 2, 3]
  - [9, 1, 2, 3]
  - [10, 1, 2, 3]
  - [11, 1, 2, 3]
  - [12, 1, 2, 3]
  - [13, 1, 2, 3]
  - [14, 1, 2, 3]
  - [15, 1, 2, 3]
  - [16, 1, 2, 3]
  - [17, 1, 2, 3]
  - [18, 1, 2, 3]
  - [19, 1, 2, 3]
  - [20, 1, 2, 3]
...
test.select(s.index[0], {}, { iterator = 'ALL', offset = 0, limit = 4294967295 })
---
- - [1, 1, 2, 3]
  - [2, 1, 2, 3]
  - [3, 1, 2, 3]
  - [4, 1, 2, 3]
  - [5, 1, 2, 3]
  - [6, 1, 2, 3]
  - [7, 1, 2, 3]
  - [8, 1, 2, 3]
  - [9, 1, 2, 3]
  - [10, 1, 2, 3]
  - [11, 1, 2, 3]
  - [12, 1, 2, 3]
  - [13, 1, 2, 3]
  - [14, 1, 2, 3]
  - [15, 1, 2, 3]
  - [16, 1, 2, 3]
  - [17, 1, 2, 3]
  - [18, 1, 2, 3]
  - [19, 1, 2, 3]
  - [20, 1, 2, 3]
...
test.select(s.index[0], 1)
---
- - [1, 1, 2, 3]
...
test.select(s.index[0], 1, { iterator = box.index.EQ })
---
- - [1, 1, 2, 3]
...
test.select(s.index[0], 1, { iterator = 'EQ' })
---
- - [1, 1, 2, 3]
...
test.select(s.index[0], 1, { iterator = 'GE' })
---
- - [1, 1, 2, 3]
  - [2, 1, 2, 3]
  - [3, 1, 2, 3]
  - [4, 1, 2, 3]
  - [5, 1, 2, 3]
  - [6, 1, 2, 3]
  - [7, 1, 2, 3]
  - [8, 1, 2, 3]
  - [9, 1, 2, 3]
  - [10, 1, 2, 3]
  - [11, 1, 2, 3]
  - [12, 1, 2, 3]
  - [13, 1, 2, 3]
  - [14, 1, 2, 3]
  - [15, 1, 2, 3]
  - [16, 1, 2, 3]
  - [17, 1, 2, 3]
  - [18, 1, 2, 3]
  - [19, 1, 2, 3]
  - [20, 1, 2, 3]
...
test.select(s.index[0], 1, { iterator = 'GE', limit = 2 })
---
- - [1, 1, 2, 3]
  - [2, 1, 2, 3]
...
test.select(s.index[0], 1, { iterator = 'LE', limit = 2 })
---
- - [1, 1, 2, 3]
...
test.select(s.index[0], 1, { iterator = 'GE', offset = 10, limit = 2 })
---
- - [11, 1, 2, 3]
  - [12, 1, 2, 3]
...
s:select(2)
---
- - [2, 1, 2, 3]
...
--------------------------------------------------------------------------------
-- min/max tests
--------------------------------------------------------------------------------
test.min(s.index[1])
---
- [1, 1, 2, 3]
...
test.max(s.index[1])
---
- [20, 1, 2, 3]
...
--------------------------------------------------------------------------------
-- count tests
--------------------------------------------------------------------------------
test.count(s.index[1])
---
- 20
...
test.count(s.index[0], nil)
---
- 20
...
test.count(s.index[0], {})
---
- 20
...
test.count(s.index[0], 10, { iterator = 'GT'})
---
- 10
...
--------------------------------------------------------------------------------
-- random tests
--------------------------------------------------------------------------------
test.random(s.index[0], 48)
---
- [9, 1, 2, 3]
...
s:drop()
---
...
collectgarbage('collect')
---
- 0
...
-- gh-3224 resurrect tuple bigrefs
collectgarbage('stop')
---
- 0
...
s = box.schema.space.create('select', { temporary = true })
---
...
index = s:create_index('primary', { type = 'tree' })
---
...
_ = s:insert{0}
---
...
_ = s:insert{1}
---
...
_ = s:insert{2}
---
...
_ = s:insert{3}
---
...
lots_of_links = setmetatable({}, {__mode = 'v'})
---
...
i = 0
---
...
while (i < 33000) do table.insert(lots_of_links, s:get{0}) i = i + 1 end
---
...
while (i < 66000) do table.insert(lots_of_links, s:get{1}) i = i + 1 end
---
...
while (i < 100000) do table.insert(lots_of_links, s:get{2}) i = i + 1 end
---
...
ref_count = 0
---
...
for k, v in pairs(lots_of_links) do ref_count = ref_count + 1 end
---
...
ref_count
---
- 100000
...
-- check that tuples are deleted after gc is activated
collectgarbage('collect')
---
- 0
...
-- GC should be restarted after it was stopped.
collectgarbage('restart')
---
- 0
...
lots_of_links
---
- []
...
s:drop()
---
...
-- gh-6501 attempt to index local 'opts' (a number value)
s = box.schema.space.create('select', { temporary = true })
---
...
_ = s:create_index('primary', { type = 'tree' })
---
...
_ = s:insert{0}
---
...
_ = s:insert{1}
---
...
_ = s:insert{2}
---
...
s:select(0, true)
---
- error: Unknown iterator type 'true'
...
s:select(0, box.NULL)
---
- - [0]
...
s:select(0, box.index.GT)
---
- - [1]
  - [2]
...
s:select(0, 'GT')
---
- - [1]
  - [2]
...
s:select(0, {iterator = box.index.GT})
---
- - [1]
  - [2]
...
s:select(0, {iterator = 'GT'})
---
- - [1]
  - [2]
...
_ = s:pairs(nil, true)
---
- error: Unknown iterator type 'true'
...
_ = s:pairs(nil, box.index.GT)
---
...
_ = s:pairs(nil, 'GT')
---
...
s:count(0, true)
---
- error: Unknown iterator type 'true'
...
s:count(0, box.index.GT)
---
- 2
...
s:count(0, 'GT')
---
- 2
...
s:drop()
---
...
