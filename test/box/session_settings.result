-- test-run result file version 2
test_run = require('test_run').new()
 | ---
 | ...

-- User cannot create spaces with this engine.
s = box.schema.space.create('test', {engine = 'service'})
 | ---
 | - error: Tarantool does not support non-system space with 'service' engine.
 | ...

-- Check _session_settings space.
s = box.space._session_settings
 | ---
 | ...
s:format()
 | ---
 | - [{'name': 'name', 'type': 'string'}, {'name': 'value', 'type': 'any'}]
 | ...

-- Make sure that we cannot drop space.
s:drop()
 | ---
 | - error: Can't drop the primary key in a system space, space '_session_settings'
 | ...

--
-- Make sure, that session_settings space doesn't support
-- create_index(), insert(), replace() and delete() methods.
--
s:create_index('a')
 | ---
 | - error: _session_settings space does not support create_index()
 | ...
s:insert({'a', 1})
 | ---
 | - error: _session_settings space does not support replace()
 | ...
s:delete({'b'})
 | ---
 | - error: _session_settings space does not support delete()
 | ...
s:replace({'sql_defer_foreign_keys', true})
 | ---
 | - error: _session_settings space does not support replace()
 | ...

--
-- Check select() method of session_settings space. Should work
-- the same way as an ordinary space with an index of the type
-- "TREE".
--
s:select()
 | ---
 | - - ['sql_default_engine', 'memtx']
 |   - ['sql_defer_foreign_keys', false]
 |   - ['sql_full_column_names', false]
 |   - ['sql_full_metadata', false]
 |   - ['sql_parser_debug', false]
 |   - ['sql_recursive_triggers', true]
 |   - ['sql_reverse_unordered_selects', false]
 |   - ['sql_select_debug', false]
 |   - ['sql_vdbe_debug', false]
 | ...

t = box.schema.space.create('settings', {format = s:format()})
 | ---
 | ...
_ = t:create_index('primary')
 | ---
 | ...
for _,value in s:pairs() do t:insert(value) end
 | ---
 | ...

test_run:cmd('setopt delimiter ";"')
 | ---
 | - true
 | ...
function check_sorting(ss, ts, key)
    local iterators_list = {'ALL', 'REQ', 'EQ', 'GE', 'GT', 'LE', 'LT'}
    for _, it in pairs(iterators_list) do
        local view_space = ss:select({key}, {iterator = it})
        local test_space = ts:select({key}, {iterator = it})
        for key, value in pairs(view_space) do
            if test_space[key].name ~= value.name then
                return {
                    err = 'bad sorting', type = it,
                    exp = test_space[key].name, got = value.name
                }
            end
        end
    end
end;
 | ---
 | ...
test_run:cmd('setopt delimiter ""');
 | ---
 | - true
 | ...

check_sorting(s, t)
 | ---
 | ...
check_sorting(s, t, 'abcde')
 | ---
 | ...
check_sorting(s, t, 'sql_d')
 | ---
 | ...
check_sorting(s, t, 'sql_v')
 | ---
 | ...
check_sorting(s, t, 'sql_defer_foreign_keys')
 | ---
 | ...

t:drop()
 | ---
 | ...

-- Check get() method of session_settings space.
s:get({'sql_defer_foreign_keys'})
 | ---
 | - ['sql_defer_foreign_keys', false]
 | ...
s:get({'sql_recursive_triggers'})
 | ---
 | - ['sql_recursive_triggers', true]
 | ...
s:get({'sql_reverse_unordered_selects'})
 | ---
 | - ['sql_reverse_unordered_selects', false]
 | ...
s:get({'sql_default_engine'})
 | ---
 | - ['sql_default_engine', 'memtx']
 | ...
s:get({'abcd'})
 | ---
 | ...

-- Check pairs() method of session_settings space.
t = {}
 | ---
 | ...
for key, value in s:pairs() do table.insert(t, {key, value}) end
 | ---
 | ...
#t == s:count()
 | ---
 | - true
 | ...

-- Check update() method of session_settings space.

-- Correct updates.
s:update('sql_defer_foreign_keys', {{'=', 'value', true}})
 | ---
 | - ['sql_defer_foreign_keys', true]
 | ...
s:update({'sql_defer_foreign_keys'}, {{'=', 2, false}})
 | ---
 | - ['sql_defer_foreign_keys', false]
 | ...
s:update('sql_default_engine', {{'=', 2, 'vinyl'}})
 | ---
 | - ['sql_default_engine', 'vinyl']
 | ...
s:update('sql_default_engine', {{':', 'value', 1, 5, 'memtx'}})
 | ---
 | - ['sql_default_engine', 'memtx']
 | ...
s:update('a', {{'=', 2, 1}})
 | ---
 | ...

-- Inorrect updates.
s:update({{'sql_defer_foreign_keys'}}, {{'=', 'value', true}})
 | ---
 | - error: 'Supplied key type of part 0 does not match index part type: expected string'
 | ...

s:update('sql_defer_foreign_keys', {'=', 'value', true})
 | ---
 | - error: Illegal parameters, update operation must be an array {op,..}
 | ...
s:update('sql_defer_foreign_keys', {{'=', 'value', true}, {'=', 2, true}})
 | ---
 | - ['sql_defer_foreign_keys', true]
 | ...
s:update('sql_defer_foreign_keys', {{}})
 | ---
 | - error: Illegal parameters, update operation must be an array {op,..}, got empty
 |     array
 | ...
s:update('sql_defer_foreign_keys', {{'='}})
 | ---
 | - error: 'Unknown UPDATE operation #1: wrong number of arguments, expected 3, got
 |     1'
 | ...
s:update('sql_defer_foreign_keys', {{'=', 'value'}})
 | ---
 | - error: 'Unknown UPDATE operation #1: wrong number of arguments, expected 3, got
 |     2'
 | ...
s:update('sql_defer_foreign_keys', {{'=', 'value', true, 1}})
 | ---
 | - error: 'Unknown UPDATE operation #1: wrong number of arguments, expected 3, got
 |     4'
 | ...

s:update('sql_defer_foreign_keys', {{'+', 'value', 2}})
 | ---
 | - error: 'Argument type in operation ''+'' on field ''value'' does not match field
 |     type: expected a number'
 | ...
s:update('sql_defer_foreign_keys', {{'-', 'value', 2}})
 | ---
 | - error: 'Argument type in operation ''-'' on field ''value'' does not match field
 |     type: expected a number'
 | ...
s:update('sql_defer_foreign_keys', {{'&', 'value', 2}})
 | ---
 | - error: 'Argument type in operation ''&'' on field ''value'' does not match field
 |     type: expected a positive integer'
 | ...
s:update('sql_defer_foreign_keys', {{'|', 'value', 2}})
 | ---
 | - error: 'Argument type in operation ''|'' on field ''value'' does not match field
 |     type: expected a positive integer'
 | ...
s:update('sql_defer_foreign_keys', {{'^', 'value', 2}})
 | ---
 | - error: 'Argument type in operation ''^'' on field ''value'' does not match field
 |     type: expected a positive integer'
 | ...
s:update('sql_defer_foreign_keys', {{'!', 'value', 2}})
 | ---
 | - error: Tuple field count 3 does not match space field count 2
 | ...
s:update('sql_defer_foreign_keys', {{'#', 'value', 2}})
 | ---
 | - error: Tuple field count 1 does not match space field count 2
 | ...
s:update('sql_defer_foreign_keys', {{1, 'value', true}})
 | ---
 | - error: Illegal parameters, update operation name must be a string
 | ...
s:update('sql_defer_foreign_keys', {{{1}, 'value', true}})
 | ---
 | - error: Illegal parameters, update operation name must be a string
 | ...

s:update('sql_defer_foreign_keys', {{'=', {'value'}, true}})
 | ---
 | - error: Illegal parameters, field id must be a number or a string
 | ...
s:update('sql_defer_foreign_keys', {{'=', 1, 'new_key'}})
 | ---
 | - error: Attempt to modify a tuple field which is part of primary index in space '_session_settings'
 | ...
s:update('sql_defer_foreign_keys', {{'=', 'name', 'new_key'}})
 | ---
 | - error: Attempt to modify a tuple field which is part of primary index in space '_session_settings'
 | ...
s:update('sql_defer_foreign_keys', {{'=', 3, true}})
 | ---
 | - error: Tuple field count 3 does not match space field count 2
 | ...
s:update('sql_defer_foreign_keys', {{'=', 'some text', true}})
 | ---
 | - error: Field 'some text' was not found in the tuple
 | ...

s:update('sql_defer_foreign_keys', {{'=', 'value', 1}})
 | ---
 | - error: Session setting sql_defer_foreign_keys expected a value of type boolean
 | ...
s:update('sql_defer_foreign_keys', {{'=', 'value', {1}}})
 | ---
 | - error: Session setting sql_defer_foreign_keys expected a value of type boolean
 | ...
s:update('sql_defer_foreign_keys', {{'=', 'value', '1'}})
 | ---
 | - error: Session setting sql_defer_foreign_keys expected a value of type boolean
 | ...

-- gh-4711: Provide a user-friendly frontend for accessing session settings.
settings = box.session.settings
 | ---
 | ...
assert(settings ~= nil)
 | ---
 | - true
 | ...

s:update('sql_default_engine', {{'=', 2, 'vinyl'}})
 | ---
 | - ['sql_default_engine', 'vinyl']
 | ...
settings.sql_default_engine
 | ---
 | - vinyl
 | ...
settings.sql_default_engine = 'memtx'
 | ---
 | ...
s:get('sql_default_engine').value
 | ---
 | - memtx
 | ...
settings.sql_defer_foreign_keys = true
 | ---
 | ...
s:get('sql_defer_foreign_keys').value
 | ---
 | - true
 | ...
s:update('sql_defer_foreign_keys', {{'=', 2, false}})
 | ---
 | - ['sql_defer_foreign_keys', false]
 | ...
settings.sql_defer_foreign_keys
 | ---
 | - false
 | ...

box.execute([[set session "sql_default_engine" = 'vinyl']])
 | ---
 | - row_count: 1
 | ...
s:get('sql_default_engine').value
 | ---
 | - vinyl
 | ...
box.execute([[set session "sql_default_engine" = 'memtx']])
 | ---
 | - row_count: 1
 | ...
s:get('sql_default_engine').value
 | ---
 | - memtx
 | ...
box.execute([[set session "sql_defer_foreign_keys" = true]])
 | ---
 | - row_count: 1
 | ...
s:get('sql_defer_foreign_keys').value
 | ---
 | - true
 | ...
box.execute([[set session "sql_defer_foreign_keys" = false]])
 | ---
 | - row_count: 1
 | ...
s:get('sql_defer_foreign_keys').value
 | ---
 | - false
 | ...

settings.sql_default_engine = true
 | ---
 | - error: Session setting sql_default_engine expected a value of type string
 | ...
settings.sql_defer_foreign_keys = 'false'
 | ---
 | - error: Session setting sql_defer_foreign_keys expected a value of type boolean
 | ...
settings.sql_parser_debug = 'string'
 | ---
 | - error: Session setting sql_parser_debug expected a value of type boolean
 | ...

str = string.rep('a', 20 * 1024)
 | ---
 | ...
box.session.settings.sql_default_engine = str
 | ---
 | - error: Failed to allocate 20483 bytes in static_alloc for mp_value
 | ...

box.execute([[set session "sql_def_engine" = true]])
 | ---
 | - null
 | - Session setting sql_def_engine doesn't exist
 | ...
box.execute([[set session "sql_default_engine" = true]])
 | ---
 | - null
 | - Session setting sql_default_engine expected a value of type string
 | ...
box.execute([[set session "sql_defer_foreign_keys" = 'true']])
 | ---
 | - null
 | - Session setting sql_defer_foreign_keys expected a value of type boolean
 | ...
