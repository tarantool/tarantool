iterate = dofile('utils.lua').iterate
---
...
test_run = require('test_run').new()
---
...
test_run:cmd("push filter '(error: .builtin/.*[.]lua):[0-9]+' to '\\1'")
---
- true
...
# Tree single-part unique
---
...
space = box.schema.space.create('tweedledum')
---
...
idx1 = space:create_index('primary', { type = 'tree', parts = {1, 'string'}, unique = true})
---
...
-- Hash single-part unique
idx5 = space:create_index('i4', { type = 'hash', parts = {1, 'string'}, unique = true})
---
...
-- Hash multi-part unique
idx6 = space:create_index('i5', { type = 'hash', parts = {2, 'string', 3, 'string'}, unique = true})
---
...
space:insert{'pid_001', 'sid_001', 'tid_998', 'a'}
---
- ['pid_001', 'sid_001', 'tid_998', 'a']
...
space:insert{'pid_002', 'sid_001', 'tid_997', 'a'}
---
- ['pid_002', 'sid_001', 'tid_997', 'a']
...
space:insert{'pid_003', 'sid_002', 'tid_997', 'b'}
---
- ['pid_003', 'sid_002', 'tid_997', 'b']
...
space:insert{'pid_005', 'sid_002', 'tid_996', 'b'}
---
- ['pid_005', 'sid_002', 'tid_996', 'b']
...
space:insert{'pid_007', 'sid_003', 'tid_996', 'a'}
---
- ['pid_007', 'sid_003', 'tid_996', 'a']
...
space:insert{'pid_011', 'sid_004', 'tid_996', 'c'}
---
- ['pid_011', 'sid_004', 'tid_996', 'c']
...
space:insert{'pid_013', 'sid_005', 'tid_996', 'b'}
---
- ['pid_013', 'sid_005', 'tid_996', 'b']
...
space:insert{'pid_017', 'sid_006', 'tid_996', 'a'}
---
- ['pid_017', 'sid_006', 'tid_996', 'a']
...
space:insert{'pid_019', 'sid_005', 'tid_995', 'a'}
---
- ['pid_019', 'sid_005', 'tid_995', 'a']
...
space:insert{'pid_023', 'sid_005', 'tid_994', 'a'}
---
- ['pid_023', 'sid_005', 'tid_994', 'a']
...
-------------------------------------------------------------------------------
-- Iterator: hash single-part unique
-------------------------------------------------------------------------------
iterate('tweedledum', 'i4', 0, 1)
---
- - $pid_001$
  - $pid_002$
  - $pid_003$
  - $pid_005$
  - $pid_007$
  - $pid_011$
  - $pid_013$
  - $pid_017$
  - $pid_019$
  - $pid_023$
...
iterate('tweedledum', 'i4', 0, 1, box.index.ALL)
---
- - $pid_001$
  - $pid_002$
  - $pid_003$
  - $pid_005$
  - $pid_007$
  - $pid_011$
  - $pid_013$
  - $pid_017$
  - $pid_019$
  - $pid_023$
...
iterate('tweedledum', 'i4', 0, 1, box.index.EQ)
---
- error: HASH index  does not support selects via a partial key (expected 1 parts,
    got 0). Please Consider changing index type to TREE.
...
iterate('tweedledum', 'i4', 0, 1, box.index.EQ, 'pid_003')
---
- - $pid_003$
...
iterate('tweedledum', 'i4', 0, 1, box.index.EQ, 'pid_666')
---
- []
...
-------------------------------------------------------------------------------
-- Iterator: hash multi-part unique
-------------------------------------------------------------------------------
iterate('tweedledum', 'i5', 1, 3, box.index.ALL)
---
- - $sid_001$tid_997$
  - $sid_001$tid_998$
  - $sid_002$tid_996$
  - $sid_002$tid_997$
  - $sid_003$tid_996$
  - $sid_004$tid_996$
  - $sid_005$tid_994$
  - $sid_005$tid_995$
  - $sid_005$tid_996$
  - $sid_006$tid_996$
...
iterate('tweedledum', 'i5', 1, 3, box.index.EQ, 'sid_005')
---
- error: HASH index  does not support selects via a partial key (expected 2 parts,
    got 1). Please Consider changing index type to TREE.
...
iterate('tweedledum', 'i5', 1, 3, box.index.EQ, 'sid_005', 'tid_995')
---
- - $sid_005$tid_995$
...
iterate('tweedledum', 'i5', 1, 3, box.index.EQ, 'sid_005', 'tid_999')
---
- []
...
iterate('tweedledum', 'i5', 1, 3, box.index.EQ, 'sid_005', 'tid_995', 'a')
---
- error: Invalid key part count (expected [0..2], got 3)
...
space:drop()
---
...
-------------------------------------------------------------------------------
-- Iterator: https://github.com/tarantool/tarantool/issues/464
-- Iterator safety after changing schema
-------------------------------------------------------------------------------
space = box.schema.space.create('test', {temporary=true})
---
...
idx1 = space:create_index('primary', {type='HASH',unique=true})
---
...
idx2 = space:create_index('t1', {type='TREE',unique=true})
---
...
idx3 = space:create_index('t2', {type='TREE',unique=true})
---
...
box.space.test:insert{0}
---
- [0]
...
box.space.test:insert{1}
---
- [1]
...
gen1, param1, state1 = space.index.t1:pairs({}, {iterator = box.index.ALL})
---
...
gen1(param1, state1)
---
- <iterator state>
- [0]
...
gen2, param2, state2 = space.index.t2:pairs({}, {iterator = box.index.ALL})
---
...
gen2(param2, state2)
---
- <iterator state>
- [0]
...
id = space.index.t1.id
---
...
box.schema.index.drop(space.id, id)
---
...
gen1(param1, state1)
---
- null
...
gen2(param2, state2)
---
- <iterator state>
- [1]
...
gen2, param2, state2 = space.index.t2:pairs({}, {iterator = box.index.ALL})
---
...
gen2(param2, state2)
---
- <iterator state>
- [0]
...
gen2(param2, state2)
---
- <iterator state>
- [1]
...
space:drop()
---
...
-------------------------------------------------------------------------------
-- Iterator: https://github.com/tarantool/tarantool/issues/498
-- Iterator is not checked for wrong type; accept lowercase iterator
-------------------------------------------------------------------------------
space = box.schema.space.create('test', {temporary=true})
---
...
idx1 = space:create_index('primary', {type='TREE',unique=true})
---
...
space:insert{0}
---
- [0]
...
space:insert{1}
---
- [1]
...
gen, param, state = space.index.primary:pairs({}, {iterator = 'ALL'})
---
...
gen(param, state)
---
- <iterator state>
- [0]
...
gen(param, state)
---
- <iterator state>
- [1]
...
gen(param, state)
---
- null
...
gen, param, state = space.index.primary:pairs({}, {iterator = 'all'})
---
...
gen(param, state)
---
- <iterator state>
- [0]
...
gen(param, state)
---
- <iterator state>
- [1]
...
gen, param, state = space.index.primary:pairs({}, {iterator = 'mistake'})
---
- error: Unknown iterator type 'mistake'
...
space:select({}, {iterator = box.index.ALL})
---
- - [0]
  - [1]
...
space:select({}, {iterator = 'all'})
---
- - [0]
  - [1]
...
space:select({}, {iterator = 'mistake'})
---
- error: Unknown iterator type 'mistake'
...
space:drop()
---
...
-------------------------------------------------------------------------------
--  Restore GE iterator for HASH https://github.com/tarantool/tarantool/issues/836
-------------------------------------------------------------------------------
space = box.schema.space.create('test', {temporary=true})
---
...
idx1 = space:create_index('primary', {type='hash',unique=true})
---
...
for i = 0,5 do space:insert{i} end
---
...
space:select(2)
---
- - [2]
...
space:select(5, {iterator="GE"})
---
- error: Index 'primary' (HASH) of space 'test' (memtx) does not support requested
    iterator type
...
space:select(nil, {iterator="GE"})
---
- error: HASH index  does not support selects via a partial key (expected 1 parts,
    got 0). Please Consider changing index type to TREE.
...
space:select(5, {iterator="GT"})
---
- - [0]
  - [1]
  - [4]
...
l = space:select(nil, {limit=2, iterator="GT"})
---
...
l
---
- - [3]
  - [2]
...
l = space:select(l[#l][1], {limit=2, iterator="GT"})
---
...
l
---
- - [5]
  - [0]
...
l = space:select(l[#l][1], {limit=2, iterator="GT"})
---
...
l
---
- - [1]
  - [4]
...
l = space:select(l[#l][1], {limit=2, iterator="GT"})
---
...
l
---
- []
...
space:drop()
---
...
iterate = nil
---
...
