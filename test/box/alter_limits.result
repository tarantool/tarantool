env = require('test_run')
---
...
test_run = env.new()
---
...
test_run:cmd("push filter ".."'\\.lua.*:[0-9]+: ' to '.lua...\"]:<line>: '")
---
- true
...
-- ----------------------------------------------------------------
-- LIMITS
-- ----------------------------------------------------------------
box.schema.SYSTEM_ID_MIN
---
- 256
...
box.schema.FIELD_MAX
---
- 2147483647
...
box.schema.INDEX_FIELD_MAX
---
- 32767
...
box.schema.NAME_MAX
---
- 65000
...
box.schema.INDEX_ID
---
- 288
...
box.schema.SPACE_ID
---
- 280
...
box.schema.INDEX_MAX
---
- 128
...
box.schema.SPACE_MAX
---
- 2147483647
...
box.schema.SYSTEM_ID_MAX
---
- 511
...
box.schema.SCHEMA_ID
---
- 272
...
box.schema.FORMAT_ID_MAX
---
- 65534
...
-- ----------------------------------------------------------------
-- CREATE SPACE
-- ----------------------------------------------------------------
s = box.schema.space.create('tweedledum')
---
...
-- space already exists
box.schema.space.create('tweedledum')
---
- error: Space 'tweedledum' already exists
...
-- create if not exists
s = box.schema.space.create('tweedledum', { if_not_exists = true })
---
...
s:drop()
---
...
-- no such space
s:drop()
---
- error: Space 'tweedledum' does not exist
...
-- no such engine
box.schema.space.create('tweedleedee', { engine = 'unknown' })
---
- error: Space engine 'unknown' does not exist
...
-- explicit space id
s = box.schema.space.create('tweedledum', { id = 3000 })
---
...
s.id
---
- 3000
...
-- duplicate id
err, res = pcall(function() return box.schema.space.create('tweedledee', { id = 3000 }) end)
---
...
assert(res.code == box.error.TUPLE_FOUND)
---
- true
...
-- stupid space id
box.schema.space.create('tweedledee', { id = 'tweedledee' })
---
- error: Illegal parameters, options parameter 'id' should be of type number
...
s:drop()
---
...
-- too long space name
box.schema.space.create(string.rep('t', box.schema.NAME_MAX + 1))
---
- error: 'Failed to create space ''tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt'':
    space name is too long'
...
-- too long space engine name
box.schema.space.create('tweedleedee', { engine = string.rep('too-long', 100) })
---
- error: 'Failed to create space ''tweedleedee'': space engine name is too long'
...
-- space name limit
box.schema.space.create(string.rep('t', box.schema.NAME_MAX)..'_')
---
- error: 'Failed to create space ''tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt'':
    space name is too long'
...
s = box.schema.space.create(string.rep('t', box.schema.NAME_MAX - 1)..'_')
---
...
s.name:len()
---
- 65000
...
s:drop()
---
...
s = box.schema.space.create(string.rep('t', box.schema.NAME_MAX - 2)..'_')
---
...
s.name:len()
---
- 64999
...
s:drop()
---
...
-- space with no indexes - test update, delete, select, truncate
s = box.schema.space.create('tweedledum')
---
...
s:insert{0}
---
- error: 'No index #0 is defined in space ''tweedledum'''
...
s:select{}
---
- error: 'No index #0 is defined in space ''tweedledum'''
...
s:delete{0}
---
- error: 'No index #0 is defined in space ''tweedledum'''
...
s:update(0, {{"=", 1, 0}})
---
- error: 'No index #0 is defined in space ''tweedledum'''
...
s:insert{0}
---
- error: 'No index #0 is defined in space ''tweedledum'''
...
s.index[0]
---
- null
...
s:truncate()
---
...
s.enabled
---
- false
...
-- enabled/disabled transition
index = s:create_index('primary', { type = 'hash' })
---
...
s.enabled
---
- true
...
-- rename space - same name
s:rename('tweedledum')
---
...
s.name
---
- tweedledum
...
-- rename space - different name
s:rename('tweedledee')
---
...
s.name
---
- tweedledee
...
-- the reference from box.space[] to the space by old name should be gone
box.space['tweedledum']
---
- null
...
-- rename space - bad name
s:rename(string.rep('t', box.schema.NAME_MAX * 2))
---
- error: 'Can''t modify space ''tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt'':
    space name is too long'
...
s.name
---
- tweedledee
...
-- access to a renamed space
s:insert{0}
---
- [0]
...
s:delete{0}
---
- [0]
...
-- cleanup
s:drop()
---
...
-- check DDL on invalid space object
s:create_index('primary')
---
- error: Space 'tweedledee' does not exist
...
s:rename('xxx')
---
- error: Space 'tweedledee' does not exist
...
s:drop()
---
- error: Space 'tweedledee' does not exist
...
-- create a space with reserved id (ok, but warns in the log)
s = box.schema.space.create('test', { id = 256 })
---
...
s.id
---
- 256
...
s:drop()
---
...
s = box.schema.space.create('test', { field_count = 2 })
---
...
s.field_count
---
- 2
...
index = s:create_index('primary')
---
...
-- field_count actually works
s:insert{1}
---
- error: Tuple field count 1 does not match space field count 2
...
s:insert{1, 2}
---
- [1, 2]
...
s:insert{1, 2, 3}
---
- error: Tuple field count 3 does not match space field count 2
...
s:select{}
---
- - [1, 2]
...
FIELD_COUNT = 4
---
...
-- increase field_count -- error
box.space['_space']:update(s.id, {{"=", FIELD_COUNT + 1, 3}})
---
- error: Tuple field count 2 does not match space field count 3
...
s:select{}
---
- - [1, 2]
...
-- decrease field_count - error
box.space['_space']:update(s.id, {{"=", FIELD_COUNT + 1, 1}})
---
- error: Tuple field count 2 does not match space field count 1
...
-- remove field_count - ok
_ = box.space['_space']:update(s.id, {{"=", FIELD_COUNT + 1, 0}})
---
...
s:select{}
---
- - [1, 2]
...
-- increase field_count - error
box.space['_space']:update(s.id, {{"=", FIELD_COUNT + 1, 3}})
---
- error: Tuple field count 2 does not match space field count 3
...
s:truncate()
---
...
s:select{}
---
- []
...
-- set field_count of an empty space
_ = box.space['_space']:update(s.id, {{"=", FIELD_COUNT + 1, 3}})
---
...
s:select{}
---
- []
...
-- field_count actually works
s:insert{3, 4}
---
- error: Tuple field count 2 does not match space field count 3
...
s:insert{3, 4, 5}
---
- [3, 4, 5]
...
s:insert{3, 4, 5, 6}
---
- error: Tuple field count 4 does not match space field count 3
...
s:insert{7, 8, 9}
---
- [7, 8, 9]
...
s:select{}
---
- - [3, 4, 5]
  - [7, 8, 9]
...
-- check transition of space from enabled to disabled on
-- deletion of the primary key
s.enabled
---
- true
...
s.index[0]:drop()
---
...
s.enabled
---
- false
...
s.index[0]
---
- null
...
-- "disabled" on
-- deletion of primary key
s:drop()
---
...
-- ----------------------------------------------------------------
-- CREATE INDEX
-- ----------------------------------------------------------------
--
s = box.schema.space.create('test')
---
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
for k=1, box.schema.INDEX_MAX, 1 do
    index = s:create_index('i'..k, { type = 'hash' })
end;
---
...
-- cleanup
for k=2, box.schema.INDEX_MAX, 1 do
    s.index['i'..k]:drop()
end;
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
-- test limits enforced in key_def_check:
-- unknown index type
index = s:create_index('test', { type = 'nosuchtype' })
---
- error: Unsupported index type supplied for index 'test' in space 'test'
...
-- hash index is not unique
index = s:create_index('test', { type = 'hash', unique = false })
---
- error: 'Can''t create or modify index ''test'' in space ''test'': HASH index must
    be unique'
...
-- bitset index is unique
index = s:create_index('test', { type = 'bitset', unique = true })
---
- error: 'Can''t create or modify index ''test'' in space ''test'': BITSET can not
    be unique'
...
-- bitset index is multipart
index = s:create_index('test', { type = 'bitset', parts = {1, 'unsigned', 2, 'unsigned'}})
---
- error: 'Can''t create or modify index ''test'' in space ''test'': BITSET index key
    can not be multipart'
...
-- part count must be positive
index = s:create_index('test', { type = 'hash', parts = {}})
---
- error: Illegal parameters, options.parts must have at least one part
...
-- unknown field type
index = s:create_index('test', { type = 'hash', parts = { 2, 'nosuchtype' }})
---
- error: 'Wrong index parts: unknown field type'
...
index = s:create_index('test', { type = 'hash', parts = { 2, 'any' }})
---
- error: 'Can''t create or modify index ''test'' in space ''test'': field type ''any''
    is not supported'
...
index = s:create_index('test', { type = 'hash', parts = { 2, 'array' }})
---
- error: 'Can''t create or modify index ''test'' in space ''test'': field type ''array''
    is not supported'
...
index = s:create_index('test', { type = 'hash', parts = { 2, 'map' }})
---
- error: 'Can''t create or modify index ''test'' in space ''test'': field type ''map''
    is not supported'
...
index = s:create_index('test', { type = 'rtree', parts = { 2, 'nosuchtype' }})
---
- error: 'Wrong index parts: unknown field type'
...
index = s:create_index('test', { type = 'rtree', parts = { 2, 'any' }})
---
- error: 'Can''t create or modify index ''test'' in space ''test'': RTREE index field
    type must be ARRAY'
...
index = s:create_index('test', { type = 'rtree', parts = { 2, 'map' }})
---
- error: 'Can''t create or modify index ''test'' in space ''test'': RTREE index field
    type must be ARRAY'
...
-- bad field no
index = s:create_index('test', { type = 'hash', parts = { 'qq', 'nosuchtype' }})
---
- error: 'Illegal parameters, options.parts[1]: field was not found by name ''qq'''
...
-- big field no
index = s:create_index('test', { type = 'hash', parts = { box.schema.FIELD_MAX, 'unsigned' }})
---
- error: 'Can''t create or modify index ''test'' in space ''test'': field no is too
    big'
...
index = s:create_index('test', { type = 'hash', parts = { box.schema.FIELD_MAX - 1, 'unsigned' }})
---
- error: 'Can''t create or modify index ''test'' in space ''test'': field no is too
    big'
...
index = s:create_index('test', { type = 'hash', parts = { box.schema.FIELD_MAX + 90, 'unsigned' }})
---
- error: 'Can''t create or modify index ''test'' in space ''test'': field no is too
    big'
...
index = s:create_index('test', { type = 'hash', parts = { box.schema.INDEX_FIELD_MAX + 1, 'unsigned' }})
---
...
index = s:create_index('t1', { type = 'hash', parts = { box.schema.INDEX_FIELD_MAX, 'unsigned' }})
---
...
index = s:create_index('t2', { type = 'hash', parts = { box.schema.INDEX_FIELD_MAX - 1, 'unsigned' }})
---
...
-- cleanup
s:drop()
---
...
s = box.schema.space.create('test')
---
...
-- same part can't be indexed twice
index = s:create_index('t1', { type = 'hash', parts = { 1, 'unsigned', 1, 'string' }})
---
- error: 'Can''t create or modify index ''t1'' in space ''test'': same key part is
    indexed twice'
...
-- a lot of key parts
parts = {}
---
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
for k=1, box.schema.INDEX_PART_MAX + 1, 1 do
    table.insert(parts, k)
    table.insert(parts, 'unsigned')
end;
---
...
#parts;
---
- 512
...
index = s:create_index('t1', { type = 'hash', parts = parts});
---
- error: 'Can''t create or modify index ''t1'' in space ''test'': too many key parts'
...
parts = {};
---
...
for k=1, box.schema.INDEX_PART_MAX, 1 do
    table.insert(parts, k + 1)
    table.insert(parts, 'unsigned')
end;
---
...
#parts;
---
- 510
...
index = s:create_index('t1', { type = 'hash', parts = parts});
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
-- this is actually incorrect since parts is a lua table
-- and length of a lua table which has index 0 set is not correct
#s.index[0].parts
---
- 255
...
-- cleanup
s:drop()
---
...
-- check costraints in tuple_format_new()
s = box.schema.space.create('test')
---
...
index = s:create_index('t1', { type = 'hash' })
---
...
-- field type contradicts field type of another index
index = s:create_index('t2', { type = 'hash', parts = { 1, 'string' }})
---
- error: Field 1 has type 'unsigned' in one index, but type 'string' in another
...
-- ok
index = s:create_index('t2', { type = 'hash', parts = { 2, 'string' }})
---
...
-- don't allow drop of the primary key in presence of other keys
s.index[0]:drop()
---
- error: Can't drop primary key in space 'test' while secondary keys exist
...
-- cleanup
s:drop()
---
...
-- index name, name manipulation
s = box.schema.space.create('test')
---
...
index = s:create_index('primary', { type = 'hash' })
---
...
-- space cache is updated correctly
s.index[0].name
---
- primary
...
s.index[0].id
---
- 0
...
s.index[0].type
---
- HASH
...
s.index['primary'].name
---
- primary
...
s.index['primary'].id
---
- 0
...
s.index['primary'].type
---
- HASH
...
s.index.primary.name
---
- primary
...
s.index.primary.id
---
- 0
...
-- other properties are preserved
s.index.primary.type
---
- HASH
...
s.index.primary.unique
---
- true
...
s.index.primary:rename('new')
---
...
s.index[0].name
---
- new
...
s.index.primary
---
- null
...
s.index.new.name
---
- new
...
-- too long name
s.index[0]:rename(string.rep('t', box.schema.NAME_MAX)..'_')
---
- error: 'Can''t create or modify index ''tttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttttt''
    in space ''test'': index name is too long'
...
s.index[0].name
---
- new
...
s.index[0]:rename(string.rep('t', box.schema.NAME_MAX - 1)..'_')
---
...
s.index[0].name:len()
---
- 65000
...
s.index[0]:rename(string.rep('t', box.schema.NAME_MAX - 2)..'_')
---
...
s.index[0].name:len()
---
- 64999
...
s.index[0]:rename('primary')
---
...
s.index.primary.name
---
- primary
...
-- cleanup
s:drop()
---
...
-- modify index
s = box.schema.space.create('test')
---
...
index = s:create_index('primary', { type = 'hash' })
---
...
-- correct error on misuse of alter
s.index.primary.alter({unique=false})
---
- error: 'builtin/box/schema.lua..."]:<line>: Use index:alter(...) instead of index.alter(...)'
...
s.index.primary:alter({unique=false})
---
- error: 'Can''t create or modify index ''primary'' in space ''test'': primary key
    must be unique'
...
-- unique -> non-unique, index type
s.index.primary:alter({type='tree', unique=false, name='pk'})
---
- error: 'Can''t create or modify index ''pk'' in space ''test'': primary key must
    be unique'
...
s.index.primary.name
---
- primary
...
s.index.primary.id
---
- 0
...
s.index.pk.type
---
- error: '[string "return s.index.pk.type "]:1: attempt to index field ''pk'' (a nil
    value)'
...
s.index.pk.unique
---
- error: '[string "return s.index.pk.unique "]:1: attempt to index field ''pk'' (a
    nil value)'
...
s.index.pk:rename('primary')
---
- error: '[string "return s.index.pk:rename(''primary'') "]:1: attempt to index field
    ''pk'' (a nil value)'
...
index = s:create_index('second', { type = 'tree', parts = {  2, 'string' } })
---
...
s.index.second.id
---
- 1
...
index = s:create_index('third', { type = 'hash', parts = {  3, 'unsigned' } })
---
...
err, res = pcall(function() return s.index.third:rename('second') end)
---
...
assert(res.code == box.error.TUPLE_FOUND)
---
- true
...
s.index.third.id
---
- 2
...
s.index.second:drop()
---
...
s.index.third:alter({name = 'second'})
---
...
s.index.third
---
- null
...
s.index.second.name
---
- second
...
s.index.second.id
---
- 2
...
s:drop()
---
...
-- ----------------------------------------------------------------
-- BUILD INDEX: changes of a non-empty index
-- ----------------------------------------------------------------
s = box.schema.space.create('full')
---
...
index = s:create_index('primary', { type = 'tree', parts =  { 1, 'string' }})
---
...
s:insert{'No such movie', 999}
---
- ['No such movie', 999]
...
s:insert{'Barbara', 2012}
---
- ['Barbara', 2012]
...
s:insert{'Cloud Atlas', 2012}
---
- ['Cloud Atlas', 2012]
...
s:insert{'Almanya - Willkommen in Deutschland', 2011}
---
- ['Almanya - Willkommen in Deutschland', 2011]
...
s:insert{'Halt auf freier Strecke', 2011}
---
- ['Halt auf freier Strecke', 2011]
...
s:insert{'Homevideo', 2011}
---
- ['Homevideo', 2011]
...
s:insert{'Die Fremde', 2010}
---
- ['Die Fremde', 2010]
...
-- create index with data
index = s:create_index('year', { type = 'tree', unique=false, parts = { 2, 'unsigned'} })
---
...
s.index.primary:select{}
---
- - ['Almanya - Willkommen in Deutschland', 2011]
  - ['Barbara', 2012]
  - ['Cloud Atlas', 2012]
  - ['Die Fremde', 2010]
  - ['Halt auf freier Strecke', 2011]
  - ['Homevideo', 2011]
  - ['No such movie', 999]
...
-- a duplicate in the created index
index = s:create_index('nodups', { type = 'tree', unique=true, parts = { 2, 'unsigned'} })
---
- error: Duplicate key exists in unique index "nodups" in space "full" with old tuple
    - ["Barbara", 2012] and new tuple - ["Cloud Atlas", 2012]
...
-- change of non-unique index to unique: same effect
s.index.year:alter({unique=true})
---
- error: Duplicate key exists in unique index "year" in space "full" with old tuple
    - ["Barbara", 2012] and new tuple - ["Cloud Atlas", 2012]
...
s.index.primary:select{}
---
- - ['Almanya - Willkommen in Deutschland', 2011]
  - ['Barbara', 2012]
  - ['Cloud Atlas', 2012]
  - ['Die Fremde', 2010]
  - ['Halt auf freier Strecke', 2011]
  - ['Homevideo', 2011]
  - ['No such movie', 999]
...
-- ambiguous field type
index = s:create_index('string', { type = 'tree', unique =  false, parts = { 2, 'string'}})
---
- error: Field 2 has type 'unsigned' in one index, but type 'string' in another
...
-- create index on a non-existing field
index = s:create_index('nosuchfield', { type = 'tree', unique = true, parts = { 3, 'string'}})
---
- error: Tuple field 3 required by space format is missing
...
s.index.year:drop()
---
...
s:insert{'Der Baader Meinhof Komplex', '2009 '}
---
- ['Der Baader Meinhof Komplex', '2009 ']
...
-- create an index on a field with a wrong type
index = s:create_index('year', { type = 'tree', unique = false, parts = { 2, 'unsigned'}})
---
- error: 'Tuple field 2 type does not match one required by operation: expected unsigned,
    got string'
...
-- a field is missing
s:replace{'Der Baader Meinhof Komplex'}
---
- ['Der Baader Meinhof Komplex']
...
index = s:create_index('year', { type = 'tree', unique = false, parts = { 2, 'unsigned'}})
---
- error: Tuple field 2 required by space format is missing
...
s:drop()
---
...
-- unique -> non-unique transition
s = box.schema.space.create('test')
---
...
-- primary key must be unique
index = s:create_index('primary', { unique = false })
---
- error: 'Can''t create or modify index ''primary'' in space ''test'': primary key
    must be unique'
...
-- create primary key
index = s:create_index('primary', { type = 'hash' })
---
...
s:insert{1, 1}
---
- [1, 1]
...
index = s:create_index('secondary', { type = 'tree', unique = false, parts = {2, 'unsigned'}})
---
...
s:insert{2, 1}
---
- [2, 1]
...
s.index.secondary:alter{ unique = true }
---
- error: Duplicate key exists in unique index "secondary" in space "test" with old
    tuple - [1, 1] and new tuple - [2, 1]
...
s:delete{2}
---
- [2, 1]
...
s.index.secondary:alter{ unique = true }
---
...
s:insert{2, 1}
---
- error: Duplicate key exists in unique index "secondary" in space "test" with old
    tuple - [1, 1] and new tuple - [2, 1]
...
s:insert{2, 2}
---
- [2, 2]
...
s.index.secondary:alter{ unique = false}
---
...
s:insert{3, 2}
---
- [3, 2]
...
-- changing index id is not allowed
s.index.secondary:alter{ id = 10}
---
- error: Attempt to modify a tuple field which is part of primary index in space '_index'
...
s:drop()
---
...
-- ----------------------------------------------------------------
-- SPACE CACHE: what happens to a space cache when an object is gone
-- ----------------------------------------------------------------
s = box.schema.space.create('test')
---
...
s1 = s
---
...
index = s:create_index('primary')
---
...
s1.index.primary.id
---
- 0
...
primary = s1.index.primary
---
...
s.index.primary:drop()
---
...
primary.id
---
- 0
...
primary:select{}
---
- error: 'No index #0 is defined in space ''test'''
...
s:drop()
---
...
-- @todo: add a test case for dangling iterator (currently no checks
-- for a dangling iterator in the code
-- ----------------------------------------------------------------
-- ----------------------------------------------------------------
-- RECOVERY: check that all indexes are correctly built
-- during recovery regardless of when they are created
-- ----------------------------------------------------------------
-- primary, secondary keys in a snapshot
s_empty = box.schema.space.create('s_empty')
---
...
indexe1 = s_empty:create_index('primary')
---
...
indexe2 = s_empty:create_index('secondary', { type = 'hash', unique = true, parts = {2, 'unsigned'}})
---
...
s_full = box.schema.space.create('s_full')
---
...
indexf1 = s_full:create_index('primary')
---
...
indexf2 = s_full:create_index('secondary', { type = 'hash', unique = true, parts = {2, 'unsigned'}})
---
...
s_full:insert{1, 1, 'a'}
---
- [1, 1, 'a']
...
s_full:insert{2, 2, 'b'}
---
- [2, 2, 'b']
...
s_full:insert{3, 3, 'c'}
---
- [3, 3, 'c']
...
s_full:insert{4, 4, 'd'}
---
- [4, 4, 'd']
...
s_full:insert{5, 5, 'e'}
---
- [5, 5, 'e']
...
s_nil = box.schema.space.create('s_nil')
---
...
s_drop = box.schema.space.create('s_drop')
---
...
box.snapshot()
---
- ok
...
s_drop:drop()
---
...
indexn1 = s_nil:create_index('primary', { type = 'hash'})
---
...
s_nil:insert{1,2,3,4,5,6}
---
- [1, 2, 3, 4, 5, 6]
...
s_nil:insert{7, 8, 9, 10, 11,12}
---
- [7, 8, 9, 10, 11, 12]
...
indexn2 = s_nil:create_index('secondary', { type = 'tree', unique=false, parts = {2, 'unsigned', 3, 'unsigned', 4, 'unsigned'}})
---
...
s_nil:insert{13, 14, 15, 16, 17}
---
- [13, 14, 15, 16, 17]
...
r_empty = box.schema.space.create('r_empty')
---
...
indexe1 = r_empty:create_index('primary')
---
...
indexe2 = r_empty:create_index('secondary', { type = 'hash', unique = true, parts = {2, 'unsigned'}})
---
...
r_full = box.schema.space.create('r_full')
---
...
indexf1 = r_full:create_index('primary', { type = 'tree', unique = true, parts = {1, 'unsigned'}})
---
...
indexf2 = r_full:create_index('secondary', { type = 'hash', unique = true, parts = {2, 'unsigned'}})
---
...
r_full:insert{1, 1, 'a'}
---
- [1, 1, 'a']
...
r_full:insert{2, 2, 'b'}
---
- [2, 2, 'b']
...
r_full:insert{3, 3, 'c'}
---
- [3, 3, 'c']
...
r_full:insert{4, 4, 'd'}
---
- [4, 4, 'd']
...
r_full:insert{5, 5, 'e'}
---
- [5, 5, 'e']
...
indexf1 = s_full:create_index('multikey', { type = 'tree', unique = true, parts = { 2, 'unsigned', 3, 'string'}})
---
...
s_full:insert{6, 6, 'f'}
---
- [6, 6, 'f']
...
s_full:insert{7, 7, 'g'}
---
- [7, 7, 'g']
...
s_full:insert{8, 8, 'h'}
---
- [8, 8, 'h']
...
r_disabled = box.schema.space.create('r_disabled')
---
...
test_run:cmd("restart server default")
s_empty = box.space['s_empty']
---
...
s_full = box.space['s_full']
---
...
s_nil = box.space['s_nil']
---
...
s_drop = box.space['s_drop']
---
...
r_empty = box.space['r_empty']
---
...
r_full = box.space['r_full']
---
...
r_disabled = box.space['r_disabled']
---
...
s_drop
---
- null
...
s_empty.index.primary.type
---
- TREE
...
s_full.index.primary.type
---
- TREE
...
r_empty.index.primary.type
---
- TREE
...
r_full.index.primary.type
---
- TREE
...
s_nil.index.primary.type
---
- HASH
...
s_empty.index.primary.name
---
- primary
...
s_full.index.primary.name
---
- primary
...
r_empty.index.primary.name
---
- primary
...
r_full.index.primary.name
---
- primary
...
s_nil.index.primary.name
---
- primary
...
s_empty.enabled
---
- true
...
s_full.enabled
---
- true
...
r_empty.enabled
---
- true
...
r_full.enabled
---
- true
...
s_nil.enabled
---
- true
...
r_disabled.enabled
---
- false
...
s_empty.index.secondary.name
---
- secondary
...
s_full.index.secondary.name
---
- secondary
...
r_empty.index.secondary.name
---
- secondary
...
r_full.index.secondary.name
---
- secondary
...
s_nil.index.secondary.name
---
- secondary
...
s_empty.index.primary:count(1)
---
- 0
...
s_full.index.primary:count(1)
---
- 1
...
r_empty.index.primary:count(1)
---
- 0
...
r_full.index.primary:count(1)
---
- 1
...
s_nil.index.primary:count(1)
---
- 1
...
s_empty.index.secondary:count(1)
---
- 0
...
s_full.index.secondary:count(1)
---
- 1
...
r_empty.index.secondary:count(1)
---
- 0
...
r_full.index.secondary:count(1)
---
- 1
...
s_nil.index.secondary:count(1)
---
- 0
...
-- gh-503 if_not_exits option in create index
i1 = s_empty:create_index("test")
---
...
i1:select{}
---
- []
...
i2 = s_empty:create_index("test")
---
- error: Index 'test' already exists
...
i3 = s_empty:create_index("test", { if_not_exists = true } )
---
...
i3:select{}
---
- []
...
-- cleanup
s_empty:drop()
---
...
s_full:drop()
---
...
r_empty:drop()
---
...
r_full:drop()
---
...
s_nil:drop()
---
...
r_disabled:drop()
---
...
--
-- @todo usability
-- ---------
-- - space name in all error messages!
--         error: Duplicate key exists in unique index 1 (ugly)
--
-- @todo features
--------
-- - ffi function to enable/disable space
--
test_run:cmd("clear filter")
---
- true
...
