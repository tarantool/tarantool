_space = box.space[box.schema.SPACE_ID]
---
...
_index = box.space[box.schema.INDEX_ID]
---
...
ADMIN = 1
---
...
env = require('test_run')
---
...
test_run = env.new()
---
...
test_run:cmd("push filter ', .lsn.: [0-9]+' to ''")
---
- true
...
utils = require('utils')
---
...
EMPTY_MAP = utils.setmap({})
---
...
--
-- Test insertion into a system space - verify that
-- mandatory fields are required.
--
err, res = pcall(function() return _space:insert{_space.id, ADMIN, 'test', 'memtx', 0, EMPTY_MAP, {}} end)
---
...
assert(res.code == box.error.TUPLE_FOUND)
---
- true
...
--
-- Bad space id
--
_space:insert{'hello', 'world', 'test', 'memtx', 0, EMPTY_MAP, {}}
---
- error: 'Tuple field 1 (id) type does not match one required by operation: expected
    unsigned, got string'
...
--
-- Can't create a space which has wrong field count - field_count must be NUM
--
err, res = pcall(function() return _space:insert{_space.id, ADMIN, 'test', 'world', 0, EMPTY_MAP, {}} end)
---
...
assert(res.code == box.error.TUPLE_FOUND)
---
- true
...
--
-- There is already a tuple for the system space
--
err, res = pcall(function() return _space:insert{_space.id, ADMIN, '_space', 'memtx', 0, EMPTY_MAP, {}} end)
---
...
assert(res.code == box.error.TUPLE_FOUND)
---
- true
...
_space:insert{_index.id, ADMIN, '_index', 'memtx', 0, EMPTY_MAP, {}}
---
- error: 'Duplicate key exists in unique index "primary" in space "_space" with old
    tuple - [288, 1, "_index", "memtx", 0, {}, [{"name": "id", "type": "unsigned"},
    {"name": "iid", "type": "unsigned"}, {"name": "name", "type": "string"}, {"name":
    "type", "type": "string"}, {"name": "opts", "type": "map"}, {"name": "parts",
    "type": "array"}]] and new tuple - [288, 1, "_index", "memtx", 0, {}, []]'
...
--
-- Can't drop a space with an index
--
_space:delete{_space.id}
---
- error: 'Can''t drop space ''_space'': the space has indexes'
...
_space:delete{_index.id}
---
- error: 'Can''t drop space ''_index'': the space has indexes'
...
--
-- Can't drop a system space
--
_space:delete{box.schema.VINYL_DEFERRED_DELETE_ID}
---
- error: 'Can''t drop space ''_vinyl_deferred_delete'': the space is a system space'
...
--
-- Can't change properties of a space
--
_space:update({_space.id}, {{'-', 1, 1}})
---
- error: Attempt to modify a tuple field which is part of primary index in space '_space'
...
_space:update({_space.id}, {{'-', 1, 2}})
---
- error: Attempt to modify a tuple field which is part of primary index in space '_space'
...
--
-- Create a space
--
t = _space:insert{box.internal.generate_space_id(false), ADMIN, 'hello', 'memtx', 0, EMPTY_MAP, {}}
---
...
-- Check that a space exists
space = box.space[t[1]]
---
...
space.id
---
- 512
...
space.field_count
---
- 0
...
space.index[0]
---
- null
...
--
-- check dml - the space has no indexes yet, but must not crash on DML
--
space:select{0}
---
- error: 'No index #0 is defined in space ''hello'''
...
space:insert{0, 0}
---
- error: 'No index #0 is defined in space ''hello'''
...
space:replace{0, 0}
---
- error: 'No index #0 is defined in space ''hello'''
...
space:update({0}, {{'+', 1, 1}})
---
- error: 'No index #0 is defined in space ''hello'''
...
space:delete{0}
---
- error: 'No index #0 is defined in space ''hello'''
...
t = _space:delete{space.id}
---
...
space_deleted = box.space[t[1]]
---
...
space_deleted
---
- null
...
space:replace{0}
---
- error: Space '512' does not exist
...
err, res = pcall(function() return _index:insert{_space.id, 0, 'primary', 'tree', {unique=true}, {{0, 'unsigned'}}} end)
---
...
assert(res.code == box.error.TUPLE_FOUND)
---
- true
...
_index:replace{_space.id, 0, 'primary', 'tree', {unique=true}, {{0, 'unsigned'}}}
---
- [280, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned']]]
...
err, res = pcall(function() return _index:insert{_index.id, 0, 'primary', 'tree', {unique=true}, {{0, 'unsigned'}, {1, 'unsigned'}}} end)
---
...
assert(res.code == box.error.TUPLE_FOUND)
---
- true
...
_index:replace{_index.id, 0, 'primary', 'tree', {unique=true}, {{0, 'unsigned'}, {1, 'unsigned'}}}
---
- [288, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned'], [1, 'unsigned']]]
...
-- access_sysview.test changes output of _index:select{}.
-- let's change _index space in such a way that it will be
-- uniformn weather access_sysview.test is completed of not.
box.space._space.index.owner:alter{parts = {2, 'unsigned'}}
---
...
box.space._vspace.index.owner:alter{parts = {2, 'unsigned'}}
---
...
_index:select{}
---
- - [272, 0, 'primary', 'tree', {'unique': true}, [[0, 'string']]]
  - [276, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned']]]
  - [276, 1, 'name', 'tree', {'unique': true}, [[1, 'string']]]
  - [277, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned']]]
  - [277, 1, 'name', 'tree', {'unique': true}, [[1, 'string']]]
  - [280, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned']]]
  - [280, 1, 'owner', 'tree', {'unique': false}, [[1, 'unsigned']]]
  - [280, 2, 'name', 'tree', {'unique': true}, [[2, 'string']]]
  - [281, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned']]]
  - [281, 1, 'owner', 'tree', {'unique': false}, [[1, 'unsigned']]]
  - [281, 2, 'name', 'tree', {'unique': true}, [[2, 'string']]]
  - [284, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned']]]
  - [284, 1, 'owner', 'tree', {'unique': false}, [[1, 'unsigned']]]
  - [284, 2, 'name', 'tree', {'unique': true}, [[2, 'string']]]
  - [285, 0, 'primary', 'hash', {'unique': true}, [[0, 'unsigned']]]
  - [286, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned']]]
  - [286, 1, 'owner', 'tree', {'unique': false}, [[1, 'unsigned']]]
  - [286, 2, 'name', 'tree', {'unique': true}, [[2, 'string']]]
  - [288, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned'], [1, 'unsigned']]]
  - [288, 2, 'name', 'tree', {'unique': true}, [[0, 'unsigned'], [2, 'string']]]
  - [289, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned'], [1, 'unsigned']]]
  - [289, 2, 'name', 'tree', {'unique': true}, [[0, 'unsigned'], [2, 'string']]]
  - [296, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned']]]
  - [296, 1, 'owner', 'tree', {'unique': false}, [[1, 'unsigned']]]
  - [296, 2, 'name', 'tree', {'unique': true}, [[2, 'string']]]
  - [297, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned']]]
  - [297, 1, 'owner', 'tree', {'unique': false}, [[1, 'unsigned']]]
  - [297, 2, 'name', 'tree', {'unique': true}, [[2, 'string']]]
  - [304, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned']]]
  - [304, 1, 'owner', 'tree', {'unique': false}, [[1, 'unsigned']]]
  - [304, 2, 'name', 'tree', {'unique': true}, [[2, 'string']]]
  - [305, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned']]]
  - [305, 1, 'owner', 'tree', {'unique': false}, [[1, 'unsigned']]]
  - [305, 2, 'name', 'tree', {'unique': true}, [[2, 'string']]]
  - [312, 0, 'primary', 'tree', {'unique': true}, [[1, 'unsigned'], [2, 'string'],
      [3, 'scalar']]]
  - [312, 1, 'owner', 'tree', {'unique': false}, [[0, 'unsigned']]]
  - [312, 2, 'object', 'tree', {'unique': false}, [[2, 'string'], [3, 'scalar']]]
  - [313, 0, 'primary', 'tree', {'unique': true}, [[1, 'unsigned'], [2, 'string'],
      [3, 'scalar']]]
  - [313, 1, 'owner', 'tree', {'unique': false}, [[0, 'unsigned']]]
  - [313, 2, 'object', 'tree', {'unique': false}, [[2, 'string'], [3, 'scalar']]]
  - [320, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned']]]
  - [320, 1, 'uuid', 'tree', {'unique': true}, [[1, 'string']]]
  - [328, 0, 'primary', 'tree', {'unique': true}, [[0, 'string']]]
  - [328, 1, 'space_id', 'tree', {'unique': false}, [[1, 'unsigned']]]
  - [330, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned']]]
  - [340, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned']]]
  - [340, 1, 'sequence', 'tree', {'unique': false}, [[1, 'unsigned']]]
  - [341, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned']]]
  - [341, 1, 'sequence', 'tree', {'unique': false}, [[1, 'unsigned']]]
  - [356, 0, 'primary', 'tree', {'unique': true}, [[0, 'string'], [1, 'unsigned']]]
  - [356, 1, 'child_id', 'tree', {'unique': false}, [[1, 'unsigned']]]
  - [364, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned'], [1, 'string']]]
  - [372, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned'], [1, 'unsigned']]]
  - [372, 1, 'fid', 'tree', {'unique': false}, [[2, 'unsigned']]]
  - [380, 0, 'primary', 'tree', {'unique': true}, [[0, 'string']]]
...
-- modify indexes of a system space
_index:delete{_index.id, 0}
---
- error: Can't drop the primary key in a system space, space '_index'
...
_space:insert{1000, ADMIN, 'hello', 'memtx', 0, EMPTY_MAP, {}}
---
- [1000, 1, 'hello', 'memtx', 0, {}, []]
...
_index:insert{1000, 0, 'primary', 'tree', {unique=true}, {{0, 'unsigned'}}}
---
- [1000, 0, 'primary', 'tree', {'unique': true}, [[0, 'unsigned']]]
...
box.space[1000]:insert{0, 'hello, world'}
---
- [0, 'hello, world']
...
box.space[1000]:drop()
---
...
box.space[1000]
---
- null
...
-- test that after disabling triggers on system spaces we still can
-- get a correct snapshot
_index:run_triggers(false)
---
...
_space:run_triggers(false)
---
...
box.snapshot()
---
- ok
...
test_run:cmd("restart server default with cleanup=1")
utils = require('utils')
---
...
EMPTY_MAP = utils.setmap({})
---
...
ADMIN = 1
---
...
box.space['_space']:insert{1000, ADMIN, 'test', 'memtx', 0, EMPTY_MAP, {}}
---
- [1000, 1, 'test', 'memtx', 0, {}, []]
...
box.space[1000].id
---
- 1000
...
box.space['_space']:delete{1000}
---
- [1000, 1, 'test', 'memtx', 0, {}, []]
...
box.space[1000]
---
- null
...
--------------------------------------------------------------------------------
-- #197: box.space.space0:len() returns an error if there is no index
--------------------------------------------------------------------------------
space = box.schema.space.create('gh197')
---
...
space:len()
---
- 0
...
space:truncate()
---
...
space:pairs():totable()
---
- []
...
space:drop()
---
...
--------------------------------------------------------------------------------
-- #198: names like '' and 'x.y' and 5 and 'primary ' are legal
--
-- The result of this test is superseded by the change made
-- in scope of gh-2914, which allows all printable characters for
-- identifiers.
--
--------------------------------------------------------------------------------
-- invalid identifiers
s = box.schema.space.create('invalid.identifier')
---
...
s.name
---
- invalid.identifier
...
s:drop()
---
...
s = box.schema.space.create('invalid identifier')
---
...
s.name
---
- invalid identifier
...
s:drop()
---
...
s = box.schema.space.create('primary ')
---
...
'|'..s.name..'|'
---
- '|primary |'
...
s:drop()
---
...
s = box.schema.space.create('5')
---
...
s.name
---
- '5'
...
s:drop()
---
...
box.schema.space.create('')
---
- error: Invalid identifier '' (expected printable symbols only or it is too long)
...
-- valid identifiers
box.schema.space.create('_Abcde'):drop()
---
...
box.schema.space.create('_5'):drop()
---
...
box.schema.space.create('valid_identifier'):drop()
---
...
-- some OS-es ship incomplete locales, breaking ID validation
weird_chars=''
---
...
if jit.os~='OSX' and jit.os~='BSD' then weird_chars='空間' end
---
...
box.schema.space.create('ынтыпрайзный_'..weird_chars):drop() -- unicode
---
...
box.schema.space.create('utf8_наше_Фсё'):drop() -- unicode
---
...
space = box.schema.space.create('test')
---
...
-- invalid identifiers
i = space:create_index('invalid.identifier')
---
...
i.name
---
- invalid.identifier
...
i:drop()
---
...
i = space:create_index('invalid identifier')
---
...
i.name
---
- invalid identifier
...
i:drop()
---
...
i = space:create_index('primary ')
---
...
'|'..i.name..'|'
---
- '|primary |'
...
i:drop()
---
...
i = space:create_index('5')
---
...
i.name
---
- '5'
...
i:drop()
---
...
space:create_index('')
---
- error: Invalid identifier '' (expected printable symbols only or it is too long)
...
space:drop()
---
...
-- gh-57 Confusing error message when trying to create space with a
-- duplicate id
auto = box.schema.space.create('auto_original')
---
...
err, res = pcall(function() return box.schema.space.create('auto', {id = auto.id}) end)
---
...
assert(res.code == box.error.TUPLE_FOUND)
---
- true
...
box.schema.space.drop('auto')
---
- error: Illegal parameters, space_id should be a number
...
box.schema.space.create('auto_original', {id = auto.id})
---
- error: Space 'auto_original' already exists
...
auto:drop()
---
...
-- ------------------------------------------------------------------
-- gh-281 Crash after rename + replace + delete with multi-part index
-- ------------------------------------------------------------------
s = box.schema.space.create('space')
---
...
index = s:create_index('primary', {unique = true, parts = {1, 'unsigned', 2, 'string'}})
---
...
s:insert{1, 'a'}
---
- [1, 'a']
...
box.space.space.index.primary:rename('secondary')
---
...
box.space.space:replace{1,'The rain in Spain'}
---
- [1, 'The rain in Spain']
...
box.space.space:delete{1,'The rain in Spain'}
---
- [1, 'The rain in Spain']
...
box.space.space:select{}
---
- - [1, 'a']
...
s:drop()
---
...
-- ------------------------------------------------------------------
-- gh-362 Appropriate error messages in create_index
-- ------------------------------------------------------------------
s = box.schema.space.create(42)
---
- error: Illegal parameters, name should be a string
...
s = box.schema.space.create("test", "bug")
---
- error: Illegal parameters, options should be a table
...
s = box.schema.space.create("test", {unknown = 'param'})
---
- error: Illegal parameters, unexpected option 'unknown'
...
s = box.schema.space.create("test")
---
...
index = s:create_index('primary', {unique = true, parts = {0, 'unsigned', 1, 'string'}})
---
- error: 'Illegal parameters, invalid index parts: field_no must be one-based'
...
index = s:create_index('primary', {unique = true, parts = {'unsigned', 1, 'string', 2}})
---
- error: 'Illegal parameters, options.parts[1]: field was not found by name ''unsigned'''
...
index = s:create_index('primary', {unique = true, parts = 'bug'})
---
- error: Illegal parameters, options parameter 'parts' should be of type table
...
index = s:create_index('test', {unique = true, parts = {1, 'unsigned'}, mmap = true})
---
- error: Illegal parameters, unexpected option 'mmap'
...
s:drop()
---
...
-- ------------------------------------------------------------------
-- gh-155 Tarantool failure on simultaneous space:drop()
-- ------------------------------------------------------------------
test_run:cmd("setopt delimiter ';'")
---
- true
...
local fiber = require('fiber')
local W = 4
local N = 50
local ch = fiber.channel(W)
for i=1,W do
    fiber.create(function()
        for k=1,N do
            local space_id = math.random(2147483647)
            local space = box.schema.space.create(string.format('space_%d', space_id))
            space:create_index('pk', { type = 'tree' })
            space:drop()
        end
        ch:put(true)
    end)
end
for i=1,W do
    ch:get()
end
test_run:cmd("setopt delimiter ''");
---
...
-- ------------------------------------------------------------------
-- Lower and upper cases
-- ------------------------------------------------------------------
space = box.schema.space.create("test")
---
...
_ = space:create_index('primary', { parts = {1, 'nUmBeR', 2, 'StRinG'}})
---
...
space.index.primary.parts[1].type == 'number'
---
- true
...
space.index.primary.parts[2].type == 'string'
---
- true
...
box.space._index:get({space.id, 0})[6]
---
- [[0, 'number'], [1, 'string']]
...
space:drop()
---
...
-- ------------------------------------------------------------------
-- Aliases
-- ------------------------------------------------------------------
space = box.schema.space.create("test")
---
...
_ = space:create_index('primary', { parts = {1, 'uint', 2, 'int', 3, 'str'}})
---
...
space.index.primary.parts[1].type == 'unsigned'
---
- true
...
space.index.primary.parts[2].type == 'integer'
---
- true
...
space.index.primary.parts[3].type == 'string'
---
- true
...
box.space._index:get({space.id, 0})[6]
---
- [[0, 'unsigned'], [1, 'integer'], [2, 'string']]
...
space:drop()
---
...
-- ------------------------------------------------------------------
-- Tarantool 1.6 compatibility
-- ------------------------------------------------------------------
-- gh-1534: deprecate 'num' data type for unsigned integers
space = box.schema.space.create("test")
---
...
_ = space:create_index('primary', { parts = {1, 'num'}})
---
...
space.index.primary.parts[1].type == 'unsigned'
---
- true
...
box.space._index:get({space.id, 0})[6]
---
- [[0, 'unsigned']]
...
space:drop()
---
...
-- data dictionary compatibility is checked by upgrade.test.lua
test_run:cmd("clear filter")
---
- true
...
--
-- create_index() does not modify index options
--
s = box.schema.space.create('test', {engine='vinyl'})
---
...
opts = {parts={1, 'unsigned'}}
---
...
_ = s:create_index('pk', opts)
---
...
opts
---
- parts:
  - 1
  - unsigned
...
s:drop()
---
...
--
-- gh-2074: alter a primary key
--
s = box.schema.space.create('test')
---
...
_ = s:create_index('pk')
---
...
s:insert{1, 1}
---
- [1, 1]
...
s:insert{2, 2}
---
- [2, 2]
...
s:insert{3, 3}
---
- [3, 3]
...
s.index.pk:alter({parts={1, 'num', 2, 'num'}})
---
...
s.index.pk
---
- unique: true
  parts:
  - fieldno: 1
    sort_order: asc
    type: unsigned
    exclude_null: false
    is_nullable: false
  - fieldno: 2
    sort_order: asc
    type: unsigned
    exclude_null: false
    is_nullable: false
  hint: true
  id: 0
  type: TREE
  space_id: 512
  name: pk
...
s:select{}
---
- - [1, 1]
  - [2, 2]
  - [3, 3]
...
_ = s:create_index('secondary', {parts={2, 'num'}})
---
...
s.index.pk:alter({parts={1, 'num'}})
---
...
s:select{}
---
- - [1, 1]
  - [2, 2]
  - [3, 3]
...
s.index.pk
---
- unique: true
  parts:
  - fieldno: 1
    sort_order: asc
    type: unsigned
    exclude_null: false
    is_nullable: false
  hint: true
  id: 0
  type: TREE
  space_id: 512
  name: pk
...
s.index.secondary
---
- unique: true
  parts:
  - fieldno: 2
    sort_order: asc
    type: unsigned
    exclude_null: false
    is_nullable: false
  hint: true
  id: 1
  type: TREE
  space_id: 512
  name: secondary
...
s.index.secondary:select{}
---
- - [1, 1]
  - [2, 2]
  - [3, 3]
...
s:drop()
---
...
--
-- Forbid explicit space id 0.
--
s = box.schema.create_space('test', { id = 0 })
---
- error: 'Failed to create space ''test'': space id 0 is reserved'
...
--
-- gh-2660 space:truncate() does not preserve table triggers
--
ts = box.schema.space.create('test')
---
...
ti = ts:create_index('primary')
---
...
ts:insert{1, 'b', 'c'}
---
- [1, 'b', 'c']
...
ts:insert{2, 'b', 'c'}
---
- [2, 'b', 'c']
...
o = nil
---
...
n = nil
---
...
function save_out(told, tnew) o = told n = tnew end
---
...
_ = ts:on_replace(save_out)
---
...
ts:replace{2, 'a', 'b', 'c'}
---
- [2, 'a', 'b', 'c']
...
o
---
- [2, 'b', 'c']
...
n
---
- [2, 'a', 'b', 'c']
...
ts:truncate()
---
...
ts:replace{2, 'a', 'b'}
---
- [2, 'a', 'b']
...
o
---
- null
...
n
---
- [2, 'a', 'b']
...
ts:replace{3, 'a', 'b'}
---
- [3, 'a', 'b']
...
o
---
- null
...
n
---
- [3, 'a', 'b']
...
ts:drop()
---
...
--
-- Try insert incorrect sql in index and space opts.
--
box.space._space:replace{600, 1, 'test', 'memtx', 0, { sql = 100 }, {}}
---
- error: 'Wrong space options: ''sql'' must be string'
...
--
-- gh-2914: Allow any space name which consists of printable characters
--
identifier = require("identifier")
---
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
identifier.run_test(
	function (identifier)
		box.schema.space.create(identifier)
		if box.space[identifier] == nil then
			error("Cannot query space")
		end
	end,
	function (identifier) box.space[identifier]:drop() end
);
---
- All tests passed
...
s = box.schema.create_space("test");
---
...
identifier.run_test(
    function (identifier) s:create_index(identifier, {parts={1}}) end,
    function (identifier) s.index[identifier]:drop() end
);
---
- All tests passed
...
s:drop();
---
...
--
-- gh-2914: check column name validation.
-- Ensure that col names are validated as identifiers.
--
s = box.schema.create_space('test');
---
...
i = s:create_index("primary", {parts={1, "integer"}});
---
...
identifier.run_test(
	function (identifier)
		s:format({{name=identifier,type="integer"}})
		local t = s:replace({1})
		if t[identifier] ~= 1 then
			error("format identifier error")
		end
	end,
	function (identifier) end
);
---
- All tests passed
...
s:drop();
---
...
-- gh-2914: check coll name validation.
identifier.run_test(
    function (identifier) box.internal.collation.create(identifier, 'ICU', 'ru-RU', {}) end,
    function (identifier) box.internal.collation.drop(identifier) end
);
---
- All tests passed
...
test_run:cmd("setopt delimiter ''");
---
- true
...
--
-- gh-3011: add new names to old tuple formats.
--
s = box.schema.create_space('test')
---
...
pk = s:create_index('pk')
---
...
t1 = s:replace{1}
---
...
t1.field1
---
- null
...
format = {}
---
...
format[1] = {name = 'field1', type = 'unsigned'}
---
...
s:format(format)
---
...
t2 = s:replace{2}
---
...
t2.field1
---
- 2
...
t1.field1
---
- 1
...
format[1].name = 'field_1'
---
...
s:format(format)
---
...
t3 = s:replace{3}
---
...
t1.field1
---
- null
...
t1.field_1
---
- 1
...
t2.field1
---
- null
...
t2.field_1
---
- 2
...
t3.field1
---
- null
...
t3.field_1
---
- 3
...
s:drop()
---
...
--
-- gh-3008. Ensure the change of hash index parts updates hash
-- key_def.
--
s = box.schema.create_space('test')
---
...
pk = s:create_index('pk', {type = 'hash'})
---
...
pk:alter{parts = {{1, 'string'}}}
---
...
s:replace{'1', '1'}
---
- ['1', '1']
...
s:replace{'1', '2'}
---
- ['1', '2']
...
pk:select{}
---
- - ['1', '2']
...
pk:select{'1'}
---
- - ['1', '2']
...
s:drop()
---
...
--
-- Ensure that incompatible key parts change validates format.
--
s = box.schema.create_space('test')
---
...
pk = s:create_index('pk')
---
...
s:replace{1}
---
- [1]
...
pk:alter{parts = {{1, 'string'}}} -- Must fail.
---
- error: 'Tuple field 1 type does not match one required by operation: expected string,
    got unsigned'
...
s:drop()
---
...
--
-- gh-2895: do not ignore field type in space format, if it is not
-- specified via 'type = ...'.
--
format = {}
---
...
format[1] = {name = 'field1', 'unsigned'}
---
...
format[2] = {name = 'field2', 'unsigned'}
---
...
s = box.schema.create_space('test', {format = format})
---
...
s:format()
---
- [{'type': 'unsigned', 'name': 'field1'}, {'type': 'unsigned', 'name': 'field2'}]
...
format[2] = {name = 'field2', 'unsigned', 'unknown'}
---
...
s:format(format)
---
- error: 'Wrong space format field 2: expected a map with string keys'
...
s:format()
---
- [{'type': 'unsigned', 'name': 'field1'}, {'type': 'unsigned', 'name': 'field2'}]
...
s:drop()
---
...
--
-- gh-3285: index Lua object is not updated on alter.
--
box.internal.collation.create('test', 'ICU', 'ru-RU')
---
...
s = box.schema.create_space('test')
---
...
pk = s:create_index('pk')
---
...
sk1 = s:create_index('b', {unique = false})
---
...
sk2 = s:create_index('c', {type = 'hash', parts = {{3, 'unsigned'}}})
---
...
sk3 = s:create_index('d', {parts = {{4, 'string'}}})
---
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
function index_count()
    local r = 0
    for i, _ in pairs(s.index) do
        r = r + 1
    end
    return r / 2
end;
---
...
function validate_indexes()
    assert(s == box.space.test)
    assert(sk1 == nil or sk1 == s.index[sk1.name])
    assert(sk2 == nil or sk2 == s.index[sk2.name])
    assert(sk3 == nil or sk3 == s.index[sk3.name])
end;
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
index_count()
---
- 4
...
sk3:rename('dd')
---
...
sk3.name == 'dd'
---
- true
...
index_count()
---
- 4
...
validate_indexes()
---
...
sk3:alter({parts = {{4, 'string', collation = 'test'}}})
---
...
sk3.parts[1].collation == 'test'
---
- true
...
index_count()
---
- 4
...
validate_indexes()
---
...
sk3:drop()
---
...
sk3 = nil
---
...
index_count()
---
- 3
...
validate_indexes()
---
...
sk2:alter({parts = {{4, 'string'}}})
---
...
sk2.parts[1].type == 'string'
---
- true
...
sk2.parts[1].fieldno == 4
---
- true
...
index_count()
---
- 3
...
validate_indexes()
---
...
sk1:alter({unique = true})
---
...
sk1.unique
---
- true
...
index_count()
---
- 3
...
validate_indexes()
---
...
s:drop()
---
...
box.internal.collation.drop('test')
---
...
--
-- gh-5155: space:alter(), added in order to make it possible to turn on/off
-- is_sync, but it is handy for other options too.
--
s = box.schema.create_space('test')
---
...
pk = s:create_index('pk')
---
...
-- Bad usage.
s:alter({unknown = true})
---
- error: Illegal parameters, unexpected option 'unknown'
...
ok, err = pcall(s.alter, {})
---
...
assert(err:match("Use space:alter") ~= nil)
---
- true
...
-- Alter field_count.
s:replace{1}
---
- [1]
...
-- Can't update on non-empty space.
s:alter({field_count = 2})
---
- error: Tuple field count 1 does not match space field count 2
...
s:delete{1}
---
- [1]
...
-- Can update on empty space.
s:alter({field_count = 2})
---
...
s:replace{1}
---
- error: Tuple field count 1 does not match space field count 2
...
s:replace{1, 1}
---
- [1, 1]
...
-- When not specified or nil - ignored.
s:alter({field_count = nil})
---
...
s:replace{2}
---
- error: Tuple field count 1 does not match space field count 2
...
s:replace{2, 2}
---
- [2, 2]
...
-- Set to 0 drops the restriction.
s:alter({field_count = 0})
---
...
s:truncate()
---
...
s:replace{1}
---
- [1]
...
s:delete{1}
---
- [1]
...
-- Invalid values.
s:alter({field_count = box.NULL})
---
- error: Illegal parameters, options parameter 'field_count' should be of type number
...
s:alter({field_count = 'string'})
---
- error: Illegal parameters, options parameter 'field_count' should be of type number
...
-- Alter owner.
owner1 = box.space._space:get{s.id}.owner
---
...
box.schema.user.create('test')
---
...
-- When not specified or nil - ignored.
s:alter({user = nil})
---
...
owner2 = box.space._space:get{s.id}.owner
---
...
assert(owner2 == owner1)
---
- true
...
s:alter({user = 'test'})
---
...
owner2 = box.space._space:get{s.id}.owner
---
...
assert(owner2 ~= owner1)
---
- true
...
s:alter({user = owner1})
---
...
owner2 = box.space._space:get{s.id}.owner
---
...
assert(owner2 == owner1)
---
- true
...
box.schema.user.drop('test')
---
...
-- Invalid values.
s:alter({user = box.NULL})
---
- error: 'Illegal parameters, options parameter ''user'' should be one of types: string,
    number'
...
s:alter({user = true})
---
- error: 'Illegal parameters, options parameter ''user'' should be one of types: string,
    number'
...
s:alter({user = 'not_existing'})
---
- error: User 'not_existing' is not found
...
-- Alter format.
format = {{name = 'field1', type = 'unsigned'}}
---
...
s:alter({format = format})
---
...
s:format()
---
- [{'name': 'field1', 'type': 'unsigned'}]
...
-- When not specified or nil - ignored.
s:alter({format = nil})
---
...
s:format()
---
- [{'name': 'field1', 'type': 'unsigned'}]
...
t = s:replace{1}
---
...
assert(t.field1 == 1)
---
- true
...
s:alter({format = {}})
---
...
assert(t.field1 == nil)
---
- true
...
s:delete{1}
---
- [1]
...
-- Invalid values.
s:alter({format = box.NULL})
---
- error: Illegal parameters, options parameter 'format' should be of type table
...
s:alter({format = true})
---
- error: Illegal parameters, options parameter 'format' should be of type table
...
s:alter({format = {{{1, 2, 3, 4}}}})
---
- error: 'Illegal parameters, format[1]: name (string) is expected'
...
--
-- Alter data-temporary.
--
s:alter({temporary = true})
---
...
assert(s.temporary)
---
- true
...
-- When not specified or nil - ignored.
s:alter({temporary = nil})
---
...
assert(s.temporary)
---
- true
...
s:alter({temporary = false})
---
...
assert(not s.temporary)
---
- true
...
-- Ensure absence is not treated like 'true'.
s:alter({temporary = nil})
---
...
assert(not s.temporary)
---
- true
...
-- Invalid values.
s:alter({temporary = box.NULL})
---
- error: Illegal parameters, options parameter 'temporary' should be of type boolean
...
s:alter({temporary = 100})
---
- error: Illegal parameters, options parameter 'temporary' should be of type boolean
...
--
-- Alter is_sync.
--
old_synchro_quorum = box.cfg.replication_synchro_quorum
---
...
old_synchro_timeout = box.cfg.replication_synchro_timeout
---
...
box.cfg{                                                                        \
    replication_synchro_quorum = 2,                                             \
    replication_synchro_timeout = 0.001,                                        \
}
---
...
s:alter({is_sync = true})
---
...
assert(s.is_sync)
---
- true
...
s:replace{1}
---
- error: The synchronous transaction queue doesn't belong to any instance
...
-- When not specified or nil - ignored.
s:alter({is_sync = nil})
---
...
assert(s.is_sync)
---
- true
...
s:alter({is_sync = false})
---
...
assert(not s.is_sync)
---
- true
...
-- Ensure absence is not treated like 'true'.
s:alter({is_sync = nil})
---
...
assert(not s.is_sync)
---
- true
...
-- Invalid values.
s:alter({is_sync = box.NULL})
---
- error: Illegal parameters, options parameter 'is_sync' should be of type boolean
...
s:alter({is_sync = 100})
---
- error: Illegal parameters, options parameter 'is_sync' should be of type boolean
...
s:replace{1}
---
- [1]
...
s:delete{1}
---
- [1]
...
box.cfg{                                                                        \
    replication_synchro_quorum = old_synchro_quorum,                            \
    replication_synchro_timeout = old_synchro_timeout,                          \
}
---
...
-- Alter name.
s:alter({name = 'test2'})
---
...
assert(box.space.test2 ~= nil)
---
- true
...
assert(box.space.test == nil)
---
- true
...
assert(s.name == 'test2')
---
- true
...
-- When not specified or nil - ignored.
s:alter({name = nil})
---
...
assert(box.space.test2 ~= nil)
---
- true
...
assert(box.space.test == nil)
---
- true
...
assert(s.name == 'test2')
---
- true
...
err, res = pcall(function() return s:alter({name = '_space'}) end)
---
...
assert(res.code == box.error.TUPLE_FOUND)
---
- true
...
s:alter({name = 'test'})
---
...
assert(box.space.test ~= nil)
---
- true
...
assert(box.space.test2 == nil)
---
- true
...
assert(s.name == 'test')
---
- true
...
-- Invalid values.
s:alter({name = box.NULL})
---
- error: Illegal parameters, options parameter 'name' should be of type string
...
s:alter({name = 100})
---
- error: Illegal parameters, options parameter 'name' should be of type string
...
s:drop()
---
...
s:alter({})
---
- error: Space 'test' does not exist
...
ok, err = pcall(box.schema.space.alter, s.id, {})
---
...
assert(err:match('does not exist') ~= nil)
---
- true
...
-- hint
s = box.schema.create_space('test');
---
...
s:create_index('test1', {type='tree', parts={{1, 'uint'}}}).hint
---
- true
...
s:create_index('test2', {type='tree', parts={{2, 'uint'}}, hint = true}).hint
---
- true
...
s:create_index('test3', {type='tree', parts={{3, 'uint'}}, hint = false}).hint
---
- false
...
s:create_index('test4', {type='tree', parts={{4, 'string'}}, hint = false}).hint
---
- false
...
s.index.test1.hint
---
- true
...
s.index.test2.hint
---
- true
...
s.index.test3.hint
---
- false
...
s.index.test4.hint
---
- false
...
N = 1000 box.begin() for i = 1,N do s:replace{i, i, i, '' .. i} end box.commit()
---
...
s.index.test1:bsize() == s.index.test2:bsize()
---
- true
...
s.index.test1:bsize() > s.index.test3:bsize()
---
- true
...
s.index.test1:bsize() > s.index.test4:bsize()
---
- true
...
s.index.test1:alter{hint=false}
---
...
s.index.test2:alter{hint=true}
---
...
s.index.test3:alter{name='test33', hint=false}
---
...
s.index.test4:alter{hint=true}
---
...
s.index.test1.hint
---
- false
...
s.index.test2.hint
---
- true
...
s.index.test33.hint
---
- false
...
s.index.test4.hint
---
- true
...
s.index.test1:bsize() < s.index.test2:bsize()
---
- true
...
s.index.test1:bsize() == s.index.test33:bsize()
---
- true
...
s.index.test1:bsize() < s.index.test4:bsize()
---
- true
...
s:drop()
---
...
