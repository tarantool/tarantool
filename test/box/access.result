env = require('test_run')
---
...
test_run = env.new()
---
...
net = require('net.box')
---
...
session = box.session
---
...
-- user id for a Lua session is admin - 1
session.uid()
---
- 1
...
-- extra arguments are ignored
session.uid(nil)
---
- 1
...
-- admin
session.user()
---
- admin
...
session.effective_user()
---
- admin
...
-- extra argumentes are ignored
session.user(nil)
---
- admin
...
-- password() is a function which returns base64(sha1(sha1(password))
-- a string to store in _user table
box.schema.user.password('test')
---
- lL3OvhkIPOKh+Vn9Avlkx69M/Ck=
...
box.schema.user.password('test1')
---
- BsC/W2Ts4vZItfBIpxkDkGugjlw=
...
-- admin can create any user
box.schema.user.create('test', { password = 'test' })
---
...
-- su() let's you change the user of the session
-- the user will be unabe to change back unless he/she
-- is granted access to 'su'
session.su('test')
---
...
-- you can't create spaces unless you have a write access on
-- system space _space
-- in future we may  introduce a separate privilege
box.schema.space.create('test')
---
- error: Write access to space '_schema' is denied for user 'test'
...
-- su() goes through because called from admin
-- console, and it has no access checks
-- for functions
session.su('admin')
---
...
box.schema.user.grant('test', 'write', 'space', '_space')
---
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
function usermax()
    local i = 1
    while true do
        box.schema.user.create('user'..i)
        i = i + 1
    end
end;
---
...
usermax();
---
- error: 'A limit on the total number of users has been reached: 32'
...
function usermax()
    local i = 1
    while true do
        box.schema.user.drop('user'..i)
        i = i + 1
    end
end;
---
...
usermax();
---
- error: User 'user27' is not found
...
test_run:cmd("setopt delimiter ''");
---
- true
...
box.schema.user.create('rich')
---
...
box.schema.user.grant('rich', 'read,write', 'space', '_func')
---
...
box.schema.user.grant('rich', 'create', 'function')
---
...
session.su('rich')
---
...
uid = session.uid()
---
...
box.schema.func.create('dummy')
---
...
session.su('admin')
---
...
box.space['_user']:delete{uid}
---
- error: 'Failed to drop user or role ''rich'': the user has objects'
...
box.schema.func.drop('dummy')
---
...
box.space['_user']:delete{uid}
---
- error: 'Failed to drop user or role ''rich'': the user has objects'
...
box.schema.user.revoke('rich', 'public')
---
...
box.schema.user.revoke('rich', 'read,write', 'space', '_func')
---
...
box.schema.user.revoke('rich', 'alter', 'user', 'rich')
---
...
box.schema.user.revoke('rich', 'create', 'function')
---
...
box.schema.user.disable("rich")
---
...
-- test double disable is a no op
box.schema.user.disable("rich")
---
...
box.space['_user']:delete{uid}
---
- [33, 1, 'rich', 'user', {}]
...
box.schema.user.drop('test')
---
...
-- gh-944 name is too long
name = string.rep('a', box.schema.NAME_MAX - 1)
---
...
box.schema.user.create(name..'aa')
---
- error: 'Failed to create user ''aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'':
    user name is too long'
...
box.schema.user.create(name..'a')
---
...
box.schema.user.drop(name..'a')
---
...
box.schema.user.create(name)
---
...
box.schema.user.drop(name)
---
...
-- sudo
box.schema.user.create('tester')
---
...
-- admin -> user
session.user()
---
- admin
...
session.su('tester', function() return session.user(), session.effective_user() end)
---
- admin
- tester
...
session.user()
---
- admin
...
-- user -> admin
session.su('tester')
---
...
session.effective_user()
---
- tester
...
session.su('admin', function() return session.user(), session.effective_user() end)
---
- tester
- admin
...
session.user()
---
- tester
...
session.effective_user()
---
- tester
...
-- drop current user
session.su('admin', function() return box.schema.user.drop('tester') end)
---
- error: 'Failed to drop user or role ''tester'': the user is active in the current
    session'
...
session.user()
---
- tester
...
session.su('admin')
---
...
box.schema.user.drop('tester')
---
...
session.user()
---
- admin
...
-- Invalid user.
session.su('does not exist')
---
- error: User 'does not exist' is not found
...
-- The point of this test is to try a name > max
-- allowed name.
session.su(string.rep('a', 66000))
---
- error: User 'aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa' is
    not found
...
--------------------------------------------------------------------------------
-- Check if identifiers obey the common constraints
--------------------------------------------------------------------------------
identifier = require("identifier")
---
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
identifier.run_test(
	function (identifier)
		box.schema.user.create(identifier)
		box.schema.user.grant(identifier, 'super')
		box.session.su(identifier)
		box.session.su("admin")
		box.schema.user.revoke(identifier, 'super')
	end,
	box.schema.user.drop
);
---
- All tests passed
...
identifier.run_test(
	function (identifier)
		box.schema.role.create(identifier)
		box.schema.role.grant(identifier, 'execute,read,write',
			'universe', nil, {if_not_exists = false})
	end,
	box.schema.role.drop
);
---
- All tests passed
...
test_run:cmd("setopt delimiter ''");
---
- true
...
-- valid identifiers
box.schema.user.create('Петя_Иванов')
---
...
box.schema.user.drop('Петя_Иванов')
---
...
-- gh-300: misleading error message if a function does not exist
LISTEN = require('uri').parse(box.cfg.listen)
---
...
LISTEN ~= nil
---
- true
...
c = net.connect(LISTEN.host, LISTEN.service)
---
...
c:call('nosuchfunction')
---
- error: Execute access to function 'nosuchfunction' is denied for user 'guest'
...
function nosuchfunction() end
---
...
c:call('nosuchfunction')
---
- error: Execute access to function 'nosuchfunction' is denied for user 'guest'
...
nosuchfunction = nil
---
...
c:call('nosuchfunction')
---
- error: Execute access to function 'nosuchfunction' is denied for user 'guest'
...
c:close()
---
...
-- Dropping a space recursively drops all grants - it's possible to
-- restore from a snapshot
box.schema.user.create('testus')
---
...
s = box.schema.space.create('admin_space')
---
...
index = s:create_index('primary', {type = 'hash', parts = {1, 'unsigned'}})
---
...
box.schema.user.grant('testus', 'write', 'space', 'admin_space')
---
...
s:drop()
---
...
box.snapshot()
---
- ok
...
test_run:cmd('restart server default')
net = require('net.box')
---
...
box.schema.user.drop('testus')
---
...
-- ------------------------------------------------------------
-- a test case for gh-289
-- box.schema.user.drop() with cascade doesn't work
-- ------------------------------------------------------------
session = box.session
---
...
box.schema.user.create('uniuser')
---
...
box.schema.user.grant('uniuser', 'create', 'space')
---
...
box.schema.user.grant('uniuser', 'write', 'space', '_schema')
---
...
box.schema.user.grant('uniuser', 'write', 'space', '_space')
---
...
session.su('uniuser')
---
...
us = box.schema.space.create('uniuser_space')
---
...
session.su('admin')
---
...
box.schema.user.drop('uniuser')
---
...
-- ------------------------------------------------------------
-- A test case for gh-253
-- A user with universal grant has no access to drop oneself
-- ------------------------------------------------------------
-- This behaviour is expected, since an object may be destroyed
-- only by its creator at the moment
-- ------------------------------------------------------------
box.schema.user.create('grantor')
---
...
box.schema.user.grant('grantor', 'read, write, execute, create, alter, drop', 'universe')
---
...
session.su('grantor')
---
...
box.schema.user.create('grantee')
---
...
box.schema.user.grant('grantee', 'read, write, execute, create, alter, drop', 'universe')
---
- error: Grant access to universe '' is denied for user 'grantor'
...
session.su('grantee')
---
...
-- fails - can't suicide - ask the creator to kill you
box.schema.user.drop('grantee')
---
- error: 'Failed to drop user or role ''grantee'': the user is active in the current
    session'
...
session.su('grantor')
---
...
box.schema.user.drop('grantee')
---
...
-- fails, can't kill oneself
box.schema.user.drop('grantor')
---
- error: 'Failed to drop user or role ''grantor'': the user is active in the current
    session'
...
session.su('admin')
---
...
box.schema.user.drop('grantor')
---
...
-- ----------------------------------------------------------
-- A test case for gh-299
-- It appears to be too easy to read all fields in _user
-- table
-- guest can't read _user table, add a test case
-- ----------------------------------------------------------
session.su('guest')
---
...
box.space._user:select{0}
---
- error: Read access to space '_user' is denied for user 'guest'
...
box.space._user:select{1}
---
- error: Read access to space '_user' is denied for user 'guest'
...
session.su('admin')
---
...
-- ----------------------------------------------------------
-- A test case for gh-358 Change user does not work from lua
-- Correct the update syntax in schema.lua
-- ----------------------------------------------------------
box.schema.user.create('user1')
---
...
box.space._user.index.name:select{'user1'}
---
- - [32, 1, 'user1', 'user', {}]
...
session.su('user1')
---
...
box.schema.user.passwd('new_password')
---
...
session.su('admin')
---
...
box.space._user.index.name:select{'user1'}
---
- - [32, 1, 'user1', 'user', {'chap-sha1': 'CRO/LiziDOIb+xlhrxJNSSBFjl8='}]
...
box.schema.user.passwd('user1', 'extra_new_password')
---
...
box.space._user.index.name:select{'user1'}
---
- - [32, 1, 'user1', 'user', {'chap-sha1': 'nMc3F1oaUtz37IYbgGYYPZawmfE='}]
...
box.schema.user.passwd('invalid_user', 'some_password')
---
- error: User 'invalid_user' is not found
...
box.schema.user.passwd()
---
- error: 'Usage: box.schema.user.passwd([user,] password)'
...
session.su('user1')
---
...
-- permission denied
box.schema.user.passwd('admin', 'xxx')
---
- error: User 'admin' is not found
...
session.su('admin')
---
...
box.schema.user.drop('user1')
---
...
box.space._user.index.name:select{'user1'}
---
- []
...
-- ----------------------------------------------------------
-- A test case for gh-421 Granting a privilege revokes an
-- existing grant
-- ----------------------------------------------------------
box.schema.user.create('user')
---
...
id = box.space._user.index.name:get{'user'}[1]
---
...
box.schema.user.grant('user', 'read,write', 'universe')
---
...
box.space._priv:select{id}
---
- - [1, 32, 'role', 2, 4]
  - [1, 32, 'universe', 0, 27]
  - [1, 32, 'user', 32, 128]
...
box.schema.user.grant('user', 'read', 'universe')
---
- error: User 'user' already has read access on universe
...
box.space._priv:select{id}
---
- - [1, 32, 'role', 2, 4]
  - [1, 32, 'universe', 0, 27]
  - [1, 32, 'user', 32, 128]
...
box.schema.user.revoke('user', 'write', 'universe')
---
...
box.space._priv:select{id}
---
- - [1, 32, 'role', 2, 4]
  - [1, 32, 'universe', 0, 25]
  - [1, 32, 'user', 32, 128]
...
box.schema.user.revoke('user', 'read', 'universe')
---
...
box.space._priv:select{id}
---
- - [1, 32, 'role', 2, 4]
  - [1, 32, 'universe', 0, 24]
  - [1, 32, 'user', 32, 128]
...
box.schema.user.grant('user', 'write', 'universe')
---
...
box.space._priv:select{id}
---
- - [1, 32, 'role', 2, 4]
  - [1, 32, 'universe', 0, 26]
  - [1, 32, 'user', 32, 128]
...
box.schema.user.grant('user', 'read', 'universe')
---
...
box.space._priv:select{id}
---
- - [1, 32, 'role', 2, 4]
  - [1, 32, 'universe', 0, 27]
  - [1, 32, 'user', 32, 128]
...
box.schema.user.drop('user')
---
...
box.space._priv:select{id}
---
- []
...
-- -----------------------------------------------------------
-- Be a bit more rigorous in what is accepted in space _user
-- -----------------------------------------------------------
utils = require('utils')
---
...
box.space._user:insert{10, 1, 'name', 'strange-object-type', utils.setmap({})}
---
- error: 'Failed to create user ''name'': unknown user type'
...
box.space._user:insert{10, 1, 'name', 'role', utils.setmap{'password'}}
---
- error: 'Failed to create role ''name'': authentication data can not be set for a
    role'
...
session = nil
---
...
-- -----------------------------------------------------------
-- admin can't manage grants on not owned objects
-- -----------------------------------------------------------
box.schema.user.create('twostep')
---
...
box.schema.user.grant('twostep', 'create', 'space')
---
...
box.schema.user.grant('twostep', 'create', 'function')
---
...
box.schema.user.grant('twostep', 'write', 'space', '_schema')
---
...
box.schema.user.grant('twostep', 'write', 'space', '_space')
---
...
box.schema.user.grant('twostep', 'write', 'space', '_index')
---
...
box.schema.user.grant('twostep', 'read', 'space', '_space_sequence')
---
...
box.schema.user.grant('twostep', 'read,write', 'space', '_func')
---
...
box.session.su('twostep')
---
...
twostep = box.schema.space.create('twostep')
---
...
index2 = twostep:create_index('primary')
---
...
box.schema.func.create('test')
---
...
box.session.su('admin')
---
...
box.schema.user.create('twostep_client')
---
...
box.schema.user.grant('twostep_client', 'execute', 'function', 'test')
---
...
box.schema.user.drop('twostep')
---
...
box.schema.user.drop('twostep_client')
---
...
-- the space is dropped when the user is dropped
--
-- box.schema.user.exists()
box.schema.user.exists('guest')
---
- true
...
box.schema.user.exists(nil)
---
- false
...
box.schema.user.exists(0)
---
- true
...
box.schema.user.exists(1)
---
- true
...
box.schema.user.exists(100500)
---
- false
...
box.schema.user.exists('admin')
---
- true
...
box.schema.user.exists('nosuchuser')
---
- false
...
box.schema.user.exists{}
---
- error: 'Supplied key type of part 0 does not match index part type: expected unsigned'
...
-- gh-671: box.schema.func.exists()
box.schema.func.exists('nosuchfunc')
---
- false
...
box.schema.func.exists('guest')
---
- false
...
box.schema.func.exists(1)
---
- true
...
box.schema.func.exists(69)
---
- false
...
box.schema.func.exists('box.schema.user.info')
---
- true
...
box.schema.func.exists()
---
- false
...
box.schema.func.exists(nil)
---
- false
...
-- gh-665: user.exists() should nto be true for roles
box.schema.user.exists('public')
---
- false
...
box.schema.role.exists('public')
---
- true
...
box.schema.role.exists(nil)
---
- false
...
-- test if_exists/if_not_exists in grant/revoke
box.schema.user.grant('guest', 'read,write,execute', 'universe')
---
...
box.schema.user.grant('guest', 'read,write,execute', 'universe')
---
- error: User 'guest' already has read,write,execute access on universe
...
box.schema.user.grant('guest', 'read,write,execute', 'universe', '', { if_not_exists = true })
---
...
box.schema.user.revoke('guest', 'read,write,execute', 'universe')
---
...
box.schema.user.revoke('guest', 'usage,session', 'universe')
---
...
box.schema.user.revoke('guest', 'read,write,execute', 'universe')
---
- error: User 'guest' does not have read,write,execute access on universe ''
...
box.schema.user.revoke('guest', 'read,write,execute', 'universe', '', { if_exists = true })
---
...
box.schema.user.grant('guest', 'usage,session', 'universe')
---
...
box.schema.func.create('dummy', { if_not_exists = true })
---
...
box.schema.func.create('dummy', { if_not_exists = true })
---
...
box.schema.func.drop('dummy')
---
...
-- gh-664 roles: accepting bad syntax for create
box.schema.user.create('user', 'blah')
---
- error: Illegal parameters, options should be a table
...
box.schema.user.drop('user', 'blah')
---
- error: Illegal parameters, options should be a table
...
-- gh-664 roles: accepting bad syntax for create
box.schema.func.create('func', 'blah')
---
- error: Illegal parameters, options should be a table
...
box.schema.func.drop('blah', 'blah')
---
- error: Illegal parameters, options should be a table
...
-- gh-758 attempt to set password for user guest
box.schema.user.passwd('guest', 'sesame')
---
- error: Setting password for guest user has no effect
...
-- gh-1205 box.schema.user.info fails
box.schema.user.drop('guest')
---
- error: 'Failed to drop user or role ''guest'': the user or the role is a system'
...
box.schema.role.drop('guest')
---
- error: Role 'guest' is not found
...
box.space._user.index.name:delete{'guest'}
---
- error: 'Failed to drop user or role ''guest'': the user or the role is a system'
...
box.space._user:delete{box.schema.GUEST_ID}
---
- error: 'Failed to drop user or role ''guest'': the user or the role is a system'
...
#box.schema.user.info('guest') > 0
---
- true
...
box.schema.user.drop('admin')
---
- error: 'Failed to drop user or role ''admin'': the user or the role is a system'
...
box.schema.role.drop('admin')
---
- error: Role 'admin' is not found
...
box.space._user.index.name:delete{'admin'}
---
- error: 'Failed to drop user or role ''admin'': the user or the role is a system'
...
box.space._user:delete{box.schema.ADMIN_ID}
---
- error: 'Failed to drop user or role ''admin'': the user or the role is a system'
...
#box.schema.user.info('admin') > 0
---
- true
...
box.schema.user.drop('public')
---
- error: User 'public' is not found
...
box.schema.role.drop('public')
---
- error: 'Failed to drop user or role ''public'': the user or the role is a system'
...
box.space._user.index.name:delete{'public'}
---
- error: 'Failed to drop user or role ''public'': the user or the role is a system'
...
box.space._user:delete{box.schema.PUBLIC_ROLE_ID}
---
- error: 'Failed to drop user or role ''public'': the user or the role is a system'
...
#box.schema.role.info('public') > 0
---
- true
...
box.schema.role.drop('super')
---
- error: 'Failed to drop user or role ''super'': the user or the role is a system'
...
box.schema.user.drop('super')
---
- error: User 'super' is not found
...
box.space._user.index.name:delete{'super'}
---
- error: 'Failed to drop user or role ''super'': the user or the role is a system'
...
box.space._user:delete{box.schema.SUPER_ROLE_ID}
---
- error: 'Failed to drop user or role ''super'': the user or the role is a system'
...
#box.schema.role.info('super') > 0
---
- true
...
-- gh-944 name is too long
name = string.rep('a', box.schema.NAME_MAX - 1)
---
...
box.schema.func.create(name..'aa')
---
- error: 'Failed to create function ''aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa'':
    function name is too long'
...
box.schema.func.create(name..'a')
---
...
box.schema.func.drop(name..'a')
---
...
box.schema.func.create(name)
---
...
box.schema.func.drop(name)
---
...
-- A test case for: http://bugs.launchpad.net/bugs/712456
-- Verify that when trying to access a non-existing or
-- very large space id, no crash occurs.
LISTEN = require('uri').parse(box.cfg.listen)
---
...
c = net.connect(LISTEN.host, LISTEN.service)
---
...
c:_request(net._method.select, nil, nil, nil, 1, box.index.EQ, 0, 0, 0xFFFFFFFF, {})
---
- error: Space '1' does not exist
...
c:_request(net._method.select, nil, nil, nil, 65537, box.index.EQ, 0, 0, 0xFFFFFFFF, {})
---
- error: Space '65537' does not exist
...
c:_request(net._method.select, nil, nil, nil, 4294967295, box.index.EQ, 0, 0, 0xFFFFFFFF, {})
---
- error: Space '4294967295' does not exist
...
c:close()
---
...
session = box.session
---
...
box.schema.user.create('test')
---
...
box.schema.user.grant('test', 'read', 'space', '_collation')
---
...
--box.schema.user.grant('test', 'write', 'space', '_collation')
-- FIXME: granting create on 'collation' only doesn't work
box.schema.user.grant('test', 'create', 'universe')
---
...
session.su('test')
---
...
box.internal.collation.create('test', 'ICU', 'ru_RU')
---
...
session.su('admin')
---
...
box.internal.collation.drop('test') -- success
---
...
box.internal.collation.create('test', 'ICU', 'ru_RU')
---
...
session.su('test')
---
...
box.internal.collation.drop('test') -- fail
---
- error: Drop access to collation 'test' is denied for user 'test'
...
session.su('admin')
---
...
box.internal.collation.drop('test') -- success
---
...
box.schema.user.drop('test')
---
...
--
-- gh-2710 object drop revokes all associated privileges
--
_ = box.schema.space.create('test_space')
---
...
_ = box.schema.sequence.create('test_sequence')
---
...
box.schema.func.create('test_function')
---
...
box.schema.user.create('test_user')
---
...
box.schema.user.grant('test_user', 'read', 'space', 'test_space')
---
...
box.schema.user.grant('test_user', 'write', 'sequence', 'test_sequence')
---
...
box.schema.user.grant('test_user', 'execute', 'function', 'test_function')
---
...
box.schema.role.create('test_role')
---
...
box.schema.role.grant('test_role', 'read', 'space', 'test_space')
---
...
box.schema.role.grant('test_role', 'write', 'sequence', 'test_sequence')
---
...
box.schema.role.grant('test_role', 'execute', 'function', 'test_function')
---
...
box.schema.user.info('test_user')
---
- - - execute
    - function
    - test_function
  - - execute
    - role
    - public
  - - write
    - sequence
    - test_sequence
  - - read
    - space
    - test_space
  - - session,usage
    - universe
    - 
  - - alter
    - user
    - test_user
...
box.schema.role.info('test_role')
---
- - - execute
    - function
    - test_function
  - - write
    - sequence
    - test_sequence
  - - read
    - space
    - test_space
...
box.space.test_space:drop()
---
...
box.sequence.test_sequence:drop()
---
...
box.schema.func.drop('test_function')
---
...
box.schema.user.info('test_user')
---
- - - execute
    - role
    - public
  - - session,usage
    - universe
    - 
  - - alter
    - user
    - test_user
...
box.schema.role.info('test_role')
---
- []
...
box.schema.user.drop('test_user')
---
...
box.schema.role.drop('test_role')
---
...
-- gh-3023: box.session.su() changes both authenticated and effective
-- user, while should only change the effective user
--
function uids() return { uid = box.session.uid(), euid = box.session.euid() } end
---
...
box.session.su('guest')
---
...
uids()
---
- uid: 0
  euid: 0
...
box.session.su('admin')
---
...
box.session.su('guest', uids)
---
- uid: 1
  euid: 0
...
--
-- gh-2898 System privileges
--
s = box.schema.create_space("tweed")
---
...
_ = s:create_index('primary', {type = 'hash', parts = {1, 'unsigned'}})
---
...
box.schema.user.create('test', {password="pass"})
---
...
box.schema.user.grant('test', 'read,write', 'universe')
---
...
-- other users can't disable
box.schema.user.create('test1')
---
...
session.su("test1")
---
...
box.schema.user.disable("test")
---
- error: User 'test' is not found
...
session.su("admin")
---
...
box.schema.user.disable("test")
---
...
-- test double disable is a no op
box.schema.user.disable("test")
---
...
session.su("test")
---
- error: Session access to universe '' is denied for user 'test'
...
c = net.connect(LISTEN.host, LISTEN.service, {user="test", password="pass"})
---
...
c.state
---
- error
...
c.error
---
- Session access to universe '' is denied for user 'test'
...
session.su("test1")
---
...
box.schema.user.grant("test", "usage", "universe")
---
- error: User 'test' is not found
...
session.su('admin')
---
...
box.schema.user.grant("test", "session", "universe")
---
...
session.su("test")
---
...
s:select{}
---
- error: Usage access to universe '' is denied for user 'test'
...
session.su('admin')
---
...
box.schema.user.enable("test")
---
...
-- check enable not fails on double enabling
box.schema.user.enable("test")
---
...
session.su("test")
---
...
s:select{}
---
- []
...
session.su("admin")
---
...
box.schema.user.drop('test')
---
...
box.schema.user.drop('test1')
---
...
s:drop()
---
...
--
-- gh-3022 role 'super'
--
s = box.schema.space.create("admin_space")
---
...
box.schema.user.grant('guest', 'super')
---
...
box.session.su('guest')
---
...
_ = box.schema.space.create('test')
---
...
box.space.test:drop()
---
...
_ = box.schema.user.create('test')
---
...
box.schema.user.drop('test')
---
...
_ = box.schema.func.create('test')
---
...
box.schema.func.drop('test')
---
...
-- gh-3088 bug: super role lacks drop privileges on other users' spaces
s:drop()
---
...
box.session.su('admin')
---
...
box.schema.user.revoke('guest', 'super')
---
...
box.session.su('guest')
---
...
box.schema.space.create('test')
---
- error: Write access to space '_schema' is denied for user 'guest'
...
box.schema.user.create('test')
---
- error: Read access to space '_user' is denied for user 'guest'
...
box.schema.func.create('test')
---
- error: Read access to space '_func' is denied for user 'guest'
...
box.session.su('admin')
---
...
--
-- gh-2911 on_access_denied trigger
--
obj_type = nil
---
...
obj_name = nil
---
...
op_type = nil
---
...
euid = nil
---
...
auid = nil
---
...
function access_denied_trigger(op, type, name) obj_type = type; obj_name = name; op_type = op end
---
...
function uid() euid = box.session.euid(); auid = box.session.uid() end
---
...
_ = box.session.on_access_denied(access_denied_trigger)
---
...
_ = box.session.on_access_denied(uid)
---
...
s = box.schema.space.create('admin_space', {engine="vinyl"})
---
...
seq = box.schema.sequence.create('test_sequence')
---
...
index = s:create_index('primary', {type = 'tree', parts = {1, 'unsigned'}})
---
...
box.schema.user.create('test_user', {password="pass"})
---
...
box.session.su("test_user")
---
...
s:select{}
---
- error: Read access to space 'admin_space' is denied for user 'test_user'
...
obj_type, obj_name, op_type
---
- space
- admin_space
- Read
...
euid, auid
---
- 32
- 32
...
seq:set(1)
---
- error: Write access to sequence 'test_sequence' is denied for user 'test_user'
...
obj_type, obj_name, op_type
---
- sequence
- test_sequence
- Write
...
euid, auid
---
- 32
- 32
...
box.session.su("admin")
---
...
c = net.connect(LISTEN.host, LISTEN.service, {user="test_user", password="pass"})
---
...
function func() end
---
...
st, e = pcall(c.call, c, func)
---
...
obj_type, op_type
---
- function
- Execute
...
euid, auid
---
- 32
- 32
...
obj_name:match("function")
---
- function
...
box.schema.user.revoke("test_user", "usage", "universe")
---
...
box.session.su("test_user")
---
...
st, e = pcall(s.select, s, {})
---
...
e = e:unpack()
---
...
e.type, e.access_type, e.object_type, e.message
---
- AccessDeniedError
- Usage
- universe
- Usage access to universe '' is denied for user 'test_user'
...
obj_type, obj_name, op_type
---
- universe
- 
- Usage
...
euid, auid
---
- 32
- 32
...
box.session.su("admin")
---
...
box.schema.user.revoke("test_user", "session", "universe")
---
...
c = net.connect(LISTEN.host, LISTEN.service, {user="test_user", password="pass"})
---
...
obj_type, obj_name, op_type
---
- universe
- 
- Session
...
euid, auid
---
- 0
- 0
...
box.session.on_access_denied(nil, access_denied_trigger)
---
...
box.session.on_access_denied(nil, uid)
---
...
box.schema.user.drop("test_user")
---
...
seq:drop()
---
...
s:drop()
---
...
--
-- gh-945 create, drop, alter privileges
--
box.schema.user.create("tester")
---
...
s = box.schema.space.create("test")
---
...
_ = s:create_index("primary")
---
...
seq = box.schema.sequence.create("test")
---
...
u = box.schema.user.create("test")
---
...
f = box.schema.func.create("test")
---
...
-- failed create, auto_increment requires read.
box.session.su("tester")
---
...
box.schema.space.create("test_space")
---
- error: Write access to space '_schema' is denied for user 'tester'
...
box.schema.user.create('test_user')
---
- error: Read access to space '_user' is denied for user 'tester'
...
box.schema.func.create('test_func')
---
- error: Read access to space '_func' is denied for user 'tester'
...
box.session.su("admin")
---
...
box.schema.user.grant("tester", "read", "space", "_user")
---
...
box.schema.user.grant("tester", "read", "space", "_func")
---
...
-- failed create
box.session.su("tester")
---
...
box.schema.space.create("test_space")
---
- error: Write access to space '_schema' is denied for user 'tester'
...
box.schema.user.create('test_user')
---
- error: Write access to space '_user' is denied for user 'tester'
...
box.schema.func.create('test_func')
---
- error: Write access to space '_func' is denied for user 'tester'
...
box.session.su("admin")
---
...
--
-- FIXME 2.0: we still need to grant 'write' on universe
-- explicitly since we still use process_rw to write to system
-- tables from ddl
--
box.schema.user.grant('tester', 'write', 'universe')
---
...
box.schema.user.grant('tester', 'create', 'user')
---
...
box.schema.user.grant('tester', 'create', 'space')
---
...
box.schema.user.grant('tester', 'create', 'function')
---
...
box.schema.user.grant('tester', 'create' , 'sequence')
---
...
box.schema.user.grant('tester', 'read', 'space', '_sequence')
---
...
box.schema.user.grant('tester', 'read', 'space', '_space_sequence')
---
...
box.schema.user.grant('tester', 'read', 'space', '_trigger')
---
...
box.schema.user.grant('tester', 'read', 'space', '_fk_constraint')
---
...
box.schema.user.grant('tester', 'read', 'space', '_ck_constraint')
---
...
box.schema.user.grant('tester', 'read', 'space', '_func_index')
---
...
box.session.su("tester")
---
...
-- successful create
s1 = box.schema.space.create("test_space")
---
...
_ = s1:create_index("primary")
---
...
_ = box.schema.user.create('test_user')
---
...
_ = box.schema.func.create('test_func')
---
...
seq1 = box.schema.sequence.create('test_seq')
---
...
-- successful drop of owned objects
s1:drop()
---
...
seq1:drop()
---
...
box.schema.user.drop('test_user')
---
...
box.schema.func.drop('test_func')
---
...
-- failed alter
-- box.session.su("tester", s.format, s, {name="id", type="unsigned"})
-- box.schema.user.grant("tester", "alter", "universe")
-- successful alter
-- box.session.su("tester", s.format, s, {name="id", type="unsigned"})
-- failed drop
-- box.session.su("tester", s.drop, s)
-- gh-3090: nested su unexpected behaviour.
-- gh-3492: su doesn't grant effective privileges
-- should print guest
test_run:cmd("setopt delimiter ';'")
---
- true
...
function f()
    box.session.su("admin", function() end)
    return box.session.effective_user()
end;
---
...
box.session.su("guest", f);
---
- guest
...
-- the call of test_admin below shouldn't fail
function test_admin()
    box.schema.user.create('storage', {password = 'storage', if_not_exists=true})

    box.schema.user.grant('storage', 'replication', nil, nil, {if_not_exists=true})
end;
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
box.session.su("guest")
---
...
box.session.user()
---
- guest
...
box.session.effective_user()
---
- guest
...
box.session.su("admin", test_admin)
---
...
box.session.user()
---
- guest
...
box.session.effective_user()
---
- guest
...
box.session.su("admin")
---
...
box.session.user()
---
- admin
...
box.session.effective_user()
---
- admin
...
box.schema.user.drop("storage")
---
...
test_admin = nil
---
...
f = nil
---
...
-- now sudo can be used here since nested sudo is fixed
box.session.su("tester", box.schema.user.drop, "test")
---
- error: Drop access to user 'test' is denied for user 'tester'
...
box.session.su("tester", box.schema.func.drop, "test")
---
- error: Drop access to function 'test' is denied for user 'tester'
...
box.session.su("admin")
---
...
box.schema.user.grant("tester", "drop", "universe")
---
...
-- successful drop
box.session.su("tester", s.drop, s)
---
...
box.session.su("tester", seq.drop, seq)
---
...
box.session.su("tester", box.schema.user.drop, "test")
---
...
box.session.su("tester", box.schema.func.drop, "test")
---
...
box.session.su("admin")
---
...
box.schema.user.drop("tester")
---
...
-- gh-3146 gotcha for granting universe with options
box.schema.user.grant("guest", "read", "universe", {if_not_exists = true})
---
- error: Illegal parameters, wrong object name type
...
box.schema.user.grant("guest", "read", "universe", "useless name")
---
...
box.schema.user.grant("guest", "read", "universe", "useless name", {if_not_exists = true})
---
...
box.schema.user.grant("guest", "read", "universe", 0, {if_not_exists = true})
---
...
box.schema.user.grant("guest", "read", "universe", nil, {if_not_exists = true})
---
...
box.schema.user.grant("guest", "read", "universe", {}, {if_not_exists = true})
---
- error: Illegal parameters, wrong object name type
...
box.schema.user.revoke("guest", "read", "universe", {if_exists = true})
---
- error: Illegal parameters, wrong object name type
...
box.schema.user.revoke("guest", "read", "universe", "useless name")
---
...
box.schema.user.revoke("guest", "read", "universe", "useless name", {if_exists = true})
---
...
box.schema.user.revoke("guest", "read", "universe", 0, {if_exists = true})
---
...
box.schema.user.revoke("guest", "read", "universe", nil, {if_exists = true})
---
...
box.schema.user.revoke("guest", "read", "universe", {}, {if_exists = true})
---
- error: Illegal parameters, wrong object name type
...
--
-- Check that box.schema.* api is available to non-super user
-- In scope of gh-3250 "make sure grant/revoke does not require
-- read access to universe"
--
box.session.su('guest')
---
...
--
--
-- 1a. func.exists() works
--
-- No function: function not found but returns nothing if the user
-- has no access to the function
--
box.schema.func.exists('test')
---
- false
...
box.space._vspace.index.name:get{"test"} ~= nil
---
- false
...
box.space._vsequence.index.name:get{"test"} ~= nil
---
- false
...
--
-- create an objects, but 'guest' still has no access to them
--
box.session.su('admin', box.schema.func.create, 'test')
---
...
s = box.session.su('admin', box.schema.space.create, 'test')
---
...
_ = box.session.su('admin', box.schema.sequence.create, 'test')
---
...
box.schema.func.exists('test')
---
- false
...
box.space._vspace.index.name:get{"test"} ~= nil
---
- false
...
box.space._vsequence.index.name:get{"test"} ~= nil
---
- false
...
--
-- grant access, the object should become visible to guest
--
box.session.su('admin', box.schema.user.grant, 'guest', 'execute', 'function', 'test')
---
...
box.session.su('admin', box.schema.user.grant, 'guest', 'read', 'space', 'test')
---
...
box.session.su('admin', box.schema.user.grant, 'guest', 'read', 'sequence', 'test')
---
...
box.schema.func.exists('test')
---
- true
...
box.space._vspace.index.name:get{"test"} ~= nil
---
- true
...
box.space._vsequence.index.name:get{"test"} ~= nil
---
- true
...
--
-- drop objects
--
box.session.su('admin', box.schema.func.drop, 'test')
---
...
box.session.su('admin', s.drop, s)
---
...
box.session.su('admin', box.schema.sequence.drop, 'test')
---
...
box.schema.func.exists('test')
---
- false
...
box.space._vspace.index.name:get{"test"} ~= nil
---
- false
...
box.space._vsequence.index.name:get{"test"} ~= nil
---
- false
...
--
-- restore
--
box.session.su('admin')
---
...
-- prerequisite gh-945
box.schema.user.grant("guest", "alter", "function")
---
- error: Unsupported function privilege 'alter'
...
box.schema.user.grant("guest", "execute", "sequence")
---
- error: Unsupported sequence privilege 'execute'
...
box.schema.user.grant("guest", "read,execute", "sequence")
---
- error: Unsupported sequence privilege 'read,execute'
...
box.schema.user.grant("guest", "read,write,execute", "role")
---
- error: Unsupported role privilege 'read,write,execute'
...
-- Check entities DML
box.schema.user.create("tester", { password  = '123' })
---
...
s = box.schema.space.create("test")
---
...
_ = s:create_index("primary", {parts={1, "unsigned"}})
---
...
seq = box.schema.sequence.create("test")
---
...
box.schema.func.create("func")
---
...
c = net.connect(LISTEN.host, LISTEN.service, {user='tester', password = '123'})
---
...
box.session.su("tester", s.select, s)
---
- error: Read access to space 'test' is denied for user 'tester'
...
box.session.su("tester", seq.set, seq, 1)
---
- error: Write access to sequence 'test' is denied for user 'tester'
...
c:call("func")
---
- error: Execute access to function 'func' is denied for user 'tester'
...
box.schema.user.grant("tester", "read", "space")
---
...
box.schema.user.grant("tester", "write", "sequence")
---
...
box.schema.user.grant("tester", "execute", "function")
---
...
box.session.su("tester", s.select, s)
---
- []
...
box.session.su("tester", seq.next, seq)
---
- 1
...
c:call("func")
---
...
box.session.su("tester", s.insert, s, {1})
---
- error: Write access to space 'test' is denied for user 'tester'
...
box.schema.user.grant("tester", "write", "space")
---
...
box.session.su("tester", s.insert, s, {1})
---
- [1]
...
box.schema.user.drop("tester")
---
...
s:drop()
---
...
seq:drop()
---
...
box.schema.func.drop("func")
---
...
c:close()
---
...
--
-- A user with read/write access to sequence shouldn't
-- be able to create a sequence. It also needs a create privilege
-- on universe.
--
box.schema.user.create('tester')
---
...
box.schema.user.grant('tester', 'read,write', 'space', '_sequence')
---
...
box.session.su('tester')
---
...
_  = box.schema.sequence.create('test_sequence')
---
- error: Create access to sequence 'test_sequence' is denied for user 'tester'
...
box.session.su('admin')
---
...
box.schema.user.grant('tester', 'create', 'sequence')
---
...
box.session.su('tester')
---
...
_ = box.schema.sequence.create('test_sequence')
---
...
box.session.su('admin')
---
...
box.schema.user.drop('tester')
---
...
--
-- test case for 3530: do not ignore single object privileges
--
box.schema.user.create("test")
---
...
_ = box.schema.space.create("space1")
---
...
box.schema.user.grant("test", "read", "space", "space1")
---
...
box.schema.user.grant("test", "write", "space", "_index")
---
...
box.schema.user.grant("test", "read", "space", "_space_sequence")
---
...
box.session.su("test")
---
...
box.space.space1:create_index("pk")
---
- error: Create access to space 'space1' is denied for user 'test'
...
box.session.su("admin")
---
...
box.space.space1.index[0] == nil
---
- true
...
box.schema.user.grant("test", "create", "space", "space1")
---
...
box.session.su("test")
---
...
_ = box.space.space1:create_index("pk")
---
...
box.space.space1:insert{5}
---
- error: Write access to space 'space1' is denied for user 'test'
...
box.session.su("admin")
---
...
box.space.space1.index[0] ~= nil
---
- true
...
box.space.space1:select{}
---
- []
...
box.schema.user.grant("test", "write", "space", "space1")
---
...
box.session.su("test")
---
...
box.space.space1:insert{5}
---
- [5]
...
box.session.su("admin")
---
...
box.space.space1:select{}
---
- - [5]
...
box.schema.user.drop("test")
---
...
box.space.space1:drop()
---
...
--
-- test that it is possible to grant privileges on a single user.
box.schema.user.create("user1")
---
...
box.schema.user.create("user2")
---
...
box.schema.user.create("user3")
---
...
box.schema.user.grant("user1", "write", "space", "_user")
---
...
box.schema.user.grant("user1", "read", "space", "_user")
---
...
box.space._user:select{}
---
- - [0, 1, 'guest', 'user', {'chap-sha1': 'vhvewKp0tNyweZQ+cFKAlsyphfg='}]
  - [1, 1, 'admin', 'user', {}]
  - [2, 1, 'public', 'role', {}]
  - [3, 1, 'replication', 'role', {}]
  - [31, 1, 'super', 'role', {}]
  - [32, 1, 'user1', 'user', {}]
  - [33, 1, 'user2', 'user', {}]
  - [34, 1, 'user3', 'user', {}]
...
box.session.su("user1")
---
...
-- can alter itself, but can't alter others without privileges.
box.schema.user.passwd("user1", "abcd")
---
...
box.schema.user.passwd("user2", "abcd")
---
- error: Alter access to user 'user2' is denied for user 'user1'
...
box.session.su("admin")
---
...
box.space._user:select{}
---
- - [0, 1, 'guest', 'user', {'chap-sha1': 'vhvewKp0tNyweZQ+cFKAlsyphfg='}]
  - [1, 1, 'admin', 'user', {}]
  - [2, 1, 'public', 'role', {}]
  - [3, 1, 'replication', 'role', {}]
  - [31, 1, 'super', 'role', {}]
  - [32, 1, 'user1', 'user', {'chap-sha1': 'oVTFJWXp5/lL/Aih/nAmJO2O/9o='}]
  - [33, 1, 'user2', 'user', {}]
  - [34, 1, 'user3', 'user', {}]
...
box.schema.user.grant("user1", "alter", "user", "user2")
---
...
box.session.su("user1")
---
...
box.schema.user.passwd("user2", "abcd")
---
...
-- still fails
box.schema.user.passwd("user3", "qewr")
---
- error: Alter access to user 'user3' is denied for user 'user1'
...
box.session.su("admin")
---
...
box.space._user:select{}
---
- - [0, 1, 'guest', 'user', {'chap-sha1': 'vhvewKp0tNyweZQ+cFKAlsyphfg='}]
  - [1, 1, 'admin', 'user', {}]
  - [2, 1, 'public', 'role', {}]
  - [3, 1, 'replication', 'role', {}]
  - [31, 1, 'super', 'role', {}]
  - [32, 1, 'user1', 'user', {'chap-sha1': 'oVTFJWXp5/lL/Aih/nAmJO2O/9o='}]
  - [33, 1, 'user2', 'user', {'chap-sha1': 'oVTFJWXp5/lL/Aih/nAmJO2O/9o='}]
  - [34, 1, 'user3', 'user', {}]
...
box.schema.user.drop("user1")
---
...
box.schema.user.drop("user2")
---
...
box.schema.user.drop("user3")
---
...
--
-- Check that admin user privileges can't be removed. Otherwise an
-- instance could not bootstrap nor recovery.
--
box.space._priv:delete{1, 'universe', 0}
---
- error: 'Incorrect grant arguments: can''t revoke universe from the admin user'
...
--
-- gh-714: box.schema.user.grant error should be versatile,
-- i.e. error on universally granted privileges shouldn't
-- include any redundant details and/or symbols.
--
box.schema.user.grant('guest', 'read,write,execute', 'universe')
---
...
box.schema.user.grant('guest', 'read,write,execute', 'universe')
---
- error: User 'guest' already has read,write,execute access on universe
...
-- Expected behavior of grant() error shouldn't change otherwise.
sp = box.schema.create_space('not_universe')
---
...
box.schema.user.grant('guest', 'read,write,execute', 'space', 'not_universe')
---
...
box.schema.user.grant('guest', 'read,write,execute', 'space', 'not_universe')
---
- error: User 'guest' already has read,write,execute access on space 'not_universe'
...
-- Clean up.
box.schema.user.revoke('guest', 'read,write,execute', 'universe')
---
...
box.schema.user.revoke('guest', 'read,write,execute', 'space', 'not_universe')
---
...
sp:drop()
---
...
--
-- Make sure that the functions "LUA" and "box.schema.user.info" do not have
-- excess rights.
--
_ = box.schema.func.call("LUA", "return 1")
---
...
_ = box.schema.func.call("LUA", "return box.space._space:count()")
---
...
_ = box.schema.func.call("box.schema.user.info", 0)
---
...
_ = box.schema.func.call("box.schema.user.info", 1)
---
...
session.su('guest')
---
...
_ = box.schema.func.call("LUA", "return 1")
---
...
_ = box.schema.func.call("LUA", "return box.space._space:count()")
---
- error: Read access to space '_space' is denied for user 'guest'
...
_ = box.schema.func.call("box.schema.user.info", 0)
---
...
_ = box.schema.func.call("box.schema.user.info", 1)
---
- error: User '1' is not found
...
session.su('admin')
---
...
-- gh-5389: make sure that granting privileges from guest does not lead
-- to crash or assertion fault.
--
box.schema.user.grant('guest','read,write,create','universe')
---
...
box.session.su('guest')
---
...
box.schema.user.create("optimizer")
---
...
box.schema.user.grant("optimizer", "alter", "space")
---
- error: Grant access to space '' is denied for user 'guest'
...
box.schema.user.grant("optimizer", "alter", "sequence")
---
- error: Grant access to sequence '' is denied for user 'guest'
...
box.schema.user.grant("optimizer", "create", "function")
---
- error: Grant access to function '' is denied for user 'guest'
...
box.schema.user.grant("optimizer", "drop", "user")
---
- error: Grant access to user '' is denied for user 'guest'
...
box.schema.user.grant("optimizer", "create", "role")
---
- error: Grant access to role '' is denied for user 'guest'
...
box.schema.user.grant("optimizer", "create", "function")
---
- error: Grant access to function '' is denied for user 'guest'
...
session.su('admin')
---
...
box.schema.user.revoke('guest', 'read,write,create', 'universe')
---
...
box.schema.user.drop("optimizer")
---
...
