session = box.session
---
...
--
-- Basic tests
--
#box.space._vspace:select{} == #box.space._space:select{}
---
- true
...
#box.space._vindex:select{} == #box.space._index:select{}
---
- true
...
#box.space._vuser:select{} == #box.space._user:select{}
---
- true
...
#box.space._vpriv:select{} == #box.space._priv:select{}
---
- true
...
#box.space._vfunc:select{} == #box.space._func:select{}
---
- true
...
-- gh-1042: bad error message for _vspace, _vuser, _vindex, etc.
-- Space '_vspace' (sysview) does not support replace
box.space._vspace:replace({1, 1, 'test'})
---
- error: View '_vspace' is read-only
...
box.space._vspace:delete(1)
---
- error: View '_vspace' is read-only
...
box.space._vspace:update(1, {{'=', 2, 48}})
---
- error: View '_vspace' is read-only
...
-- error: Index 'primary' of space '_vspace' (sysview) does not support xxx()
box.space._vspace.index.primary:len()
---
- error: Index 'primary' (TREE) of space '_vspace' (sysview) does not support size()
...
box.space._vspace.index.primary:random(48)
---
- error: Index 'primary' (TREE) of space '_vspace' (sysview) does not support random()
...
session.su('guest')
---
...
--
-- _vspace + _vindex
--
-- _vXXXX views are visible for 'public' role
#box.space._vspace.index[2]:select('_vspace') ~= 0
---
- true
...
#box.space._vspace.index[2]:select('_vindex') ~= 0
---
- true
...
#box.space._vspace.index[2]:select('_vuser') ~= 0
---
- true
...
#box.space._vspace.index[2]:select('_vfunc') ~= 0
---
- true
...
#box.space._vspace.index[2]:select('_vpriv') ~= 0
---
- true
...
#box.space._vspace.index[2]:select('_vcollation') ~= 0
---
- true
...
#box.space._vindex:select(box.space._vspace.id) > 0
---
- true
...
#box.space._vindex:select(box.space._vindex.id) > 0
---
- true
...
#box.space._vindex:select(box.space._vuser.id) > 0
---
- true
...
#box.space._vindex:select(box.space._vfunc.id) > 0
---
- true
...
#box.space._vindex:select(box.space._vpriv.id) > 0
---
- true
...
#box.space._vindex:select(box.space._vcollation.id) > 0
---
- true
...
box.session.su('admin')
---
...
box.schema.user.revoke('guest', 'public')
---
...
box.session.su('guest')
---
...
#box.space._vspace:select{}
---
- error: Read access to space '_vspace' is denied for user 'guest'
...
#box.space._vindex:select{}
---
- error: Read access to space '_vindex' is denied for user 'guest'
...
#box.space._vuser:select{}
---
- error: Read access to space '_vuser' is denied for user 'guest'
...
#box.space._vpriv:select{}
---
- error: Read access to space '_vpriv' is denied for user 'guest'
...
#box.space._vfunc:select{}
---
- error: Read access to space '_vfunc' is denied for user 'guest'
...
#box.space._vsequence:select{}
---
- error: Read access to space '_vsequence' is denied for user 'guest'
...
#box.space._vcollation:select{}
---
- error: Read access to space '_vcollation' is denied for user 'guest'
...
box.session.su('admin')
---
...
box.schema.user.grant('guest', 'public')
---
...
box.session.su('guest')
---
...
#box.space._vspace:select{}
---
- 10
...
#box.space._vindex:select{}
---
- 23
...
#box.space._vcollation:select{}
---
- 277
...
box.session.su('admin')
---
...
s = box.schema.space.create('test')
---
...
s = box.space.test:create_index('primary')
---
...
box.schema.role.grant('public', 'read', 'space', 'test')
---
...
box.session.su('guest')
---
...
box.space._vspace.index[2]:get('test') ~= nil
---
- true
...
#box.space._vindex:select(box.space.test.id) == 1
---
- true
...
box.session.su('admin')
---
...
box.schema.role.revoke('public', 'read', 'space', 'test')
---
...
box.session.su('guest')
---
...
box.space._vspace.index[2]:get('test') == nil
---
- true
...
#box.space._vindex:select(box.space.test.id) == 0
---
- true
...
box.session.su('admin')
---
...
box.schema.user.grant('guest', 'read', 'space', 'test')
---
...
box.session.su('guest')
---
...
box.space._vspace.index[2]:get('test') ~= nil
---
- true
...
#box.space._vindex:select(box.space.test.id) == 1
---
- true
...
box.session.su('admin')
---
...
box.schema.user.revoke('guest', 'read', 'space', 'test')
---
...
box.session.su('guest')
---
...
box.space._vspace.index[2]:get('test') == nil
---
- true
...
#box.space._vindex:select(box.space.test.id) == 0
---
- true
...
-- check universe permissions
box.session.su('admin')
---
...
box.schema.user.grant('guest', 'read', 'universe')
---
...
box.session.su('guest')
---
...
#box.space._vspace:select{}
---
- 27
...
#box.space._vindex:select{}
---
- 56
...
#box.space._vuser:select{}
---
- 5
...
#box.space._vpriv:select{}
---
- 18
...
#box.space._vfunc:select{}
---
- 2
...
#box.space._vcollation:select{}
---
- 277
...
box.session.su('admin')
---
...
box.schema.user.revoke('guest', 'read', 'universe')
---
...
box.schema.user.grant('guest', 'write', 'universe')
---
...
box.session.su('guest')
---
...
#box.space._vindex:select{}
---
- 56
...
#box.space._vuser:select{}
---
- 5
...
#box.space._vpriv:select{}
---
- 18
...
#box.space._vfunc:select{}
---
- 2
...
#box.space._vsequence:select{}
---
- 0
...
#box.space._vcollation:select{}
---
- 277
...
box.session.su('admin')
---
...
box.schema.user.revoke('guest', 'write', 'universe')
---
...
box.space.test:drop()
---
...
box.session.su('guest')
---
...
-- read access to original space also allow to read a view
box.session.su('admin')
---
...
space_cnt = #box.space._space:select{}
---
...
index_cnt = #box.space._index:select{}
---
...
box.schema.user.grant('guest', 'read', 'space', '_space')
---
...
box.schema.user.grant('guest', 'read', 'space', '_index')
---
...
box.session.su('guest')
---
...
#box.space._vspace:select{} == space_cnt
---
- true
...
#box.space._vindex:select{} == index_cnt
---
- true
...
box.session.su('admin')
---
...
box.schema.user.revoke('guest', 'read', 'space', '_space')
---
...
box.schema.user.revoke('guest', 'read', 'space', '_index')
---
...
box.session.su('guest')
---
...
#box.space._vspace:select{} < space_cnt
---
- true
...
#box.space._vindex:select{} < index_cnt
---
- true
...
--
-- _vuser
--
-- a guest user can read information about itself
t = box.space._vuser:select(); for i = 1, #t do if t[i][3] == 'guest' then return true end end return false
---
- true
...
-- read access to original space also allow to read a view
box.session.su('admin')
---
...
user_cnt = #box.space._user:select{}
---
...
box.schema.user.grant('guest', 'read', 'space', '_user')
---
...
box.session.su('guest')
---
...
#box.space._vuser:select{} == user_cnt
---
- true
...
box.session.su('admin')
---
...
box.schema.user.revoke('guest', 'read', 'space', '_user')
---
...
box.session.su('guest')
---
...
#box.space._vuser:select{} < user_cnt
---
- true
...
box.session.su('admin')
---
...
box.schema.user.grant('guest', 'read,write,create', 'universe')
---
...
box.session.su('guest')
---
...
box.schema.user.create('tester')
---
...
box.session.su('admin')
---
...
box.schema.user.revoke('guest', 'read,write,create', 'universe')
---
...
box.session.su('guest')
---
...
#box.space._vuser.index[2]:select('tester') > 0
---
- true
...
box.session.su('admin')
---
...
box.schema.user.drop('tester')
---
...
box.session.su('guest')
---
...
--
-- _vpriv
--
-- a guest user can see granted 'public' role
box.space._vpriv.index[2]:select('role')[1][2] == session.uid()
---
- true
...
-- read access to original space also allow to read a view
box.session.su('admin')
---
...
box.schema.user.grant('guest', 'read', 'space', '_priv')
---
...
priv_cnt = #box.space._priv:select{}
---
...
box.session.su('guest')
---
...
#box.space._vpriv:select{} == priv_cnt
---
- true
...
box.session.su('admin')
---
...
box.schema.user.revoke('guest', 'read', 'space', '_priv')
---
...
box.session.su('guest')
---
...
cnt = #box.space._vpriv:select{}
---
...
cnt < priv_cnt
---
- true
...
box.session.su('admin')
---
...
box.schema.user.grant('guest', 'read,write', 'space', '_schema')
---
...
box.session.su('guest')
---
...
#box.space._vpriv:select{} == cnt + 1
---
- true
...
box.session.su('admin')
---
...
box.schema.user.revoke('guest', 'read,write', 'space', '_schema')
---
...
box.session.su('guest')
---
...
#box.space._vpriv:select{} == cnt
---
- true
...
--
-- _vfunc
--
box.session.su('admin')
---
...
box.schema.func.create('test')
---
...
-- read access to original space also allow to read a view
func_cnt = #box.space._func:select{}
---
...
box.schema.user.grant('guest', 'read', 'space', '_func')
---
...
box.session.su('guest')
---
...
#box.space._vfunc:select{} == func_cnt
---
- true
...
box.session.su('admin')
---
...
box.schema.user.revoke('guest', 'read', 'space', '_func')
---
...
box.session.su('guest')
---
...
cnt = #box.space._vfunc:select{}
---
...
cnt < func_cnt
---
- true
...
box.session.su('admin')
---
...
box.schema.user.grant('guest', 'execute', 'function', 'test')
---
...
box.session.su('guest')
---
...
#box.space._vfunc:select{} == func_cnt
---
- true
...
box.session.su('admin')
---
...
box.schema.user.revoke('guest', 'execute', 'function', 'test')
---
...
box.session.su('guest')
---
...
#box.space._vfunc:select{} == cnt
---
- true
...
box.session.su('admin')
---
...
box.schema.user.grant('guest', 'execute', 'universe')
---
...
box.session.su('guest')
---
...
#box.space._vfunc:select{} == func_cnt
---
- true
...
box.session.su('admin')
---
...
box.schema.user.revoke('guest', 'execute', 'universe')
---
...
box.schema.func.drop('test')
---
...
box.session.su('guest')
---
...
#box.space._vfunc:select{} == cnt
---
- true
...
--
-- _vsequence
--
box.session.su('admin')
---
...
seq = box.schema.sequence.create('test')
---
...
-- read access to original sequence also allow to read a view
seq_cnt = #box.space._sequence:select{}
---
...
box.schema.user.grant("guest", "read", "sequence", "test")
---
...
box.session.su("guest")
---
...
#box.space._vsequence:select{} == seq_cnt
---
- true
...
box.session.su('admin')
---
...
box.schema.user.revoke("guest", "read", "sequence", "test")
---
...
box.session.su("guest")
---
...
cnt = #box.space._vsequence:select{}
---
...
cnt < seq_cnt
---
- true
...
session.su('admin')
---
...
box.schema.user.grant("guest", "write", "sequence", "test")
---
...
box.session.su("guest")
---
...
#box.space._vsequence:select{} == cnt + 1
---
- true
...
session.su('admin')
---
...
seq:drop()
---
...
--
-- _vcollation
--
box.session.su('admin')
---
...
box.internal.collation.create('test', 'ICU', 'ru-RU')
---
...
-- Only admin can create collation.
coll_cnt = #box.space._collation:select{}
---
...
box.schema.user.grant("guest", "read, write, alter, execute", "space", "_collation")
---
...
box.session.su("guest")
---
...
box.internal.collation.create('guest0', 'ICU', 'ru-RU')
---
- error: Create access to collation 'guest0' is denied for user 'guest'
...
box.space._vcollation:select{0}
---
- - [0, 'none', 1, 'BINARY', '', {}]
...
#box.space._vcollation:select{} == coll_cnt
---
- true
...
box.session.su('admin')
---
...
-- _vcollation is readable anyway.
box.schema.user.revoke("guest", "read, write, alter, execute", "space", "_collation")
---
...
box.session.su("guest")
---
...
#box.space._vcollation:select{}
---
- 278
...
session.su('admin')
---
...
box.internal.collation.drop('test')
---
...
box.internal.collation.drop('guest0')
---
...
--
-- view:alter() tests
--
box.space._vspace.index[1]:alter({parts = { 2, 'string' }})
---
- error: Field 2 (owner) has type 'unsigned' in space format, but type 'string' in
    index definition
...
box.space._vspace.index[1]:select('xxx')
---
- error: 'Supplied key type of part 0 does not match index part type: expected unsigned'
...
box.space._vspace.index[1]:count(1) > 0
---
- true
...
box.space._vspace.index[1]:alter({parts = { 2, 'unsigned' }})
---
...
box.space._space.index[1]:drop()
---
...
box.space._vspace.index[1]:select(1)
---
- error: 'No index #1 is defined in space ''_space'''
...
s = box.space._space:create_index('owner', {parts = { 2, 'unsigned' }, id = 1, unique = false})
---
...
#box.space._vspace.index[1]:select(1) > 0
---
- true
...
session = nil
---
...
