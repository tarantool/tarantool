test_run = require('test_run').new()
---
...
too_long_threshold_default = box.cfg.too_long_threshold
---
...
io_collect_interval_default = box.cfg.io_collect_interval
---
...
box.cfg.too_long_threshold
---
- 0.5
...
-- good
box.cfg{too_long_threshold=0.2}
---
...
box.cfg.too_long_threshold
---
- 0.2
...
-- good 
box.cfg{snap_io_rate_limit=10}
---
...
box.cfg.snap_io_rate_limit
---
- 10
...
box.cfg.io_collect_interval
---
- null
...
box.cfg{io_collect_interval=0.001}
---
...
box.cfg.io_collect_interval
---
- 0.001
...
-- A test case for http://bugs.launchpad.net/bugs/712447:
-- Valgrind reports use of not initialized memory after 'reload
-- configuration'
--
space = box.schema.space.create('tweedledum')
---
...
index = space:create_index('primary')
---
...
space:insert{1, 'tuple'}
---
- [1, 'tuple']
...
box.snapshot()
---
- ok
...
box.cfg{}
---
...
space:insert{2, 'tuple2'}
---
- [2, 'tuple2']
...
box.snapshot()
---
- ok
...
space:insert{3, 'tuple3'}
---
- [3, 'tuple3']
...
box.snapshot()
---
- ok
...
-- A test case for https://github.com/tarantool/tarantool/issues/112:
-- Tarantool crashes with SIGSEGV during reload configuration
--
-- log level
box.cfg{log_level=5}
---
...
-- constants
box.cfg{wal_dir="dynamic"}
---
- error: Can't set option 'wal_dir' dynamically
...
box.cfg{memtx_dir="dynamic"}
---
- error: Can't set option 'memtx_dir' dynamically
...
box.cfg{log="new logger"}
---
- error: 'Incorrect value for option ''log'': can''t be set dynamically'
...
-- bad1
box.cfg{memtx_memory=53687091}
---
- error: 'Incorrect value for option ''memtx_memory'': cannot decrease memory size
    at runtime'
...
box.cfg.memtx_memory
---
- 107374182
...
space:drop()
---
...
box.cfg{snap_io_rate_limit=0}
---
...
box.cfg{io_collect_interval=0}
---
...
box.cfg{too_long_threshold=0.5}
---
...
box.cfg.snap_io_rate_limit = nil
---
...
box.cfg.io_collect_interval = nil
---
...
box.cfg { too_long_threshold = too_long_threshold_default }
---
...
box.cfg { io_collect_interval = io_collect_interval_default }
---
...
--
-- gh-2634: check that box.cfg.memtx_memory can be increased
--
test_run:cmd("create server test with script='box/lua/cfg_memory.lua'")
---
- true
...
test_run:cmd(string.format("start server test with args='%d'", 48 * 1024 * 1024))
---
- true
...
test_run:cmd("switch test")
---
- true
...
box.slab.info().quota_size
---
- 50331648
...
s = box.schema.space.create('test')
---
...
_ = s:create_index('pk')
---
...
count = 200
---
...
pad = string.rep('x', 100 * 1024)
---
...
for i = 1, count do s:replace{i, pad} end -- error: not enough memory
---
- error: Failed to allocate 102421 bytes in slab allocator for memtx_tuple
...
s:count() < count
---
- true
...
box.cfg{memtx_memory = 80 * 1024 * 1024}
---
...
box.slab.info().quota_size
---
- 83886080
...
for i = s:count() + 1, count do s:replace{i, pad} end -- ok
---
...
s:count() == count
---
- true
...
s:drop()
---
...
box.cfg{memtx_memory = 48 * 1024 * 1024} -- error: decreasing memtx_memory is not allowed
---
- error: 'Incorrect value for option ''memtx_memory'': cannot decrease memory size
    at runtime'
...
box.slab.info().quota_size
---
- 83886080
...
test_run:cmd("switch default")
---
- true
...
test_run:cmd("stop server test")
---
- true
...
test_run:cmd("cleanup server test")
---
- true
...
