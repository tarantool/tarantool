env = require('test_run')
---
...
test_run = env.new()
---
...
test_run:cmd("push filter 'table: .*' to 'table: <address>'")
---
- true
...
-- gh-266: box.info() crash on uncofigured box
package.loaded['box.space'] == nil
---
- true
...
package.loaded['box.index'] == nil
---
- true
...
package.loaded['box.tuple'] == nil
---
- true
...
package.loaded['box.error'] == nil
---
- true
...
package.loaded['box.info'] == nil
---
- true
...
package.loaded['box.stat'] == nil
---
- true
...
package.loaded['box.session'] == nil
---
- true
...
space = box.schema.space.create('tweedledum')
---
...
index = space:create_index('primary', { type = 'hash' })
---
...
-- Test Lua from admin console. Whenever producing output,
-- make sure it's a valid YAML.
'  lua says: hello'
---
- '  lua says: hello'
...
--
-- gh-3308: feedback daemon is an optional pre-compile time
-- defined feature, depending on CMake flags. It is not present
-- always.
--
optional = {feedback = true}
---
...
-- # What's in the box?
t = {}
---
...
for n in pairs(box) do                                                          \
    if not optional[n] then                                                     \
        table.insert(t, tostring(n))                                            \
    end                                                                         \
end                                                                             \
table.sort(t)
---
...
t
---
- - NULL
  - atomic
  - backup
  - begin
  - cfg
  - commit
  - ctl
  - error
  - execute
  - func
  - index
  - info
  - internal
  - is_in_txn
  - lib
  - on_commit
  - on_rollback
  - once
  - prepare
  - priv
  - rollback
  - rollback_to_savepoint
  - runtime
  - savepoint
  - schema
  - sequence
  - session
  - slab
  - snapshot
  - space
  - stat
  - tuple
  - unprepare
...
t = nil
---
...
----------------
-- # box.stat
----------------
t = {}
---
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
for k, v in pairs(box.stat()) do
    table.insert(t, k)
end;
---
...
for k, v in pairs(box.stat().DELETE) do
    table.insert(t, k)
end;
---
...
for k, v in pairs(box.stat.DELETE) do
    table.insert(t, k)
end;
---
...
t;
---
- - DELETE
  - COMMIT
  - SELECT
  - ROLLBACK
  - INSERT
  - EVAL
  - ERROR
  - CALL
  - BEGIN
  - PREPARE
  - REPLACE
  - UPSERT
  - AUTH
  - EXECUTE
  - UPDATE
  - total
  - rps
  - total
  - rps
...
----------------
-- # box.space
----------------
type(box);
---
- table
...
type(box.space);
---
- table
...
t = {};
---
...
for i, v in pairs(space.index[0].parts[1]) do
    table.insert(t, tostring(i)..' : '..tostring(v))
end;
---
...
t;
---
- - 'type : unsigned'
  - 'is_nullable : false'
  - 'fieldno : 1'
...
----------------
-- # box.slab
----------------
string.match(tostring(box.slab.info()), '^table:') ~= nil;
---
- true
...
box.slab.info().arena_used >= 0;
---
- true
...
box.slab.info().arena_size > 0;
---
- true
...
string.match(tostring(box.slab.stats()), '^table:') ~= nil;
---
- true
...
t = {};
---
...
for k, v in pairs(box.slab.info()) do
    table.insert(t, k)
end;
---
...
t;
---
- - items_size
  - items_used_ratio
  - quota_size
  - quota_used_ratio
  - arena_used_ratio
  - items_used
  - quota_used
  - arena_size
  - arena_used
...
box.runtime.info().used > 0;
---
- true
...
box.runtime.info().maxalloc > 0;
---
- true
...
--
-- gh-502: box.slab.info() excessively sparse array
--
type(require('yaml').encode(box.slab.info()));
---
- string
...
test_run:cmd("setopt delimiter ''");
---
- true
...
-- A test case for Bug#901674
-- No way to inspect exceptions from Box in Lua
--
function myinsert(tuple) box.space.tweedledum:insert(tuple) end
---
...
pcall(myinsert, {99, 1, 1953719668})
---
- true
...
pcall(myinsert, {1, 'hello'})
---
- true
...
pcall(myinsert, {1, 'hello'})
---
- false
- Duplicate key exists in unique index "primary" in space "tweedledum" with old tuple
  - [1, "hello"] and new tuple - [1, "hello"]
...
box.space.tweedledum:truncate()
---
...
myinsert = nil
---
...
-- A test case for gh-37: print of 64-bit number
ffi = require('ffi')
---
...
1, 1
---
- 1
- 1
...
tonumber64(1), 1
---
- 1
- 1
...
-- Testing 64bit
tonumber64()
---
- error: 'bad argument #1 to ''?'' (value expected)'
...
tonumber64('invalid number')
---
- null
...
tonumber64(123)
---
- 123
...
tonumber64('123')
---
- 123
...
type(tonumber64('4294967296')) == 'number'
---
- true
...
tonumber64('9223372036854775807') == tonumber64('9223372036854775807')
---
- true
...
tonumber64('9223372036854775807') - tonumber64('9223372036854775800')
---
- 7
...
tonumber64('18446744073709551615') == tonumber64('18446744073709551615')
---
- true
...
tonumber64('18446744073709551615') + 1
---
- 0
...
tonumber64(-1)
---
- -1
...
tonumber64('184467440737095516155')
---
- null
...
string.byte(require('msgpack').encode(tonumber64(123)))
---
- 123
...
--  A test case for Bug#1061747 'tonumber64 is not transitive'
tonumber64(tonumber64(2))
---
- 2
...
tostring(tonumber64(tonumber64(3)))
---
- '3'
...
--  A test case for Bug#1131108 'tonumber64 from negative int inconsistency'
tonumber64(-1)
---
- -1
...
tonumber64(-1LL)
---
- -1
...
tonumber64(-1ULL)
---
- 18446744073709551615
...
-1
---
- -1
...
-1LL
---
- -1
...
-1ULL
---
- 18446744073709551615
...
tonumber64(-1.0)
---
- -1
...
6LL - 7LL
---
- -1
...
tostring(tonumber64('1234567890123')) == '1234567890123'
---
- true
...
tostring(tonumber64('12345678901234')) == '12345678901234'
---
- true
...
tostring(tonumber64('123456789012345')) == '123456789012345ULL'
---
- true
...
tostring(tonumber64('1234567890123456')) == '1234567890123456ULL'
---
- true
...
--
-- gh-3466: Strange behaviour of tonumber64 function
--
tostring(tonumber64('9223372036854775807')) == '9223372036854775807ULL'
---
- true
...
tostring(tonumber64('18446744073709551615')) == '18446744073709551615ULL'
---
- true
...
tonumber64('18446744073709551616') == nil
---
- true
...
tostring(tonumber64('-9223372036854775808')) == '-9223372036854775808LL'
---
- true
...
tonumber64('-9223372036854775809') == nil
---
- true
...
tostring(tonumber64('0')) == '0'
---
- true
...
--
-- gh-3431: tonumber of strings with ULL.
--
tonumber64('-1ULL') == -1ULL
---
- true
...
tonumber64('-1LL') == -1LL
---
- true
...
tonumber64('12345678910ULL') == 12345678910ULL
---
- true
...
tonumber64(tostring(tonumber64('1234567890123456'))) == 1234567890123456ULL
---
- true
...
tonumber64('0x12') == 18
---
- true
...
tonumber64('0x12', 16) == 18
---
- true
...
tonumber64('0x12', 17) == nil
---
- true
...
tonumber64('0b01') == 1
---
- true
...
tonumber64('0b01', 2) == 1
---
- true
...
tonumber64('0b01', 3) == nil
---
- true
...
tonumber64('  0b1  ') == 1
---
- true
...
tonumber64('  0b1  ', 'badbase')
---
- error: 'bad argument #2 to ''?'' (number expected, got string)'
...
tonumber64('  0b1  ', 123) -- big base
---
- error: 'bad argument #2 to ''?'' (base out of range)'
...
tonumber64('12345', 123) -- big base
---
- error: 'bad argument #2 to ''?'' (base out of range)'
...
tonumber64('0xfffff') == 1048575
---
- true
...
tonumber64('0b111111111111111111') == 262143
---
- true
...
tonumber64('20', 36)
---
- 72
...
tonumber64("", 10)
---
- null
...
tonumber64("", 32)
---
- null
...
tonumber64("-1")
---
- -1
...
tonumber64("-0x16")
---
- -22
...
tonumber64("-0b11")
---
- -3
...
tonumber64(" -0x16 ")
---
- -22
...
tonumber64(" -0b11 ")
---
- -3
...
-- numbers/cdata with base = 10 - return as is
tonumber64(100)
---
- 100
...
tonumber64(100, 10)
---
- 100
...
tonumber64(100LL)
---
- 100
...
tonumber64(100ULL, 10)
---
- 100
...
tonumber64(-100LL)
---
- -100
...
tonumber64(-100LL, 10)
---
- -100
...
tonumber64(ffi.new('char', 10))
---
- 10
...
tonumber64(ffi.new('short', 10))
---
- 10
...
tonumber64(ffi.new('int', 10))
---
- 10
...
tonumber64(ffi.new('int8_t', 10))
---
- 10
...
tonumber64(ffi.new('int16_t', 10))
---
- 10
...
tonumber64(ffi.new('int32_t', 10))
---
- 10
...
tonumber64(ffi.new('int64_t', 10))
---
- 10
...
tonumber64(ffi.new('unsigned char', 10))
---
- 10
...
tonumber64(ffi.new('unsigned short', 10))
---
- 10
...
tonumber64(ffi.new('unsigned int', 10))
---
- 10
...
tonumber64(ffi.new('unsigned int', 10))
---
- 10
...
tonumber64(ffi.new('uint8_t', 10))
---
- 10
...
tonumber64(ffi.new('uint16_t', 10))
---
- 10
...
tonumber64(ffi.new('uint32_t', 10))
---
- 10
...
tonumber64(ffi.new('uint64_t', 10))
---
- 10
...
tonumber64(ffi.new('float', 10))
---
- 10
...
tonumber64(ffi.new('double', 10))
---
- 10
...
-- number/cdata with custom `base` - is not supported
tonumber64(100, 2)
---
- error: 'bad argument #1 to ''?'' (string expected)'
...
tonumber64(100LL, 2)
---
- error: 'bad argument #1 to ''?'' (string expected)'
...
tonumber64(-100LL, 2)
---
- error: 'bad argument #1 to ''?'' (string expected)'
...
tonumber64(100ULL, 2)
---
- error: 'bad argument #1 to ''?'' (string expected)'
...
tonumber64(ffi.new('char', 10), 2)
---
- error: 'bad argument #1 to ''?'' (string expected)'
...
tonumber64(ffi.new('short', 10), 2)
---
- error: 'bad argument #1 to ''?'' (string expected)'
...
tonumber64(ffi.new('int', 10), 2)
---
- error: 'bad argument #1 to ''?'' (string expected)'
...
tonumber64(ffi.new('int8_t', 10), 2)
---
- error: 'bad argument #1 to ''?'' (string expected)'
...
tonumber64(ffi.new('int16_t', 10), 2)
---
- error: 'bad argument #1 to ''?'' (string expected)'
...
tonumber64(ffi.new('int32_t', 10), 2)
---
- error: 'bad argument #1 to ''?'' (string expected)'
...
tonumber64(ffi.new('int64_t', 10), 2)
---
- error: 'bad argument #1 to ''?'' (string expected)'
...
tonumber64(ffi.new('unsigned char', 10), 2)
---
- error: 'bad argument #1 to ''?'' (string expected)'
...
tonumber64(ffi.new('unsigned short', 10), 2)
---
- error: 'bad argument #1 to ''?'' (string expected)'
...
tonumber64(ffi.new('unsigned int', 10), 2)
---
- error: 'bad argument #1 to ''?'' (string expected)'
...
tonumber64(ffi.new('unsigned int', 10), 2)
---
- error: 'bad argument #1 to ''?'' (string expected)'
...
tonumber64(ffi.new('uint8_t', 10), 2)
---
- error: 'bad argument #1 to ''?'' (string expected)'
...
tonumber64(ffi.new('uint16_t', 10), 2)
---
- error: 'bad argument #1 to ''?'' (string expected)'
...
tonumber64(ffi.new('uint32_t', 10), 2)
---
- error: 'bad argument #1 to ''?'' (string expected)'
...
tonumber64(ffi.new('uint64_t', 10), 2)
---
- error: 'bad argument #1 to ''?'' (string expected)'
...
tonumber64(ffi.new('float', 10), 2)
---
- error: 'bad argument #1 to ''?'' (string expected)'
...
tonumber64(ffi.new('double', 10), 2)
---
- error: 'bad argument #1 to ''?'' (string expected)'
...
-- invalid types - return nil
ffi.cdef("struct __tonumber64_test {};")
---
...
tonumber64(ffi.new('struct __tonumber64_test'))
---
- null
...
tonumber64(nil)
---
- null
...
tonumber64(function() end)
---
- null
...
tonumber64({})
---
- null
...
collectgarbage('collect')
---
- 0
...
--  dostring()
dostring('abc')
---
- error: '[string "abc"]:1: ''='' expected near ''<eof>'''
...
dostring('abc=2')
---
...
dostring('return abc')
---
- 2
...
dostring('return ...', 1, 2, 3)
---
- 1
- 2
- 3
...
--  A test case for Bug#1043804 lua error() -> server crash
error()
---
- error: null
...
--  A test case for bitwise operations
bit.lshift(1, 32)
---
- 1
...
bit.band(1, 3)
---
- 1
...
bit.bor(1, 2)
---
- 3
...
space:truncate()
---
...
fifo = require('fifo')
---
...
fifo.fifomax
---
- 5
...
fifo.fifo_push(space, 1, 1)
---
- [1, 4, 5, 1, 0, 0, 0, 0]
...
fifo.fifo_push(space, 1, 2)
---
- [1, 5, 6, 1, 2, 0, 0, 0]
...
fifo.fifo_push(space, 1, 3)
---
- [1, 6, 7, 1, 2, 3, 0, 0]
...
fifo.fifo_push(space, 1, 4)
---
- [1, 7, 8, 1, 2, 3, 4, 0]
...
fifo.fifo_push(space, 1, 5)
---
- [1, 8, 4, 1, 2, 3, 4, 5]
...
fifo.fifo_push(space, 1, 6)
---
- [1, 4, 5, 6, 2, 3, 4, 5]
...
fifo.fifo_push(space, 1, 7)
---
- [1, 5, 6, 6, 7, 3, 4, 5]
...
fifo.fifo_push(space, 1, 8)
---
- [1, 6, 7, 6, 7, 8, 4, 5]
...
fifo.fifo_top(space, 1)
---
- 8
...
space:delete{1}
---
- [1, 6, 7, 6, 7, 8, 4, 5]
...
fifo.fifo_top(space, 1)
---
- 0
...
space:delete{1}
---
- [1, 4, 4, 0, 0, 0, 0, 0]
...
space:drop()
---
...
test_run:cmd("clear filter")
---
- true
...
-- test test_run:grep_log()
require('log').info('Incorrect password supplied')
---
...
test_run:grep_log("default", "password")
---
- password
...
-- some collation test
s = box.schema.space.create('test')
---
...
not not s:create_index('test1', {parts = {{1, 'string', collation = 'Unicode'}}})
---
- true
...
not not s:create_index('test2', {parts = {{2, 'string', collation = 'UNICODE'}}})
---
- true
...
not not s:create_index('test3', {parts = {{3, 'string', collation = 'UnIcOdE'}}}) -- I'd prefer to panic on that
---
- true
...
s:create_index('test4', {parts = {{4, 'string'}}}).parts
---
- - type: string
    is_nullable: false
    fieldno: 4
...
s:create_index('test5', {parts = {{5, 'string', collation = 'Unicode'}}}).parts
---
- - type: string
    is_nullable: false
    collation: unicode
    fieldno: 5
...
s:drop()
---
...
s = box.schema.space.create('test')
---
...
not not s:create_index('test1', {parts = {{1, 'scalar', collation = 'unicode_ci'}}})
---
- true
...
s:replace{1} s:replace{1.1} s:replace{false}
---
...
s:replace{'Блин'} s:replace{'Ёж'} s:replace{'ешь'} s:replace{'Же'} s:replace{'Уже'}
---
...
s:replace{'drop'} s:replace{'table'} s:replace{'users'}
---
...
s:select{}
---
- - [false]
  - [1]
  - [1.1]
  - ['drop']
  - ['table']
  - ['users']
  - ['Блин']
  - ['Ёж']
  - ['ешь']
  - ['Же']
  - ['Уже']
...
s:select{'еж'}
---
- - ['Ёж']
...
s:drop()
---
...
s = box.schema.space.create('test')
---
...
not not s:create_index('test1', {parts = {{1, 'number', collation = 'unicode_ci'}}})
---
- error: 'Wrong index options (field 1): collation is reasonable only for string and
    scalar parts'
...
not not s:create_index('test2', {parts = {{2, 'unsigned', collation = 'unicode_ci'}}})
---
- error: 'Wrong index options (field 1): collation is reasonable only for string and
    scalar parts'
...
not not s:create_index('test3', {parts = {{3, 'integer', collation = 'unicode_ci'}}})
---
- error: 'Wrong index options (field 1): collation is reasonable only for string and
    scalar parts'
...
not not s:create_index('test4', {parts = {{4, 'boolean', collation = 'unicode_ci'}}})
---
- error: 'Wrong index options (field 1): collation is reasonable only for string and
    scalar parts'
...
s:drop()
---
...
--
-- gh-2068 no error for invalid user during space creation
--
s = box.schema.space.create('test', {user="no_such_user"})
---
- error: User 'no_such_user' is not found
...
--
-- gh-3659 assertion failure after an error in code called from
-- box.session.su()
--
box.session.su("admin", function(x) return #x end, 3)
---
- error: '[string "return box.session.su("admin", function(x) re..."]:1: attempt to
    get length of local ''x'' (a number value)'
...
-- Too long WAL write warning (gh-2743).
s = box.schema.space.create('test')
---
...
_ = s:create_index('pk')
---
...
too_long_threshold = box.cfg.too_long_threshold
---
...
box.cfg{too_long_threshold = 0} -- log everything
---
...
expected_rows = 3
---
...
expected_lsn = box.info.lsn + 1
---
...
box.begin() for i = 1, expected_rows do s:insert{i} end box.commit()
---
...
msg = test_run:grep_log('default', 'too long WAL write.*')
---
...
rows, lsn = string.match(msg, '(%d+) rows at LSN (%d+)')
---
...
rows = tonumber(rows)
---
...
lsn = tonumber(lsn)
---
...
rows == expected_rows
---
- true
...
lsn == expected_lsn
---
- true
...
box.cfg{too_long_threshold = too_long_threshold}
---
...
s:drop()
---
...
--
-- gh-2978: Function to parse space format.
-- In next tests we should receive cdata("struct tuple_format *").
-- We do not have a way to check cdata in Lua, but there should be
-- no errors.
--
-- Without argument it is equivalent to new_tuple_format({})
tuple_format = box.internal.new_tuple_format()
---
...
-- If no type that type == "any":
format = {}
---
...
format[1] = {}
---
...
format[1].name = 'aaa'
---
...
tuple_format = box.internal.new_tuple_format(format)
---
...
-- Function space:format() without arguments returns valid format:
tuple_format = box.internal.new_tuple_format(box.space._space:format())
---
...
-- Check is_nullable option fo field
format[1].is_nullable = true
---
...
tuple_format = box.internal.new_tuple_format(format)
---
...
--
-- Test that calling _say using FFI w/ null filepointer doesn't
-- segfault
--
box.cfg{}
---
...
local ffi = require'ffi' ffi.C._say(ffi.C.S_WARN, nil, 0, nil, "%s", "test log")
---
...
test_run:grep_log('default', 'test log')
---
- test log
...
--
-- gh-2866: one more way to declare index parts
--
s = box.schema.space.create('test')
---
...
i = s:create_index('test1', {parts = {{1, 'unsigned'}}})
---
...
i = s:create_index('test2', {parts = {{2, 'string', is_nullable = true, collation = 'unicode'}}})
---
...
i.parts
---
- - type: string
    is_nullable: true
    collation: unicode
    fieldno: 2
...
i = s:create_index('test4', {parts = {3, 'string', is_nullable = true}})
---
...
i.parts
---
- - type: string
    is_nullable: true
    fieldno: 3
...
i = s:create_index('test5', {parts = {3, 'string', collation = 'unicode'}})
---
...
i.parts
---
- - type: string
    is_nullable: false
    collation: unicode
    fieldno: 3
...
i = s:create_index('test6', {parts = {4, 'string'}})
---
...
i.parts
---
- - type: string
    is_nullable: false
    fieldno: 4
...
s:drop()
---
...
--
-- gh-5473: forbid specifying index options in key parts
--
--
s = box.schema.space.create('test')
---
...
i = s:create_index('test1', {parts = {1, 'unsigned', unique=false}})
---
- error: 'Wrong index options (field 1): unexpected option ''unique'''
...
i = s:create_index('test1', {parts = {1, 'unsigned', distance=3}})
---
- error: 'Wrong index options (field 1): unexpected option ''distance'''
...
i = s:create_index('test1', {parts = {2, 'string', 3, 'string', unique=false}})
---
- error: 'Illegal parameters, options.parts: expected field_no (number), type (string)
    pairs'
...
i = s:create_index('test1', {parts = {2, 'string', 3, 'string', distance=3}})
---
- error: 'Illegal parameters, options.parts: expected field_no (number), type (string)
    pairs'
...
i = s:create_index('test1', {parts = {{1,'int', distance=3}, {field=2, type='int'}}})
---
- error: 'Wrong index options (field 1): unexpected option ''distance'''
...
i = s:create_index('test1', {parts = {{1,'int'}, {field=2, type='int', type='hash'}}})
---
- error: 'Wrong index parts: unknown field type; expected field1 id (number), field1
    type (string), ...'
...
i = s:create_index('test1', {parts = {{1,'int'}, {2, field=2, type='int'}}})
---
- error: 'Illegal parameters, options.parts[2]: unexpected option 2'
...
i = s:create_index('test1', {parts = {{1,'int'}, {field=2, type='int', 'asd'}}})
---
- error: 'Illegal parameters, options.parts[2]: unexpected option asd'
...
i = s:create_index('test1', {parts = {1,'int', 'asd'}})
---
- error: 'Illegal parameters, options.parts: expected field_no (number), type (string)
    pairs'
...
i = s:create_index('test1', {parts = {{1, 'int'}, {2, 'int', 'asd'}}})
---
- error: 'Illegal parameters, options.parts[2]: unexpected option asd'
...
i = s:create_index('test1', {parts = {{2, type='unsigned', 'asd'}, {1, 'int'}}})
---
- error: 'Illegal parameters, options.parts[1]: unexpected option asd'
...
i = s:create_index('test1', {parts = {{1, 'int'}, {2, 'asd', type='unsigned'}}})
---
- error: 'Illegal parameters, options.parts[2]: unexpected option asd'
...
i = s:create_index('test1', {parts = {{'asd', 2, type='unsigned'}}})
---
- error: 'Illegal parameters, options.parts[1]: field was not found by name ''asd'''
...
i = s:create_index('test1', {parts = {{1, 'int'}, {2, type='asd'}}})
---
- error: 'Wrong index parts: unknown field type; expected field1 id (number), field1
    type (string), ...'
...
s:drop()
---
...
