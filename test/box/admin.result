env = require('test_run')
---
...
test_run = env.new()
---
...
test_run:cmd('restart server default')
space = box.schema.space.create('tweedledum')
---
...
index = space:create_index('primary')
---
...
help()
---
- - |
    To get help, see the Tarantool manual at https://tarantool.io/en/doc/
    To start the interactive Tarantool tutorial, type 'tutorial()' here.

    Available backslash commands:

      \set language <language>   -- set language (lua or sql)
      \set output <format>       -- set output format (lua[,line|block] or yaml)
      \set delimiter <delimiter> -- set expression delimiter
      \help                      -- show this screen
      \quit                      -- quit interactive console
...
cfg_filter(box.cfg)
---
- - - background
    - false
  - - checkpoint_count
    - 2
  - - checkpoint_interval
    - 3600
  - - checkpoint_wal_threshold
    - 1000000000000000000
  - - coredump
    - false
  - - election_mode
    - off
  - - election_timeout
    - 5
  - - feedback_crashinfo
    - true
  - - feedback_enabled
    - true
  - - feedback_host
    - https://feedback.tarantool.io
  - - feedback_interval
    - 3600
  - - force_recovery
    - false
  - - hot_standby
    - false
  - - iproto_threads
    - 1
  - - listen
    - <hidden>
  - - log
    - <hidden>
  - - log_format
    - plain
  - - log_level
    - 5
  - - memtx_allocator
    - <hidden>
  - - memtx_dir
    - <hidden>
  - - memtx_max_tuple_size
    - <hidden>
  - - memtx_memory
    - 107374182
  - - memtx_min_tuple_size
    - <hidden>
  - - memtx_use_mvcc_engine
    - false
  - - net_msg_max
    - 768
  - - pid_file
    - <hidden>
  - - read_only
    - false
  - - readahead
    - 16320
  - - replication_anon
    - false
  - - replication_connect_timeout
    - 30
  - - replication_skip_conflict
    - false
  - - replication_sync_lag
    - 10
  - - replication_sync_timeout
    - <hidden>
  - - replication_synchro_quorum
    - 1
  - - replication_synchro_timeout
    - 5
  - - replication_timeout
    - 1
  - - slab_alloc_factor
    - 1.05
  - - slab_alloc_granularity
    - 8
  - - sql_cache_size
    - 5242880
  - - strip_core
    - true
  - - too_long_threshold
    - 0.5
  - - vinyl_bloom_fpr
    - 0.05
  - - vinyl_cache
    - 134217728
  - - vinyl_dir
    - <hidden>
  - - vinyl_max_tuple_size
    - 1048576
  - - vinyl_memory
    - 134217728
  - - vinyl_page_size
    - 8192
  - - vinyl_read_threads
    - 1
  - - vinyl_run_count_per_level
    - 2
  - - vinyl_run_size_ratio
    - 3.5
  - - vinyl_timeout
    - 60
  - - vinyl_write_threads
    - 4
  - - wal_cleanup_delay
    - 14400
  - - wal_dir
    - <hidden>
  - - wal_dir_rescan_delay
    - 2
  - - wal_max_size
    - 268435456
  - - wal_mode
    - write
  - - wal_queue_max_size
    - 16777216
  - - worker_pool_threads
    - 4
...
space:insert{1, 'tuple'}
---
- [1, 'tuple']
...
box.snapshot()
---
- ok
...
space:delete{1}
---
- [1, 'tuple']
...
test_run:cmd("setopt delimiter ';'")
---
- true
...
function check_type(arg, typeof)
    return type(arg) == typeof
end;
---
...
function test_box_info()
    local tmp = box.info()
    local num = {'pid', 'uptime'}
    local str = {'version', 'status' }
    local failed = {}
    if check_type(tmp.replication, 'table') == false then
        table.insert(failed, 'box.info().replication')
    else
        tmp.replication = nil
    end
    for k, v in ipairs(num) do
        if check_type(tmp[v], 'number') == false then
            table.insert(failed, 'box.info().'..v)
        else
            tmp[v] = nil
        end
    end
    for k, v in ipairs(str) do
        if check_type(tmp[v], 'string') == false then
            table.insert(failed, 'box.info().'..v)
        else
            tmp[v] = nil
        end
    end
    if #tmp > 0 or #failed > 0 then
        return 'box.info() is not ok.', 'failed: ', failed, tmp
    else
        return 'box.info() is ok.'
    end
end;
---
...
function test_slab(tbl)
    local num = {'item_size', 'item_count', 'slab_size', 'slab_count', 'mem_used', 'mem_free'}
    local failed = {}
    for k, v in ipairs(num) do
        if check_type(tbl[v], 'number') == false then
            table.insert(failed, 'box.slab.info().<slab_size>.'..v)
        else
            tbl[v] = nil
        end
    end
    if #tbl > 0 or #failed > 0 then
        return false, failed
    else
        return true, {}
    end
end;
---
...
function test_box_slab_info()
    local tmp = box.slab.info()
    local tmp_slabs = box.slab.stats()
    local cdata = {'arena_size', 'arena_used'}
    local failed = {}
    if type(tmp_slabs) == 'table' then
        for name, tbl in ipairs(tmp_slabs) do
            local bl, fld = test_slab(tbl)
            if bl == true then
                tmp[name] = nil
            else
                for k, v in ipairs(fld) do
                    table.insert(failed, v)
                end
            end
        end
    else
        table.insert(failed, 'box.slab.info().slabs is not ok')
    end
    if #tmp_slabs == 0 then
        tmp_slabs = nil
    end
    for k, v in ipairs(cdata) do
        if check_type(tmp[v], 'number') == false then
            table.insert(failed, 'box.slab.info().'..v)
        else
            tmp[v] = nil
        end
    end
    if #tmp > 0 or #failed > 0 then
        return "box.slab.info() is not ok", tmp, failed
    else
        return "box.slab.info() is ok"
    end
end;
---
...
function test_fiber(tbl)
    local num = {'fid', 'csw'}
    for k, v in ipairs(num) do
        if check_type(tmp[v], 'number') == false then
            table.insert(failed, "require('fiber').info().<fiber_name>."..v)
        else
            tmp[v] = nil
        end
    end
    if type(tbl.backtrace) == 'table' and #tbl.backtrace > 0 then
        tbl.backtrace = nil
    else
        table.insert(failed, 'backtrace')
    end
    if #tbl > 0 or #failed > 0 then
        return false, failed
    else
        return true, {}
    end
end;
---
...
function test_box_fiber_info()
    local tmp = require('fiber').info()
    local failed = {}
    for name, tbl in ipairs(tmp) do
        local bl, fld = test_fiber(tbl)
        if bl == true then
            tmp[name] = nil
        else
            for k, v in ipairs(fld) do
                table.insert(failed, v)
            end
        end
    end
    if #tmp > 0 or #failed > 0 then
        return "require('fiber').info is not ok. failed: ", tmp, failed
    else
        return "require('fiber').info() is ok"
    end
end;
---
...
test_box_info();
---
- box.info() is ok.
...
test_box_slab_info();
---
- box.slab.info() is ok
...
test_box_fiber_info();
---
- require('fiber').info() is ok
...
space:drop();
---
...
test_run:cmd("setopt delimiter ''");
---
- true
...
