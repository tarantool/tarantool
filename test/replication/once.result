fiber = require('fiber')
---
...
box.once()
---
- error: 'Usage: box.once(key, func, ...)'
...
box.once("key")
---
- error: 'Usage: box.once(key, func, ...)'
...
box.once("key", "key")
---
- error: 'Usage: box.once(key, func, ...)'
...
box.once("key", nil)
---
- error: 'Usage: box.once(key, func, ...)'
...
box.once("key", function() end)
---
...
once  = nil
---
...
function f(arg) if once ~= nil then once = once + arg else once = arg end end
---
...
box.once("test", f, 1)
---
...
once
---
- 1
...
box.once("test", f, 1)
---
...
once
---
- 1
...
-- Check that box.once() does not fail if the instance is read-only,
-- instead it waits until the instance enters read-write mode.
once = nil
---
...
box.cfg{read_only = true}
---
...
ch = fiber.channel(1)
---
...
_ = fiber.create(function() box.once("ro", f, 1) ch:put(true) end)
---
...
fiber.sleep(0.001)
---
...
once -- nil
---
- null
...
box.cfg{read_only = false}
---
...
ch:get()
---
- true
...
once -- 1
---
- 1
...
box.cfg{read_only = true}
---
...
box.once("ro", f, 1) -- ok, already done
---
...
once -- 1
---
- 1
...
box.cfg{read_only = false}
---
...
box.space._schema:delete{"oncero"}
---
- ['oncero']
...
box.space._schema:delete{"oncekey"}
---
- ['oncekey']
...
box.space._schema:delete{"oncetest"}
---
- ['oncetest']
...
