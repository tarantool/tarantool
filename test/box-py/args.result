tarantool --help
Tarantool 3.<minor>.<patch>-<suffix>

Connect to an instance:

  tt connect <uri>

Execute Lua script with bundled LuaJIT:

  tarantool old-style-script.lua [OPTIONS] [ARGS]

Run interactive LuaJIT interpreter:

  tarantool -i

Usage:

  tarantool [OPTIONS] [SCRIPT [ARGS]]

Options:

 -h, --help             display this help and exit
 -v, --version          print program version and exit
 -i                     enter interactive mode
 -e EXPR                execute string 'EXPR'
 -l NAME                require library 'NAME'
 -j cmd                 perform LuaJIT control command
 -b ...                 save or list bytecode
 -d                     activate debugging session for script
 --                     stop handling options
 -                      execute stdin and stop handling options

Please visit project home page at https://tarantool.org
to see online documentation, submit bugs or contribute a patch.

tarantool -h
Tarantool 3.<minor>.<patch>-<suffix>

Connect to an instance:

  tt connect <uri>

Execute Lua script with bundled LuaJIT:

  tarantool old-style-script.lua [OPTIONS] [ARGS]

Run interactive LuaJIT interpreter:

  tarantool -i

Usage:

  tarantool [OPTIONS] [SCRIPT [ARGS]]

Options:

 -h, --help             display this help and exit
 -v, --version          print program version and exit
 -i                     enter interactive mode
 -e EXPR                execute string 'EXPR'
 -l NAME                require library 'NAME'
 -j cmd                 perform LuaJIT control command
 -b ...                 save or list bytecode
 -d                     activate debugging session for script
 --                     stop handling options
 -                      execute stdin and stop handling options

Please visit project home page at https://tarantool.org
to see online documentation, submit bugs or contribute a patch.

tarantool -Z
tarantool: invalid option

tarantool --no-such-option
tarantool: unrecognized option

tarantool --no-such-option --version
tarantool: unrecognized option

tarantool --version
Tarantool 3.<minor>.<patch>-<suffix>
Target: platform <build>
Build options: flags
Compiler: cc
C_FLAGS: flags
CXX_FLAGS: flags

tarantool -v
Tarantool 3.<minor>.<patch>-<suffix>
Target: platform <build>
Build options: flags
Compiler: cc
C_FLAGS: flags
CXX_FLAGS: flags

tarantool -V
Tarantool 3.<minor>.<patch>-<suffix>
Target: platform <build>
Build options: flags
Compiler: cc
C_FLAGS: flags
CXX_FLAGS: flags

tarantool ${SOURCEDIR}/test/box-py/args.lua
arg[-1] => tarantool
arg[0] => ${SOURCEDIR}/test/box-py/args.lua

tarantool ${SOURCEDIR}/test/box-py/args.lua 1 2 3
arg[-1] => tarantool
arg[0] => ${SOURCEDIR}/test/box-py/args.lua
arg[1] => 1
arg[2] => 2
arg[3] => 3

tarantool ${SOURCEDIR}/test/box-py/args.lua 1 2 3 -V
arg[-1] => tarantool
arg[0] => ${SOURCEDIR}/test/box-py/args.lua
arg[1] => 1
arg[2] => 2
arg[3] => 3
arg[4] => -V

tarantool ${SOURCEDIR}/test/box-py/args.lua -V 1 2 3
arg[-1] => tarantool
arg[0] => ${SOURCEDIR}/test/box-py/args.lua
arg[1] => -V
arg[2] => 1
arg[3] => 2
arg[4] => 3

tarantool ${SOURCEDIR}/test/box-py/args.lua 1 2 3 --help
arg[-1] => tarantool
arg[0] => ${SOURCEDIR}/test/box-py/args.lua
arg[1] => 1
arg[2] => 2
arg[3] => 3
arg[4] => --help

tarantool ${SOURCEDIR}/test/box-py/args.lua --help 1 2 3
arg[-1] => tarantool
arg[0] => ${SOURCEDIR}/test/box-py/args.lua
arg[1] => --help
arg[2] => 1
arg[3] => 2
arg[4] => 3

tarantool -V ${SOURCEDIR}/test/box-py/args.lua 1 2 3
Tarantool 3.<minor>.<patch>-<suffix>
Target: platform <build>
Build options: flags
Compiler: cc
C_FLAGS: flags
CXX_FLAGS: flags

tarantool -e print(1) os.exit() print(2)
1

tarantool -e print(1) -e os.exit() -e print(1) -e os.exit() -e print(1)
1

tarantool -e print('Hello') ${SOURCEDIR}/test/box-py/args.lua 1 2 3
Hello
arg[-1] => tarantool
arg[0] => ${SOURCEDIR}/test/box-py/args.lua
arg[1] => 1
arg[2] => 2
arg[3] => 3

tarantool -e a = 10 -e print(a) ${SOURCEDIR}/test/box-py/args.lua 1 2 3 --help
10
arg[-1] => tarantool
arg[0] => ${SOURCEDIR}/test/box-py/args.lua
arg[1] => 1
arg[2] => 2
arg[3] => 3
arg[4] => --help

tarantool -e print(rawget(_G, 'log') == nil) -e io.flush() -l log -e print(log.info('Hello')) ${SOURCEDIR}/test/box-py/args.lua 1 2 3 --help
true
Hello

arg[-1] => tarantool
arg[0] => ${SOURCEDIR}/test/box-py/args.lua
arg[1] => 1
arg[2] => 2
arg[3] => 3
arg[4] => --help

-b
Save LuaJIT bytecode: luajit -b[options] input output
  -l        Only list bytecode.
  -s        Strip debug info (default).
  -g        Keep debug info.
  -n name   Set module name (default: auto-detect from input name).
  -t type   Set output file type (default: auto-detect from output name).
  -a arch   Override architecture for object files (default: native).
  -o os     Override OS for object files (default: native).
  -e chunk  Use chunk string as input.
  --        Stop handling options.
  -         Use stdin as input and/or stdout as output.

File types: c h obj o raw (default)
-bl -e ''
-- BYTECODE -- "":0-1
0001    RET0     0   1

-b -l -e ''
-- BYTECODE -- "":0-1
0001    RET0     0   1

-b -e '' output
-jon -e ''
-j on -e ''
