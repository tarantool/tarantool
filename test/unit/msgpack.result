1..24
    1..135
    # *** test_uints ***
    # uint 0U
    ok 1 - mp_check_uint(0U) == 0
    ok 2 - mp_decode(mp_encode(0U)) == 0U
    ok 3 - mp_check(0U)
    ok 4 - len(mp_encode_uint(0U)
    ok 5 - len(mp_decode_uint(0U))
    ok 6 - len(mp_next_uint(0U))
    ok 7 - len(mp_check_uint(0U))
    ok 8 - mp_sizeof_uint(0U)
    ok 9 - mp_encode(0U) == "\x00"
    # uint 1U
    ok 10 - mp_check_uint(1U) == 0
    ok 11 - mp_decode(mp_encode(1U)) == 1U
    ok 12 - mp_check(1U)
    ok 13 - len(mp_encode_uint(1U)
    ok 14 - len(mp_decode_uint(1U))
    ok 15 - len(mp_next_uint(1U))
    ok 16 - len(mp_check_uint(1U))
    ok 17 - mp_sizeof_uint(1U)
    ok 18 - mp_encode(1U) == "\x01"
    # uint 0x7eU
    ok 19 - mp_check_uint(0x7eU) == 0
    ok 20 - mp_decode(mp_encode(0x7eU)) == 0x7eU
    ok 21 - mp_check(0x7eU)
    ok 22 - len(mp_encode_uint(0x7eU)
    ok 23 - len(mp_decode_uint(0x7eU))
    ok 24 - len(mp_next_uint(0x7eU))
    ok 25 - len(mp_check_uint(0x7eU))
    ok 26 - mp_sizeof_uint(0x7eU)
    ok 27 - mp_encode(0x7eU) == "\x7e"
    # uint 0x7fU
    ok 28 - mp_check_uint(0x7fU) == 0
    ok 29 - mp_decode(mp_encode(0x7fU)) == 0x7fU
    ok 30 - mp_check(0x7fU)
    ok 31 - len(mp_encode_uint(0x7fU)
    ok 32 - len(mp_decode_uint(0x7fU))
    ok 33 - len(mp_next_uint(0x7fU))
    ok 34 - len(mp_check_uint(0x7fU))
    ok 35 - mp_sizeof_uint(0x7fU)
    ok 36 - mp_encode(0x7fU) == "\x7f"
    # uint 0x80U
    ok 37 - mp_check_uint(0x80U) == 0
    ok 38 - mp_decode(mp_encode(0x80U)) == 0x80U
    ok 39 - mp_check(0x80U)
    ok 40 - len(mp_encode_uint(0x80U)
    ok 41 - len(mp_decode_uint(0x80U))
    ok 42 - len(mp_next_uint(0x80U))
    ok 43 - len(mp_check_uint(0x80U))
    ok 44 - mp_sizeof_uint(0x80U)
    ok 45 - mp_encode(0x80U) == "\xcc\x80"
    # uint 0xfeU
    ok 46 - mp_check_uint(0xfeU) == 0
    ok 47 - mp_decode(mp_encode(0xfeU)) == 0xfeU
    ok 48 - mp_check(0xfeU)
    ok 49 - len(mp_encode_uint(0xfeU)
    ok 50 - len(mp_decode_uint(0xfeU))
    ok 51 - len(mp_next_uint(0xfeU))
    ok 52 - len(mp_check_uint(0xfeU))
    ok 53 - mp_sizeof_uint(0xfeU)
    ok 54 - mp_encode(0xfeU) == "\xcc\xfe"
    # uint 0xffU
    ok 55 - mp_check_uint(0xffU) == 0
    ok 56 - mp_decode(mp_encode(0xffU)) == 0xffU
    ok 57 - mp_check(0xffU)
    ok 58 - len(mp_encode_uint(0xffU)
    ok 59 - len(mp_decode_uint(0xffU))
    ok 60 - len(mp_next_uint(0xffU))
    ok 61 - len(mp_check_uint(0xffU))
    ok 62 - mp_sizeof_uint(0xffU)
    ok 63 - mp_encode(0xffU) == "\xcc\xff"
    # uint 0xfffeU
    ok 64 - mp_check_uint(0xfffeU) == 0
    ok 65 - mp_decode(mp_encode(0xfffeU)) == 0xfffeU
    ok 66 - mp_check(0xfffeU)
    ok 67 - len(mp_encode_uint(0xfffeU)
    ok 68 - len(mp_decode_uint(0xfffeU))
    ok 69 - len(mp_next_uint(0xfffeU))
    ok 70 - len(mp_check_uint(0xfffeU))
    ok 71 - mp_sizeof_uint(0xfffeU)
    ok 72 - mp_encode(0xfffeU) == "\xcd\xff\xfe"
    # uint 0xffffU
    ok 73 - mp_check_uint(0xffffU) == 0
    ok 74 - mp_decode(mp_encode(0xffffU)) == 0xffffU
    ok 75 - mp_check(0xffffU)
    ok 76 - len(mp_encode_uint(0xffffU)
    ok 77 - len(mp_decode_uint(0xffffU))
    ok 78 - len(mp_next_uint(0xffffU))
    ok 79 - len(mp_check_uint(0xffffU))
    ok 80 - mp_sizeof_uint(0xffffU)
    ok 81 - mp_encode(0xffffU) == "\xcd\xff\xff"
    # uint 0x10000U
    ok 82 - mp_check_uint(0x10000U) == 0
    ok 83 - mp_decode(mp_encode(0x10000U)) == 0x10000U
    ok 84 - mp_check(0x10000U)
    ok 85 - len(mp_encode_uint(0x10000U)
    ok 86 - len(mp_decode_uint(0x10000U))
    ok 87 - len(mp_next_uint(0x10000U))
    ok 88 - len(mp_check_uint(0x10000U))
    ok 89 - mp_sizeof_uint(0x10000U)
    ok 90 - mp_encode(0x10000U) == "\xce\x00\x01\x00\x00"
    # uint 0xfffffffeU
    ok 91 - mp_check_uint(0xfffffffeU) == 0
    ok 92 - mp_decode(mp_encode(0xfffffffeU)) == 0xfffffffeU
    ok 93 - mp_check(0xfffffffeU)
    ok 94 - len(mp_encode_uint(0xfffffffeU)
    ok 95 - len(mp_decode_uint(0xfffffffeU))
    ok 96 - len(mp_next_uint(0xfffffffeU))
    ok 97 - len(mp_check_uint(0xfffffffeU))
    ok 98 - mp_sizeof_uint(0xfffffffeU)
    ok 99 - mp_encode(0xfffffffeU) == "\xce\xff\xff\xff\xfe"
    # uint 0xffffffffU
    ok 100 - mp_check_uint(0xffffffffU) == 0
    ok 101 - mp_decode(mp_encode(0xffffffffU)) == 0xffffffffU
    ok 102 - mp_check(0xffffffffU)
    ok 103 - len(mp_encode_uint(0xffffffffU)
    ok 104 - len(mp_decode_uint(0xffffffffU))
    ok 105 - len(mp_next_uint(0xffffffffU))
    ok 106 - len(mp_check_uint(0xffffffffU))
    ok 107 - mp_sizeof_uint(0xffffffffU)
    ok 108 - mp_encode(0xffffffffU) == "\xce\xff\xff\xff\xff"
    # uint 0x100000000ULL
    ok 109 - mp_check_uint(0x100000000ULL) == 0
    ok 110 - mp_decode(mp_encode(0x100000000ULL)) == 0x100000000ULL
    ok 111 - mp_check(0x100000000ULL)
    ok 112 - len(mp_encode_uint(0x100000000ULL)
    ok 113 - len(mp_decode_uint(0x100000000ULL))
    ok 114 - len(mp_next_uint(0x100000000ULL))
    ok 115 - len(mp_check_uint(0x100000000ULL))
    ok 116 - mp_sizeof_uint(0x100000000ULL)
    ok 117 - mp_encode(0x100000000ULL) == "\xcf\x00\x00\x00\x01\x00\x00\x00\x00"
    # uint 0xfffffffffffffffeULL
    ok 118 - mp_check_uint(0xfffffffffffffffeULL) == 0
    ok 119 - mp_decode(mp_encode(0xfffffffffffffffeULL)) == 0xfffffffffffffffeULL
    ok 120 - mp_check(0xfffffffffffffffeULL)
    ok 121 - len(mp_encode_uint(0xfffffffffffffffeULL)
    ok 122 - len(mp_decode_uint(0xfffffffffffffffeULL))
    ok 123 - len(mp_next_uint(0xfffffffffffffffeULL))
    ok 124 - len(mp_check_uint(0xfffffffffffffffeULL))
    ok 125 - mp_sizeof_uint(0xfffffffffffffffeULL)
    ok 126 - mp_encode(0xfffffffffffffffeULL) == "\xcf\xff\xff\xff\xff\xff\xff\xff\xfe"
    # uint 0xffffffffffffffffULL
    ok 127 - mp_check_uint(0xffffffffffffffffULL) == 0
    ok 128 - mp_decode(mp_encode(0xffffffffffffffffULL)) == 0xffffffffffffffffULL
    ok 129 - mp_check(0xffffffffffffffffULL)
    ok 130 - len(mp_encode_uint(0xffffffffffffffffULL)
    ok 131 - len(mp_decode_uint(0xffffffffffffffffULL))
    ok 132 - len(mp_next_uint(0xffffffffffffffffULL))
    ok 133 - len(mp_check_uint(0xffffffffffffffffULL))
    ok 134 - mp_sizeof_uint(0xffffffffffffffffULL)
    ok 135 - mp_encode(0xffffffffffffffffULL) == "\xcf\xff\xff\xff\xff\xff\xff\xff\xff"
    # *** test_uints: done ***
ok 1 - subtests
    1..153
    # *** test_ints ***
    # int -0x01
    ok 1 - mp_check_int(-0x01) == 0
    ok 2 - mp_decode(mp_encode(-0x01)) == -0x01
    ok 3 - mp_check(-0x01)
    ok 4 - len(mp_encode_int(-0x01)
    ok 5 - len(mp_decode_int(-0x01))
    ok 6 - len(mp_next_int(-0x01))
    ok 7 - len(mp_check_int(-0x01))
    ok 8 - mp_sizeof_int(-0x01)
    ok 9 - mp_encode(-0x01) == "\xff"
    # int -0x1e
    ok 10 - mp_check_int(-0x1e) == 0
    ok 11 - mp_decode(mp_encode(-0x1e)) == -0x1e
    ok 12 - mp_check(-0x1e)
    ok 13 - len(mp_encode_int(-0x1e)
    ok 14 - len(mp_decode_int(-0x1e))
    ok 15 - len(mp_next_int(-0x1e))
    ok 16 - len(mp_check_int(-0x1e))
    ok 17 - mp_sizeof_int(-0x1e)
    ok 18 - mp_encode(-0x1e) == "\xe2"
    # int -0x1f
    ok 19 - mp_check_int(-0x1f) == 0
    ok 20 - mp_decode(mp_encode(-0x1f)) == -0x1f
    ok 21 - mp_check(-0x1f)
    ok 22 - len(mp_encode_int(-0x1f)
    ok 23 - len(mp_decode_int(-0x1f))
    ok 24 - len(mp_next_int(-0x1f))
    ok 25 - len(mp_check_int(-0x1f))
    ok 26 - mp_sizeof_int(-0x1f)
    ok 27 - mp_encode(-0x1f) == "\xe1"
    # int -0x20
    ok 28 - mp_check_int(-0x20) == 0
    ok 29 - mp_decode(mp_encode(-0x20)) == -0x20
    ok 30 - mp_check(-0x20)
    ok 31 - len(mp_encode_int(-0x20)
    ok 32 - len(mp_decode_int(-0x20))
    ok 33 - len(mp_next_int(-0x20))
    ok 34 - len(mp_check_int(-0x20))
    ok 35 - mp_sizeof_int(-0x20)
    ok 36 - mp_encode(-0x20) == "\xe0"
    # int -0x21
    ok 37 - mp_check_int(-0x21) == 0
    ok 38 - mp_decode(mp_encode(-0x21)) == -0x21
    ok 39 - mp_check(-0x21)
    ok 40 - len(mp_encode_int(-0x21)
    ok 41 - len(mp_decode_int(-0x21))
    ok 42 - len(mp_next_int(-0x21))
    ok 43 - len(mp_check_int(-0x21))
    ok 44 - mp_sizeof_int(-0x21)
    ok 45 - mp_encode(-0x21) == "\xd0\xdf"
    # int -0x7f
    ok 46 - mp_check_int(-0x7f) == 0
    ok 47 - mp_decode(mp_encode(-0x7f)) == -0x7f
    ok 48 - mp_check(-0x7f)
    ok 49 - len(mp_encode_int(-0x7f)
    ok 50 - len(mp_decode_int(-0x7f))
    ok 51 - len(mp_next_int(-0x7f))
    ok 52 - len(mp_check_int(-0x7f))
    ok 53 - mp_sizeof_int(-0x7f)
    ok 54 - mp_encode(-0x7f) == "\xd0\x81"
    # int -0x80
    ok 55 - mp_check_int(-0x80) == 0
    ok 56 - mp_decode(mp_encode(-0x80)) == -0x80
    ok 57 - mp_check(-0x80)
    ok 58 - len(mp_encode_int(-0x80)
    ok 59 - len(mp_decode_int(-0x80))
    ok 60 - len(mp_next_int(-0x80))
    ok 61 - len(mp_check_int(-0x80))
    ok 62 - mp_sizeof_int(-0x80)
    ok 63 - mp_encode(-0x80) == "\xd0\x80"
    # int -0x81
    ok 64 - mp_check_int(-0x81) == 0
    ok 65 - mp_decode(mp_encode(-0x81)) == -0x81
    ok 66 - mp_check(-0x81)
    ok 67 - len(mp_encode_int(-0x81)
    ok 68 - len(mp_decode_int(-0x81))
    ok 69 - len(mp_next_int(-0x81))
    ok 70 - len(mp_check_int(-0x81))
    ok 71 - mp_sizeof_int(-0x81)
    ok 72 - mp_encode(-0x81) == "\xd1\xff\x7f"
    # int -0x7fff
    ok 73 - mp_check_int(-0x7fff) == 0
    ok 74 - mp_decode(mp_encode(-0x7fff)) == -0x7fff
    ok 75 - mp_check(-0x7fff)
    ok 76 - len(mp_encode_int(-0x7fff)
    ok 77 - len(mp_decode_int(-0x7fff))
    ok 78 - len(mp_next_int(-0x7fff))
    ok 79 - len(mp_check_int(-0x7fff))
    ok 80 - mp_sizeof_int(-0x7fff)
    ok 81 - mp_encode(-0x7fff) == "\xd1\x80\x01"
    # int -0x8000
    ok 82 - mp_check_int(-0x8000) == 0
    ok 83 - mp_decode(mp_encode(-0x8000)) == -0x8000
    ok 84 - mp_check(-0x8000)
    ok 85 - len(mp_encode_int(-0x8000)
    ok 86 - len(mp_decode_int(-0x8000))
    ok 87 - len(mp_next_int(-0x8000))
    ok 88 - len(mp_check_int(-0x8000))
    ok 89 - mp_sizeof_int(-0x8000)
    ok 90 - mp_encode(-0x8000) == "\xd1\x80\x00"
    # int -0x8001
    ok 91 - mp_check_int(-0x8001) == 0
    ok 92 - mp_decode(mp_encode(-0x8001)) == -0x8001
    ok 93 - mp_check(-0x8001)
    ok 94 - len(mp_encode_int(-0x8001)
    ok 95 - len(mp_decode_int(-0x8001))
    ok 96 - len(mp_next_int(-0x8001))
    ok 97 - len(mp_check_int(-0x8001))
    ok 98 - mp_sizeof_int(-0x8001)
    ok 99 - mp_encode(-0x8001) == "\xd2\xff\xff\x7f\xff"
    # int -0x7fffffff
    ok 100 - mp_check_int(-0x7fffffff) == 0
    ok 101 - mp_decode(mp_encode(-0x7fffffff)) == -0x7fffffff
    ok 102 - mp_check(-0x7fffffff)
    ok 103 - len(mp_encode_int(-0x7fffffff)
    ok 104 - len(mp_decode_int(-0x7fffffff))
    ok 105 - len(mp_next_int(-0x7fffffff))
    ok 106 - len(mp_check_int(-0x7fffffff))
    ok 107 - mp_sizeof_int(-0x7fffffff)
    ok 108 - mp_encode(-0x7fffffff) == "\xd2\x80\x00\x00\x01"
    # int -0x80000000LL
    ok 109 - mp_check_int(-0x80000000LL) == 0
    ok 110 - mp_decode(mp_encode(-0x80000000LL)) == -0x80000000LL
    ok 111 - mp_check(-0x80000000LL)
    ok 112 - len(mp_encode_int(-0x80000000LL)
    ok 113 - len(mp_decode_int(-0x80000000LL))
    ok 114 - len(mp_next_int(-0x80000000LL))
    ok 115 - len(mp_check_int(-0x80000000LL))
    ok 116 - mp_sizeof_int(-0x80000000LL)
    ok 117 - mp_encode(-0x80000000LL) == "\xd2\x80\x00\x00\x00"
    # int -0x80000001LL
    ok 118 - mp_check_int(-0x80000001LL) == 0
    ok 119 - mp_decode(mp_encode(-0x80000001LL)) == -0x80000001LL
    ok 120 - mp_check(-0x80000001LL)
    ok 121 - len(mp_encode_int(-0x80000001LL)
    ok 122 - len(mp_decode_int(-0x80000001LL))
    ok 123 - len(mp_next_int(-0x80000001LL))
    ok 124 - len(mp_check_int(-0x80000001LL))
    ok 125 - mp_sizeof_int(-0x80000001LL)
    ok 126 - mp_encode(-0x80000001LL) == "\xd3\xff\xff\xff\xff\x7f\xff\xff\xff"
    # int -0x80000001LL
    ok 127 - mp_check_int(-0x80000001LL) == 0
    ok 128 - mp_decode(mp_encode(-0x80000001LL)) == -0x80000001LL
    ok 129 - mp_check(-0x80000001LL)
    ok 130 - len(mp_encode_int(-0x80000001LL)
    ok 131 - len(mp_decode_int(-0x80000001LL))
    ok 132 - len(mp_next_int(-0x80000001LL))
    ok 133 - len(mp_check_int(-0x80000001LL))
    ok 134 - mp_sizeof_int(-0x80000001LL)
    ok 135 - mp_encode(-0x80000001LL) == "\xd3\xff\xff\xff\xff\x7f\xff\xff\xff"
    # int -0x7fffffffffffffffLL
    ok 136 - mp_check_int(-0x7fffffffffffffffLL) == 0
    ok 137 - mp_decode(mp_encode(-0x7fffffffffffffffLL)) == -0x7fffffffffffffffLL
    ok 138 - mp_check(-0x7fffffffffffffffLL)
    ok 139 - len(mp_encode_int(-0x7fffffffffffffffLL)
    ok 140 - len(mp_decode_int(-0x7fffffffffffffffLL))
    ok 141 - len(mp_next_int(-0x7fffffffffffffffLL))
    ok 142 - len(mp_check_int(-0x7fffffffffffffffLL))
    ok 143 - mp_sizeof_int(-0x7fffffffffffffffLL)
    ok 144 - mp_encode(-0x7fffffffffffffffLL) == "\xd3\x80\x00\x00\x00\x00\x00\x00\x01"
    # int (int64_t)-0x8000000000000000LL
    ok 145 - mp_check_int((int64_t)-0x8000000000000000LL) == 0
    ok 146 - mp_decode(mp_encode((int64_t)-0x8000000000000000LL)) == (int64_t)-0x8000000000000000LL
    ok 147 - mp_check((int64_t)-0x8000000000000000LL)
    ok 148 - len(mp_encode_int((int64_t)-0x8000000000000000LL)
    ok 149 - len(mp_decode_int((int64_t)-0x8000000000000000LL))
    ok 150 - len(mp_next_int((int64_t)-0x8000000000000000LL))
    ok 151 - len(mp_check_int((int64_t)-0x8000000000000000LL))
    ok 152 - mp_sizeof_int((int64_t)-0x8000000000000000LL)
    ok 153 - mp_encode((int64_t)-0x8000000000000000LL) == "\xd3\x80\x00\x00\x00\x00\x00\x00\x00"
    # *** test_ints: done ***
ok 2 - subtests
    1..18
    # *** test_bools ***
    # bool 1
    ok 1 - mp_check_bool(1) == 0
    ok 2 - mp_decode(mp_encode(1)) == 1
    ok 3 - mp_check(1)
    ok 4 - len(mp_encode_bool(1)
    ok 5 - len(mp_decode_bool(1))
    ok 6 - len(mp_next_bool(1))
    ok 7 - len(mp_check_bool(1))
    ok 8 - mp_sizeof_bool(1)
    ok 9 - mp_encode(1) == "\xc3"
    # bool 0
    ok 10 - mp_check_bool(0) == 0
    ok 11 - mp_decode(mp_encode(0)) == 0
    ok 12 - mp_check(0)
    ok 13 - len(mp_encode_bool(0)
    ok 14 - len(mp_decode_bool(0))
    ok 15 - len(mp_next_bool(0))
    ok 16 - len(mp_check_bool(0))
    ok 17 - mp_sizeof_bool(0)
    ok 18 - mp_encode(0) == "\xc2"
    # *** test_bools: done ***
ok 3 - subtests
    1..27
    # *** test_floats ***
    # float (float) 1.0
    ok 1 - mp_check_float((float) 1.0) == 0
    ok 2 - mp_decode(mp_encode((float) 1.0)) == (float) 1.0
    ok 3 - mp_check((float) 1.0)
    ok 4 - len(mp_encode_float((float) 1.0)
    ok 5 - len(mp_decode_float((float) 1.0))
    ok 6 - len(mp_next_float((float) 1.0))
    ok 7 - len(mp_check_float((float) 1.0))
    ok 8 - mp_sizeof_float((float) 1.0)
    ok 9 - mp_encode((float) 1.0) == "\xca\x3f\x80\x00\x00"
    # float (float) 3.141593
    ok 10 - mp_check_float((float) 3.141593) == 0
    ok 11 - mp_decode(mp_encode((float) 3.141593)) == (float) 3.141593
    ok 12 - mp_check((float) 3.141593)
    ok 13 - len(mp_encode_float((float) 3.141593)
    ok 14 - len(mp_decode_float((float) 3.141593))
    ok 15 - len(mp_next_float((float) 3.141593))
    ok 16 - len(mp_check_float((float) 3.141593))
    ok 17 - mp_sizeof_float((float) 3.141593)
    ok 18 - mp_encode((float) 3.141593) == "\xca\x40\x49\x0f\xdc"
    # float (float) -1e38f
    ok 19 - mp_check_float((float) -1e38f) == 0
    ok 20 - mp_decode(mp_encode((float) -1e38f)) == (float) -1e38f
    ok 21 - mp_check((float) -1e38f)
    ok 22 - len(mp_encode_float((float) -1e38f)
    ok 23 - len(mp_decode_float((float) -1e38f))
    ok 24 - len(mp_next_float((float) -1e38f))
    ok 25 - len(mp_check_float((float) -1e38f))
    ok 26 - mp_sizeof_float((float) -1e38f)
    ok 27 - mp_encode((float) -1e38f) == "\xca\xfe\x96\x76\x99"
    # *** test_floats: done ***
ok 4 - subtests
    1..27
    # *** test_doubles ***
    # double (double) 1.0
    ok 1 - mp_check_double((double) 1.0) == 0
    ok 2 - mp_decode(mp_encode((double) 1.0)) == (double) 1.0
    ok 3 - mp_check((double) 1.0)
    ok 4 - len(mp_encode_double((double) 1.0)
    ok 5 - len(mp_decode_double((double) 1.0))
    ok 6 - len(mp_next_double((double) 1.0))
    ok 7 - len(mp_check_double((double) 1.0))
    ok 8 - mp_sizeof_double((double) 1.0)
    ok 9 - mp_encode((double) 1.0) == "\xcb\x3f\xf0\x00\x00\x00\x00\x00\x00"
    # double (double) 3.141592653589793
    ok 10 - mp_check_double((double) 3.141592653589793) == 0
    ok 11 - mp_decode(mp_encode((double) 3.141592653589793)) == (double) 3.141592653589793
    ok 12 - mp_check((double) 3.141592653589793)
    ok 13 - len(mp_encode_double((double) 3.141592653589793)
    ok 14 - len(mp_decode_double((double) 3.141592653589793))
    ok 15 - len(mp_next_double((double) 3.141592653589793))
    ok 16 - len(mp_check_double((double) 3.141592653589793))
    ok 17 - mp_sizeof_double((double) 3.141592653589793)
    ok 18 - mp_encode((double) 3.141592653589793) == "\xcb\x40\x09\x21\xfb\x54\x44\x2d\x18"
    # double (double) -1e99
    ok 19 - mp_check_double((double) -1e99) == 0
    ok 20 - mp_decode(mp_encode((double) -1e99)) == (double) -1e99
    ok 21 - mp_check((double) -1e99)
    ok 22 - len(mp_encode_double((double) -1e99)
    ok 23 - len(mp_decode_double((double) -1e99))
    ok 24 - len(mp_next_double((double) -1e99))
    ok 25 - len(mp_check_double((double) -1e99))
    ok 26 - mp_sizeof_double((double) -1e99)
    ok 27 - mp_encode((double) -1e99) == "\xcb\xd4\x7d\x42\xae\xa2\x87\x9f\x2e"
    # *** test_doubles: done ***
ok 5 - subtests
    1..6
    # *** test_nils ***
    # nil
    ok 1 - mp_check_nil()
    ok 2 - len(mp_encode_nil() == 1
    ok 3 - len(mp_decode_nil()) == 1
    ok 4 - len(mp_next_nil()) == 1
    ok 5 - len(mp_check_nil()) == 1
    ok 6 - mp_sizeof_nil() == 1
    # *** test_nils: done ***
ok 6 - subtests
    1..78
    # *** test_strls ***
    # strl 0x00U
    ok 1 - mp_check_strl(0x00U) == 0
    ok 2 - mp_decode(mp_encode(0x00U)) == 0x00U
    ok 3 - len(mp_encode_strl(0x00U)
    ok 4 - len(mp_decode_strl(0x00U))
    ok 5 - mp_sizeof_strl(0x00U)
    ok 6 - mp_encode(0x00U) == "\xa0"
    # strl 0x01U
    ok 7 - mp_check_strl(0x01U) == 0
    ok 8 - mp_decode(mp_encode(0x01U)) == 0x01U
    ok 9 - len(mp_encode_strl(0x01U)
    ok 10 - len(mp_decode_strl(0x01U))
    ok 11 - mp_sizeof_strl(0x01U)
    ok 12 - mp_encode(0x01U) == "\xa1"
    # strl 0x1eU
    ok 13 - mp_check_strl(0x1eU) == 0
    ok 14 - mp_decode(mp_encode(0x1eU)) == 0x1eU
    ok 15 - len(mp_encode_strl(0x1eU)
    ok 16 - len(mp_decode_strl(0x1eU))
    ok 17 - mp_sizeof_strl(0x1eU)
    ok 18 - mp_encode(0x1eU) == "\xbe"
    # strl 0x1fU
    ok 19 - mp_check_strl(0x1fU) == 0
    ok 20 - mp_decode(mp_encode(0x1fU)) == 0x1fU
    ok 21 - len(mp_encode_strl(0x1fU)
    ok 22 - len(mp_decode_strl(0x1fU))
    ok 23 - mp_sizeof_strl(0x1fU)
    ok 24 - mp_encode(0x1fU) == "\xbf"
    # strl 0x20U
    ok 25 - mp_check_strl(0x20U) == 0
    ok 26 - mp_decode(mp_encode(0x20U)) == 0x20U
    ok 27 - len(mp_encode_strl(0x20U)
    ok 28 - len(mp_decode_strl(0x20U))
    ok 29 - mp_sizeof_strl(0x20U)
    ok 30 - mp_encode(0x20U) == "\xd9\x20"
    # strl 0xfeU
    ok 31 - mp_check_strl(0xfeU) == 0
    ok 32 - mp_decode(mp_encode(0xfeU)) == 0xfeU
    ok 33 - len(mp_encode_strl(0xfeU)
    ok 34 - len(mp_decode_strl(0xfeU))
    ok 35 - mp_sizeof_strl(0xfeU)
    ok 36 - mp_encode(0xfeU) == "\xd9\xfe"
    # strl 0xffU
    ok 37 - mp_check_strl(0xffU) == 0
    ok 38 - mp_decode(mp_encode(0xffU)) == 0xffU
    ok 39 - len(mp_encode_strl(0xffU)
    ok 40 - len(mp_decode_strl(0xffU))
    ok 41 - mp_sizeof_strl(0xffU)
    ok 42 - mp_encode(0xffU) == "\xd9\xff"
    # strl 0x0100U
    ok 43 - mp_check_strl(0x0100U) == 0
    ok 44 - mp_decode(mp_encode(0x0100U)) == 0x0100U
    ok 45 - len(mp_encode_strl(0x0100U)
    ok 46 - len(mp_decode_strl(0x0100U))
    ok 47 - mp_sizeof_strl(0x0100U)
    ok 48 - mp_encode(0x0100U) == "\xda\x01\x00"
    # strl 0xfffeU
    ok 49 - mp_check_strl(0xfffeU) == 0
    ok 50 - mp_decode(mp_encode(0xfffeU)) == 0xfffeU
    ok 51 - len(mp_encode_strl(0xfffeU)
    ok 52 - len(mp_decode_strl(0xfffeU))
    ok 53 - mp_sizeof_strl(0xfffeU)
    ok 54 - mp_encode(0xfffeU) == "\xda\xff\xfe"
    # strl 0xffffU
    ok 55 - mp_check_strl(0xffffU) == 0
    ok 56 - mp_decode(mp_encode(0xffffU)) == 0xffffU
    ok 57 - len(mp_encode_strl(0xffffU)
    ok 58 - len(mp_decode_strl(0xffffU))
    ok 59 - mp_sizeof_strl(0xffffU)
    ok 60 - mp_encode(0xffffU) == "\xda\xff\xff"
    # strl 0x00010000U
    ok 61 - mp_check_strl(0x00010000U) == 0
    ok 62 - mp_decode(mp_encode(0x00010000U)) == 0x00010000U
    ok 63 - len(mp_encode_strl(0x00010000U)
    ok 64 - len(mp_decode_strl(0x00010000U))
    ok 65 - mp_sizeof_strl(0x00010000U)
    ok 66 - mp_encode(0x00010000U) == "\xdb\x00\x01\x00\x00"
    # strl 0xfffffffeU
    ok 67 - mp_check_strl(0xfffffffeU) == 0
    ok 68 - mp_decode(mp_encode(0xfffffffeU)) == 0xfffffffeU
    ok 69 - len(mp_encode_strl(0xfffffffeU)
    ok 70 - len(mp_decode_strl(0xfffffffeU))
    ok 71 - mp_sizeof_strl(0xfffffffeU)
    ok 72 - mp_encode(0xfffffffeU) == "\xdb\xff\xff\xff\xfe"
    # strl 0xffffffffU
    ok 73 - mp_check_strl(0xffffffffU) == 0
    ok 74 - mp_decode(mp_encode(0xffffffffU)) == 0xffffffffU
    ok 75 - len(mp_encode_strl(0xffffffffU)
    ok 76 - len(mp_decode_strl(0xffffffffU))
    ok 77 - mp_sizeof_strl(0xffffffffU)
    ok 78 - mp_encode(0xffffffffU) == "\xdb\xff\xff\xff\xff"
    # *** test_strls: done ***
ok 7 - subtests
    1..78
    # *** test_binls ***
    # binl 0x00U
    ok 1 - mp_check_binl(0x00U) == 0
    ok 2 - mp_decode(mp_encode(0x00U)) == 0x00U
    ok 3 - len(mp_encode_binl(0x00U)
    ok 4 - len(mp_decode_binl(0x00U))
    ok 5 - mp_sizeof_binl(0x00U)
    ok 6 - mp_encode(0x00U) == "\xc4\x00"
    # binl 0x01U
    ok 7 - mp_check_binl(0x01U) == 0
    ok 8 - mp_decode(mp_encode(0x01U)) == 0x01U
    ok 9 - len(mp_encode_binl(0x01U)
    ok 10 - len(mp_decode_binl(0x01U))
    ok 11 - mp_sizeof_binl(0x01U)
    ok 12 - mp_encode(0x01U) == "\xc4\x01"
    # binl 0x1eU
    ok 13 - mp_check_binl(0x1eU) == 0
    ok 14 - mp_decode(mp_encode(0x1eU)) == 0x1eU
    ok 15 - len(mp_encode_binl(0x1eU)
    ok 16 - len(mp_decode_binl(0x1eU))
    ok 17 - mp_sizeof_binl(0x1eU)
    ok 18 - mp_encode(0x1eU) == "\xc4\x1e"
    # binl 0x1fU
    ok 19 - mp_check_binl(0x1fU) == 0
    ok 20 - mp_decode(mp_encode(0x1fU)) == 0x1fU
    ok 21 - len(mp_encode_binl(0x1fU)
    ok 22 - len(mp_decode_binl(0x1fU))
    ok 23 - mp_sizeof_binl(0x1fU)
    ok 24 - mp_encode(0x1fU) == "\xc4\x1f"
    # binl 0x20U
    ok 25 - mp_check_binl(0x20U) == 0
    ok 26 - mp_decode(mp_encode(0x20U)) == 0x20U
    ok 27 - len(mp_encode_binl(0x20U)
    ok 28 - len(mp_decode_binl(0x20U))
    ok 29 - mp_sizeof_binl(0x20U)
    ok 30 - mp_encode(0x20U) == "\xc4\x20"
    # binl 0xfeU
    ok 31 - mp_check_binl(0xfeU) == 0
    ok 32 - mp_decode(mp_encode(0xfeU)) == 0xfeU
    ok 33 - len(mp_encode_binl(0xfeU)
    ok 34 - len(mp_decode_binl(0xfeU))
    ok 35 - mp_sizeof_binl(0xfeU)
    ok 36 - mp_encode(0xfeU) == "\xc4\xfe"
    # binl 0xffU
    ok 37 - mp_check_binl(0xffU) == 0
    ok 38 - mp_decode(mp_encode(0xffU)) == 0xffU
    ok 39 - len(mp_encode_binl(0xffU)
    ok 40 - len(mp_decode_binl(0xffU))
    ok 41 - mp_sizeof_binl(0xffU)
    ok 42 - mp_encode(0xffU) == "\xc4\xff"
    # binl 0x0100U
    ok 43 - mp_check_binl(0x0100U) == 0
    ok 44 - mp_decode(mp_encode(0x0100U)) == 0x0100U
    ok 45 - len(mp_encode_binl(0x0100U)
    ok 46 - len(mp_decode_binl(0x0100U))
    ok 47 - mp_sizeof_binl(0x0100U)
    ok 48 - mp_encode(0x0100U) == "\xc5\x01\x00"
    # binl 0xfffeU
    ok 49 - mp_check_binl(0xfffeU) == 0
    ok 50 - mp_decode(mp_encode(0xfffeU)) == 0xfffeU
    ok 51 - len(mp_encode_binl(0xfffeU)
    ok 52 - len(mp_decode_binl(0xfffeU))
    ok 53 - mp_sizeof_binl(0xfffeU)
    ok 54 - mp_encode(0xfffeU) == "\xc5\xff\xfe"
    # binl 0xffffU
    ok 55 - mp_check_binl(0xffffU) == 0
    ok 56 - mp_decode(mp_encode(0xffffU)) == 0xffffU
    ok 57 - len(mp_encode_binl(0xffffU)
    ok 58 - len(mp_decode_binl(0xffffU))
    ok 59 - mp_sizeof_binl(0xffffU)
    ok 60 - mp_encode(0xffffU) == "\xc5\xff\xff"
    # binl 0x00010000U
    ok 61 - mp_check_binl(0x00010000U) == 0
    ok 62 - mp_decode(mp_encode(0x00010000U)) == 0x00010000U
    ok 63 - len(mp_encode_binl(0x00010000U)
    ok 64 - len(mp_decode_binl(0x00010000U))
    ok 65 - mp_sizeof_binl(0x00010000U)
    ok 66 - mp_encode(0x00010000U) == "\xc6\x00\x01\x00\x00"
    # binl 0xfffffffeU
    ok 67 - mp_check_binl(0xfffffffeU) == 0
    ok 68 - mp_decode(mp_encode(0xfffffffeU)) == 0xfffffffeU
    ok 69 - len(mp_encode_binl(0xfffffffeU)
    ok 70 - len(mp_decode_binl(0xfffffffeU))
    ok 71 - mp_sizeof_binl(0xfffffffeU)
    ok 72 - mp_encode(0xfffffffeU) == "\xc6\xff\xff\xff\xfe"
    # binl 0xffffffffU
    ok 73 - mp_check_binl(0xffffffffU) == 0
    ok 74 - mp_decode(mp_encode(0xffffffffU)) == 0xffffffffU
    ok 75 - len(mp_encode_binl(0xffffffffU)
    ok 76 - len(mp_decode_binl(0xffffffffU))
    ok 77 - mp_sizeof_binl(0xffffffffU)
    ok 78 - mp_encode(0xffffffffU) == "\xc6\xff\xff\xff\xff"
    # *** test_binls: done ***
ok 8 - subtests
    1..168
    # *** test_extls ***
    # extl 0x01U
    ok 1 - mp_check_extl(0x01U) == 0
    ok 2 - mp_decode(mp_encode(0x01U)) == 0x01U
    ok 3 - len(mp_encode_extl(0x01U)
    ok 4 - len(mp_decode_extl(0x01U))
    ok 5 - mp_sizeof_extl(0x01U)
    ok 6 - mp_encode(0x01U) == "\xd4\x00"
    # extl 0x02U
    ok 7 - mp_check_extl(0x02U) == 0
    ok 8 - mp_decode(mp_encode(0x02U)) == 0x02U
    ok 9 - len(mp_encode_extl(0x02U)
    ok 10 - len(mp_decode_extl(0x02U))
    ok 11 - mp_sizeof_extl(0x02U)
    ok 12 - mp_encode(0x02U) == "\xd5\x00"
    # extl 0x04U
    ok 13 - mp_check_extl(0x04U) == 0
    ok 14 - mp_decode(mp_encode(0x04U)) == 0x04U
    ok 15 - len(mp_encode_extl(0x04U)
    ok 16 - len(mp_decode_extl(0x04U))
    ok 17 - mp_sizeof_extl(0x04U)
    ok 18 - mp_encode(0x04U) == "\xd6\x00"
    # extl 0x08U
    ok 19 - mp_check_extl(0x08U) == 0
    ok 20 - mp_decode(mp_encode(0x08U)) == 0x08U
    ok 21 - len(mp_encode_extl(0x08U)
    ok 22 - len(mp_decode_extl(0x08U))
    ok 23 - mp_sizeof_extl(0x08U)
    ok 24 - mp_encode(0x08U) == "\xd7\x00"
    # extl 0x10U
    ok 25 - mp_check_extl(0x10U) == 0
    ok 26 - mp_decode(mp_encode(0x10U)) == 0x10U
    ok 27 - len(mp_encode_extl(0x10U)
    ok 28 - len(mp_decode_extl(0x10U))
    ok 29 - mp_sizeof_extl(0x10U)
    ok 30 - mp_encode(0x10U) == "\xd8\x00"
    # extl 0x11U
    ok 31 - mp_check_extl(0x11U) == 0
    ok 32 - mp_decode(mp_encode(0x11U)) == 0x11U
    ok 33 - len(mp_encode_extl(0x11U)
    ok 34 - len(mp_decode_extl(0x11U))
    ok 35 - mp_sizeof_extl(0x11U)
    ok 36 - mp_encode(0x11U) == "\xc7\x11\x00"
    # extl 0xfeU
    ok 37 - mp_check_extl(0xfeU) == 0
    ok 38 - mp_decode(mp_encode(0xfeU)) == 0xfeU
    ok 39 - len(mp_encode_extl(0xfeU)
    ok 40 - len(mp_decode_extl(0xfeU))
    ok 41 - mp_sizeof_extl(0xfeU)
    ok 42 - mp_encode(0xfeU) == "\xc7\xfe\x00"
    # extl 0xffU
    ok 43 - mp_check_extl(0xffU) == 0
    ok 44 - mp_decode(mp_encode(0xffU)) == 0xffU
    ok 45 - len(mp_encode_extl(0xffU)
    ok 46 - len(mp_decode_extl(0xffU))
    ok 47 - mp_sizeof_extl(0xffU)
    ok 48 - mp_encode(0xffU) == "\xc7\xff\x00"
    # extl 0x00U
    ok 49 - mp_check_extl(0x00U) == 0
    ok 50 - mp_decode(mp_encode(0x00U)) == 0x00U
    ok 51 - len(mp_encode_extl(0x00U)
    ok 52 - len(mp_decode_extl(0x00U))
    ok 53 - mp_sizeof_extl(0x00U)
    ok 54 - mp_encode(0x00U) == "\xc7\x00\x00"
    # extl 0x03U
    ok 55 - mp_check_extl(0x03U) == 0
    ok 56 - mp_decode(mp_encode(0x03U)) == 0x03U
    ok 57 - len(mp_encode_extl(0x03U)
    ok 58 - len(mp_decode_extl(0x03U))
    ok 59 - mp_sizeof_extl(0x03U)
    ok 60 - mp_encode(0x03U) == "\xc7\x03\x00"
    # extl 0x05U
    ok 61 - mp_check_extl(0x05U) == 0
    ok 62 - mp_decode(mp_encode(0x05U)) == 0x05U
    ok 63 - len(mp_encode_extl(0x05U)
    ok 64 - len(mp_decode_extl(0x05U))
    ok 65 - mp_sizeof_extl(0x05U)
    ok 66 - mp_encode(0x05U) == "\xc7\x05\x00"
    # extl 0x06U
    ok 67 - mp_check_extl(0x06U) == 0
    ok 68 - mp_decode(mp_encode(0x06U)) == 0x06U
    ok 69 - len(mp_encode_extl(0x06U)
    ok 70 - len(mp_decode_extl(0x06U))
    ok 71 - mp_sizeof_extl(0x06U)
    ok 72 - mp_encode(0x06U) == "\xc7\x06\x00"
    # extl 0x07U
    ok 73 - mp_check_extl(0x07U) == 0
    ok 74 - mp_decode(mp_encode(0x07U)) == 0x07U
    ok 75 - len(mp_encode_extl(0x07U)
    ok 76 - len(mp_decode_extl(0x07U))
    ok 77 - mp_sizeof_extl(0x07U)
    ok 78 - mp_encode(0x07U) == "\xc7\x07\x00"
    # extl 0x09U
    ok 79 - mp_check_extl(0x09U) == 0
    ok 80 - mp_decode(mp_encode(0x09U)) == 0x09U
    ok 81 - len(mp_encode_extl(0x09U)
    ok 82 - len(mp_decode_extl(0x09U))
    ok 83 - mp_sizeof_extl(0x09U)
    ok 84 - mp_encode(0x09U) == "\xc7\x09\x00"
    # extl 0x0aU
    ok 85 - mp_check_extl(0x0aU) == 0
    ok 86 - mp_decode(mp_encode(0x0aU)) == 0x0aU
    ok 87 - len(mp_encode_extl(0x0aU)
    ok 88 - len(mp_decode_extl(0x0aU))
    ok 89 - mp_sizeof_extl(0x0aU)
    ok 90 - mp_encode(0x0aU) == "\xc7\x0a\x00"
    # extl 0x0bU
    ok 91 - mp_check_extl(0x0bU) == 0
    ok 92 - mp_decode(mp_encode(0x0bU)) == 0x0bU
    ok 93 - len(mp_encode_extl(0x0bU)
    ok 94 - len(mp_decode_extl(0x0bU))
    ok 95 - mp_sizeof_extl(0x0bU)
    ok 96 - mp_encode(0x0bU) == "\xc7\x0b\x00"
    # extl 0x0cU
    ok 97 - mp_check_extl(0x0cU) == 0
    ok 98 - mp_decode(mp_encode(0x0cU)) == 0x0cU
    ok 99 - len(mp_encode_extl(0x0cU)
    ok 100 - len(mp_decode_extl(0x0cU))
    ok 101 - mp_sizeof_extl(0x0cU)
    ok 102 - mp_encode(0x0cU) == "\xc7\x0c\x00"
    # extl 0x0dU
    ok 103 - mp_check_extl(0x0dU) == 0
    ok 104 - mp_decode(mp_encode(0x0dU)) == 0x0dU
    ok 105 - len(mp_encode_extl(0x0dU)
    ok 106 - len(mp_decode_extl(0x0dU))
    ok 107 - mp_sizeof_extl(0x0dU)
    ok 108 - mp_encode(0x0dU) == "\xc7\x0d\x00"
    # extl 0x0eU
    ok 109 - mp_check_extl(0x0eU) == 0
    ok 110 - mp_decode(mp_encode(0x0eU)) == 0x0eU
    ok 111 - len(mp_encode_extl(0x0eU)
    ok 112 - len(mp_decode_extl(0x0eU))
    ok 113 - mp_sizeof_extl(0x0eU)
    ok 114 - mp_encode(0x0eU) == "\xc7\x0e\x00"
    # extl 0x0fU
    ok 115 - mp_check_extl(0x0fU) == 0
    ok 116 - mp_decode(mp_encode(0x0fU)) == 0x0fU
    ok 117 - len(mp_encode_extl(0x0fU)
    ok 118 - len(mp_decode_extl(0x0fU))
    ok 119 - mp_sizeof_extl(0x0fU)
    ok 120 - mp_encode(0x0fU) == "\xc7\x0f\x00"
    # extl 0x0100U
    ok 121 - mp_check_extl(0x0100U) == 0
    ok 122 - mp_decode(mp_encode(0x0100U)) == 0x0100U
    ok 123 - len(mp_encode_extl(0x0100U)
    ok 124 - len(mp_decode_extl(0x0100U))
    ok 125 - mp_sizeof_extl(0x0100U)
    ok 126 - mp_encode(0x0100U) == "\xc8\x01\x00\x00"
    # extl 0x0101U
    ok 127 - mp_check_extl(0x0101U) == 0
    ok 128 - mp_decode(mp_encode(0x0101U)) == 0x0101U
    ok 129 - len(mp_encode_extl(0x0101U)
    ok 130 - len(mp_decode_extl(0x0101U))
    ok 131 - mp_sizeof_extl(0x0101U)
    ok 132 - mp_encode(0x0101U) == "\xc8\x01\x01\x00"
    # extl 0xfffeU
    ok 133 - mp_check_extl(0xfffeU) == 0
    ok 134 - mp_decode(mp_encode(0xfffeU)) == 0xfffeU
    ok 135 - len(mp_encode_extl(0xfffeU)
    ok 136 - len(mp_decode_extl(0xfffeU))
    ok 137 - mp_sizeof_extl(0xfffeU)
    ok 138 - mp_encode(0xfffeU) == "\xc8\xff\xfe\x00"
    # extl 0xffffU
    ok 139 - mp_check_extl(0xffffU) == 0
    ok 140 - mp_decode(mp_encode(0xffffU)) == 0xffffU
    ok 141 - len(mp_encode_extl(0xffffU)
    ok 142 - len(mp_decode_extl(0xffffU))
    ok 143 - mp_sizeof_extl(0xffffU)
    ok 144 - mp_encode(0xffffU) == "\xc8\xff\xff\x00"
    # extl 0x00010000U
    ok 145 - mp_check_extl(0x00010000U) == 0
    ok 146 - mp_decode(mp_encode(0x00010000U)) == 0x00010000U
    ok 147 - len(mp_encode_extl(0x00010000U)
    ok 148 - len(mp_decode_extl(0x00010000U))
    ok 149 - mp_sizeof_extl(0x00010000U)
    ok 150 - mp_encode(0x00010000U) == "\xc9\x00\x01\x00\x00\x00"
    # extl 0x00010001U
    ok 151 - mp_check_extl(0x00010001U) == 0
    ok 152 - mp_decode(mp_encode(0x00010001U)) == 0x00010001U
    ok 153 - len(mp_encode_extl(0x00010001U)
    ok 154 - len(mp_decode_extl(0x00010001U))
    ok 155 - mp_sizeof_extl(0x00010001U)
    ok 156 - mp_encode(0x00010001U) == "\xc9\x00\x01\x00\x01\x00"
    # extl 0xfffffffeU
    ok 157 - mp_check_extl(0xfffffffeU) == 0
    ok 158 - mp_decode(mp_encode(0xfffffffeU)) == 0xfffffffeU
    ok 159 - len(mp_encode_extl(0xfffffffeU)
    ok 160 - len(mp_decode_extl(0xfffffffeU))
    ok 161 - mp_sizeof_extl(0xfffffffeU)
    ok 162 - mp_encode(0xfffffffeU) == "\xc9\xff\xff\xff\xfe\x00"
    # extl 0xffffffffU
    ok 163 - mp_check_extl(0xffffffffU) == 0
    ok 164 - mp_decode(mp_encode(0xffffffffU)) == 0xffffffffU
    ok 165 - len(mp_encode_extl(0xffffffffU)
    ok 166 - len(mp_decode_extl(0xffffffffU))
    ok 167 - mp_sizeof_extl(0xffffffffU)
    ok 168 - mp_encode(0xffffffffU) == "\xc9\xff\xff\xff\xff\x00"
    # *** test_extls: done ***
ok 9 - subtests
    1..96
    # *** test_strs ***
    # str len=0x01
    ok 1 - len(mp_decode_str(x, 1))
    ok 2 - len(mp_decode_strbin(x, 1))
    ok 3 - mp_check_str(mp_encode_str(x, 0x01))
    ok 4 - len(mp_decode_str(x, 0x01)
    ok 5 - len(mp_next_str(x, 0x01)
    ok 6 - len(mp_check_str(x, 0x01)
    ok 7 - mp_sizeof_str(0x01)
    ok 8 - mp_encode_str(x, 0x01) == x
    # str len=0x1e
    ok 9 - len(mp_decode_str(x, 30))
    ok 10 - len(mp_decode_strbin(x, 30))
    ok 11 - mp_check_str(mp_encode_str(x, 0x1e))
    ok 12 - len(mp_decode_str(x, 0x1e)
    ok 13 - len(mp_next_str(x, 0x1e)
    ok 14 - len(mp_check_str(x, 0x1e)
    ok 15 - mp_sizeof_str(0x1e)
    ok 16 - mp_encode_str(x, 0x1e) == x
    # str len=0x1f
    ok 17 - len(mp_decode_str(x, 31))
    ok 18 - len(mp_decode_strbin(x, 31))
    ok 19 - mp_check_str(mp_encode_str(x, 0x1f))
    ok 20 - len(mp_decode_str(x, 0x1f)
    ok 21 - len(mp_next_str(x, 0x1f)
    ok 22 - len(mp_check_str(x, 0x1f)
    ok 23 - mp_sizeof_str(0x1f)
    ok 24 - mp_encode_str(x, 0x1f) == x
    # str len=0x20
    ok 25 - len(mp_decode_str(x, 32))
    ok 26 - len(mp_decode_strbin(x, 32))
    ok 27 - mp_check_str(mp_encode_str(x, 0x20))
    ok 28 - len(mp_decode_str(x, 0x20)
    ok 29 - len(mp_next_str(x, 0x20)
    ok 30 - len(mp_check_str(x, 0x20)
    ok 31 - mp_sizeof_str(0x20)
    ok 32 - mp_encode_str(x, 0x20) == x
    # str len=0xfe
    ok 33 - len(mp_decode_str(x, 254))
    ok 34 - len(mp_decode_strbin(x, 254))
    ok 35 - mp_check_str(mp_encode_str(x, 0xfe))
    ok 36 - len(mp_decode_str(x, 0xfe)
    ok 37 - len(mp_next_str(x, 0xfe)
    ok 38 - len(mp_check_str(x, 0xfe)
    ok 39 - mp_sizeof_str(0xfe)
    ok 40 - mp_encode_str(x, 0xfe) == x
    # str len=0xff
    ok 41 - len(mp_decode_str(x, 255))
    ok 42 - len(mp_decode_strbin(x, 255))
    ok 43 - mp_check_str(mp_encode_str(x, 0xff))
    ok 44 - len(mp_decode_str(x, 0xff)
    ok 45 - len(mp_next_str(x, 0xff)
    ok 46 - len(mp_check_str(x, 0xff)
    ok 47 - mp_sizeof_str(0xff)
    ok 48 - mp_encode_str(x, 0xff) == x
    # str len=0x100
    ok 49 - len(mp_decode_str(x, 256))
    ok 50 - len(mp_decode_strbin(x, 256))
    ok 51 - mp_check_str(mp_encode_str(x, 0x100))
    ok 52 - len(mp_decode_str(x, 0x100)
    ok 53 - len(mp_next_str(x, 0x100)
    ok 54 - len(mp_check_str(x, 0x100)
    ok 55 - mp_sizeof_str(0x100)
    ok 56 - mp_encode_str(x, 0x100) == x
    # str len=0x101
    ok 57 - len(mp_decode_str(x, 257))
    ok 58 - len(mp_decode_strbin(x, 257))
    ok 59 - mp_check_str(mp_encode_str(x, 0x101))
    ok 60 - len(mp_decode_str(x, 0x101)
    ok 61 - len(mp_next_str(x, 0x101)
    ok 62 - len(mp_check_str(x, 0x101)
    ok 63 - mp_sizeof_str(0x101)
    ok 64 - mp_encode_str(x, 0x101) == x
    # str len=0xfffe
    ok 65 - len(mp_decode_str(x, 65534))
    ok 66 - len(mp_decode_strbin(x, 65534))
    ok 67 - mp_check_str(mp_encode_str(x, 0xfffe))
    ok 68 - len(mp_decode_str(x, 0xfffe)
    ok 69 - len(mp_next_str(x, 0xfffe)
    ok 70 - len(mp_check_str(x, 0xfffe)
    ok 71 - mp_sizeof_str(0xfffe)
    ok 72 - mp_encode_str(x, 0xfffe) == x
    # str len=0xffff
    ok 73 - len(mp_decode_str(x, 65535))
    ok 74 - len(mp_decode_strbin(x, 65535))
    ok 75 - mp_check_str(mp_encode_str(x, 0xffff))
    ok 76 - len(mp_decode_str(x, 0xffff)
    ok 77 - len(mp_next_str(x, 0xffff)
    ok 78 - len(mp_check_str(x, 0xffff)
    ok 79 - mp_sizeof_str(0xffff)
    ok 80 - mp_encode_str(x, 0xffff) == x
    # str len=0x10000
    ok 81 - len(mp_decode_str(x, 65536))
    ok 82 - len(mp_decode_strbin(x, 65536))
    ok 83 - mp_check_str(mp_encode_str(x, 0x10000))
    ok 84 - len(mp_decode_str(x, 0x10000)
    ok 85 - len(mp_next_str(x, 0x10000)
    ok 86 - len(mp_check_str(x, 0x10000)
    ok 87 - mp_sizeof_str(0x10000)
    ok 88 - mp_encode_str(x, 0x10000) == x
    # str len=0x10001
    ok 89 - len(mp_decode_str(x, 65537))
    ok 90 - len(mp_decode_strbin(x, 65537))
    ok 91 - mp_check_str(mp_encode_str(x, 0x10001))
    ok 92 - len(mp_decode_str(x, 0x10001)
    ok 93 - len(mp_next_str(x, 0x10001)
    ok 94 - len(mp_check_str(x, 0x10001)
    ok 95 - mp_sizeof_str(0x10001)
    ok 96 - mp_encode_str(x, 0x10001) == x
    # *** test_strs: done ***
ok 10 - subtests
    1..96
    # *** test_bins ***
    # bin len=0x01
    ok 1 - len(mp_decode_bin(x, 1))
    ok 2 - len(mp_decode_strbin(x, 1))
    ok 3 - mp_check_bin(mp_encode_bin(x, 0x01))
    ok 4 - len(mp_decode_bin(x, 0x01)
    ok 5 - len(mp_next_bin(x, 0x01)
    ok 6 - len(mp_check_bin(x, 0x01)
    ok 7 - mp_sizeof_bin(0x01)
    ok 8 - mp_encode_bin(x, 0x01) == x
    # bin len=0x1e
    ok 9 - len(mp_decode_bin(x, 30))
    ok 10 - len(mp_decode_strbin(x, 30))
    ok 11 - mp_check_bin(mp_encode_bin(x, 0x1e))
    ok 12 - len(mp_decode_bin(x, 0x1e)
    ok 13 - len(mp_next_bin(x, 0x1e)
    ok 14 - len(mp_check_bin(x, 0x1e)
    ok 15 - mp_sizeof_bin(0x1e)
    ok 16 - mp_encode_bin(x, 0x1e) == x
    # bin len=0x1f
    ok 17 - len(mp_decode_bin(x, 31))
    ok 18 - len(mp_decode_strbin(x, 31))
    ok 19 - mp_check_bin(mp_encode_bin(x, 0x1f))
    ok 20 - len(mp_decode_bin(x, 0x1f)
    ok 21 - len(mp_next_bin(x, 0x1f)
    ok 22 - len(mp_check_bin(x, 0x1f)
    ok 23 - mp_sizeof_bin(0x1f)
    ok 24 - mp_encode_bin(x, 0x1f) == x
    # bin len=0x20
    ok 25 - len(mp_decode_bin(x, 32))
    ok 26 - len(mp_decode_strbin(x, 32))
    ok 27 - mp_check_bin(mp_encode_bin(x, 0x20))
    ok 28 - len(mp_decode_bin(x, 0x20)
    ok 29 - len(mp_next_bin(x, 0x20)
    ok 30 - len(mp_check_bin(x, 0x20)
    ok 31 - mp_sizeof_bin(0x20)
    ok 32 - mp_encode_bin(x, 0x20) == x
    # bin len=0xfe
    ok 33 - len(mp_decode_bin(x, 254))
    ok 34 - len(mp_decode_strbin(x, 254))
    ok 35 - mp_check_bin(mp_encode_bin(x, 0xfe))
    ok 36 - len(mp_decode_bin(x, 0xfe)
    ok 37 - len(mp_next_bin(x, 0xfe)
    ok 38 - len(mp_check_bin(x, 0xfe)
    ok 39 - mp_sizeof_bin(0xfe)
    ok 40 - mp_encode_bin(x, 0xfe) == x
    # bin len=0xff
    ok 41 - len(mp_decode_bin(x, 255))
    ok 42 - len(mp_decode_strbin(x, 255))
    ok 43 - mp_check_bin(mp_encode_bin(x, 0xff))
    ok 44 - len(mp_decode_bin(x, 0xff)
    ok 45 - len(mp_next_bin(x, 0xff)
    ok 46 - len(mp_check_bin(x, 0xff)
    ok 47 - mp_sizeof_bin(0xff)
    ok 48 - mp_encode_bin(x, 0xff) == x
    # bin len=0x100
    ok 49 - len(mp_decode_bin(x, 256))
    ok 50 - len(mp_decode_strbin(x, 256))
    ok 51 - mp_check_bin(mp_encode_bin(x, 0x100))
    ok 52 - len(mp_decode_bin(x, 0x100)
    ok 53 - len(mp_next_bin(x, 0x100)
    ok 54 - len(mp_check_bin(x, 0x100)
    ok 55 - mp_sizeof_bin(0x100)
    ok 56 - mp_encode_bin(x, 0x100) == x
    # bin len=0x101
    ok 57 - len(mp_decode_bin(x, 257))
    ok 58 - len(mp_decode_strbin(x, 257))
    ok 59 - mp_check_bin(mp_encode_bin(x, 0x101))
    ok 60 - len(mp_decode_bin(x, 0x101)
    ok 61 - len(mp_next_bin(x, 0x101)
    ok 62 - len(mp_check_bin(x, 0x101)
    ok 63 - mp_sizeof_bin(0x101)
    ok 64 - mp_encode_bin(x, 0x101) == x
    # bin len=0xfffe
    ok 65 - len(mp_decode_bin(x, 65534))
    ok 66 - len(mp_decode_strbin(x, 65534))
    ok 67 - mp_check_bin(mp_encode_bin(x, 0xfffe))
    ok 68 - len(mp_decode_bin(x, 0xfffe)
    ok 69 - len(mp_next_bin(x, 0xfffe)
    ok 70 - len(mp_check_bin(x, 0xfffe)
    ok 71 - mp_sizeof_bin(0xfffe)
    ok 72 - mp_encode_bin(x, 0xfffe) == x
    # bin len=0xffff
    ok 73 - len(mp_decode_bin(x, 65535))
    ok 74 - len(mp_decode_strbin(x, 65535))
    ok 75 - mp_check_bin(mp_encode_bin(x, 0xffff))
    ok 76 - len(mp_decode_bin(x, 0xffff)
    ok 77 - len(mp_next_bin(x, 0xffff)
    ok 78 - len(mp_check_bin(x, 0xffff)
    ok 79 - mp_sizeof_bin(0xffff)
    ok 80 - mp_encode_bin(x, 0xffff) == x
    # bin len=0x10000
    ok 81 - len(mp_decode_bin(x, 65536))
    ok 82 - len(mp_decode_strbin(x, 65536))
    ok 83 - mp_check_bin(mp_encode_bin(x, 0x10000))
    ok 84 - len(mp_decode_bin(x, 0x10000)
    ok 85 - len(mp_next_bin(x, 0x10000)
    ok 86 - len(mp_check_bin(x, 0x10000)
    ok 87 - mp_sizeof_bin(0x10000)
    ok 88 - mp_encode_bin(x, 0x10000) == x
    # bin len=0x10001
    ok 89 - len(mp_decode_bin(x, 65537))
    ok 90 - len(mp_decode_strbin(x, 65537))
    ok 91 - mp_check_bin(mp_encode_bin(x, 0x10001))
    ok 92 - len(mp_decode_bin(x, 0x10001)
    ok 93 - len(mp_next_bin(x, 0x10001)
    ok 94 - len(mp_check_bin(x, 0x10001)
    ok 95 - mp_sizeof_bin(0x10001)
    ok 96 - mp_encode_bin(x, 0x10001) == x
    # *** test_bins: done ***
ok 11 - subtests
    1..225
    # *** test_exts ***
    # ext len=0x01
    ok 1 - len(mp_decode_ext(x, 1))
    ok 2 - type(mp_decode_ext(x))
    ok 3 - len(mp_decode_strbin(x, 1))
    ok 4 - mp_check_ext(mp_encode_ext(x, 0x01))
    ok 5 - len(mp_decode_ext(x, 0x01)
    ok 6 - len(mp_next_ext(x, 0x01)
    ok 7 - len(mp_check_ext(x, 0x01)
    ok 8 - mp_sizeof_ext(0x01)
    ok 9 - mp_encode_ext(x, 0x01) == x
    # ext len=0x02
    ok 10 - len(mp_decode_ext(x, 2))
    ok 11 - type(mp_decode_ext(x))
    ok 12 - len(mp_decode_strbin(x, 2))
    ok 13 - mp_check_ext(mp_encode_ext(x, 0x02))
    ok 14 - len(mp_decode_ext(x, 0x02)
    ok 15 - len(mp_next_ext(x, 0x02)
    ok 16 - len(mp_check_ext(x, 0x02)
    ok 17 - mp_sizeof_ext(0x02)
    ok 18 - mp_encode_ext(x, 0x02) == x
    # ext len=0x03
    ok 19 - len(mp_decode_ext(x, 3))
    ok 20 - type(mp_decode_ext(x))
    ok 21 - len(mp_decode_strbin(x, 3))
    ok 22 - mp_check_ext(mp_encode_ext(x, 0x03))
    ok 23 - len(mp_decode_ext(x, 0x03)
    ok 24 - len(mp_next_ext(x, 0x03)
    ok 25 - len(mp_check_ext(x, 0x03)
    ok 26 - mp_sizeof_ext(0x03)
    ok 27 - mp_encode_ext(x, 0x03) == x
    # ext len=0x04
    ok 28 - len(mp_decode_ext(x, 4))
    ok 29 - type(mp_decode_ext(x))
    ok 30 - len(mp_decode_strbin(x, 4))
    ok 31 - mp_check_ext(mp_encode_ext(x, 0x04))
    ok 32 - len(mp_decode_ext(x, 0x04)
    ok 33 - len(mp_next_ext(x, 0x04)
    ok 34 - len(mp_check_ext(x, 0x04)
    ok 35 - mp_sizeof_ext(0x04)
    ok 36 - mp_encode_ext(x, 0x04) == x
    # ext len=0x05
    ok 37 - len(mp_decode_ext(x, 5))
    ok 38 - type(mp_decode_ext(x))
    ok 39 - len(mp_decode_strbin(x, 5))
    ok 40 - mp_check_ext(mp_encode_ext(x, 0x05))
    ok 41 - len(mp_decode_ext(x, 0x05)
    ok 42 - len(mp_next_ext(x, 0x05)
    ok 43 - len(mp_check_ext(x, 0x05)
    ok 44 - mp_sizeof_ext(0x05)
    ok 45 - mp_encode_ext(x, 0x05) == x
    # ext len=0x06
    ok 46 - len(mp_decode_ext(x, 6))
    ok 47 - type(mp_decode_ext(x))
    ok 48 - len(mp_decode_strbin(x, 6))
    ok 49 - mp_check_ext(mp_encode_ext(x, 0x06))
    ok 50 - len(mp_decode_ext(x, 0x06)
    ok 51 - len(mp_next_ext(x, 0x06)
    ok 52 - len(mp_check_ext(x, 0x06)
    ok 53 - mp_sizeof_ext(0x06)
    ok 54 - mp_encode_ext(x, 0x06) == x
    # ext len=0x07
    ok 55 - len(mp_decode_ext(x, 7))
    ok 56 - type(mp_decode_ext(x))
    ok 57 - len(mp_decode_strbin(x, 7))
    ok 58 - mp_check_ext(mp_encode_ext(x, 0x07))
    ok 59 - len(mp_decode_ext(x, 0x07)
    ok 60 - len(mp_next_ext(x, 0x07)
    ok 61 - len(mp_check_ext(x, 0x07)
    ok 62 - mp_sizeof_ext(0x07)
    ok 63 - mp_encode_ext(x, 0x07) == x
    # ext len=0x08
    ok 64 - len(mp_decode_ext(x, 8))
    ok 65 - type(mp_decode_ext(x))
    ok 66 - len(mp_decode_strbin(x, 8))
    ok 67 - mp_check_ext(mp_encode_ext(x, 0x08))
    ok 68 - len(mp_decode_ext(x, 0x08)
    ok 69 - len(mp_next_ext(x, 0x08)
    ok 70 - len(mp_check_ext(x, 0x08)
    ok 71 - mp_sizeof_ext(0x08)
    ok 72 - mp_encode_ext(x, 0x08) == x
    # ext len=0x09
    ok 73 - len(mp_decode_ext(x, 9))
    ok 74 - type(mp_decode_ext(x))
    ok 75 - len(mp_decode_strbin(x, 9))
    ok 76 - mp_check_ext(mp_encode_ext(x, 0x09))
    ok 77 - len(mp_decode_ext(x, 0x09)
    ok 78 - len(mp_next_ext(x, 0x09)
    ok 79 - len(mp_check_ext(x, 0x09)
    ok 80 - mp_sizeof_ext(0x09)
    ok 81 - mp_encode_ext(x, 0x09) == x
    # ext len=0x0a
    ok 82 - len(mp_decode_ext(x, 10))
    ok 83 - type(mp_decode_ext(x))
    ok 84 - len(mp_decode_strbin(x, 10))
    ok 85 - mp_check_ext(mp_encode_ext(x, 0x0a))
    ok 86 - len(mp_decode_ext(x, 0x0a)
    ok 87 - len(mp_next_ext(x, 0x0a)
    ok 88 - len(mp_check_ext(x, 0x0a)
    ok 89 - mp_sizeof_ext(0x0a)
    ok 90 - mp_encode_ext(x, 0x0a) == x
    # ext len=0x0b
    ok 91 - len(mp_decode_ext(x, 11))
    ok 92 - type(mp_decode_ext(x))
    ok 93 - len(mp_decode_strbin(x, 11))
    ok 94 - mp_check_ext(mp_encode_ext(x, 0x0b))
    ok 95 - len(mp_decode_ext(x, 0x0b)
    ok 96 - len(mp_next_ext(x, 0x0b)
    ok 97 - len(mp_check_ext(x, 0x0b)
    ok 98 - mp_sizeof_ext(0x0b)
    ok 99 - mp_encode_ext(x, 0x0b) == x
    # ext len=0x0c
    ok 100 - len(mp_decode_ext(x, 12))
    ok 101 - type(mp_decode_ext(x))
    ok 102 - len(mp_decode_strbin(x, 12))
    ok 103 - mp_check_ext(mp_encode_ext(x, 0x0c))
    ok 104 - len(mp_decode_ext(x, 0x0c)
    ok 105 - len(mp_next_ext(x, 0x0c)
    ok 106 - len(mp_check_ext(x, 0x0c)
    ok 107 - mp_sizeof_ext(0x0c)
    ok 108 - mp_encode_ext(x, 0x0c) == x
    # ext len=0x0d
    ok 109 - len(mp_decode_ext(x, 13))
    ok 110 - type(mp_decode_ext(x))
    ok 111 - len(mp_decode_strbin(x, 13))
    ok 112 - mp_check_ext(mp_encode_ext(x, 0x0d))
    ok 113 - len(mp_decode_ext(x, 0x0d)
    ok 114 - len(mp_next_ext(x, 0x0d)
    ok 115 - len(mp_check_ext(x, 0x0d)
    ok 116 - mp_sizeof_ext(0x0d)
    ok 117 - mp_encode_ext(x, 0x0d) == x
    # ext len=0x0e
    ok 118 - len(mp_decode_ext(x, 14))
    ok 119 - type(mp_decode_ext(x))
    ok 120 - len(mp_decode_strbin(x, 14))
    ok 121 - mp_check_ext(mp_encode_ext(x, 0x0e))
    ok 122 - len(mp_decode_ext(x, 0x0e)
    ok 123 - len(mp_next_ext(x, 0x0e)
    ok 124 - len(mp_check_ext(x, 0x0e)
    ok 125 - mp_sizeof_ext(0x0e)
    ok 126 - mp_encode_ext(x, 0x0e) == x
    # ext len=0x0f
    ok 127 - len(mp_decode_ext(x, 15))
    ok 128 - type(mp_decode_ext(x))
    ok 129 - len(mp_decode_strbin(x, 15))
    ok 130 - mp_check_ext(mp_encode_ext(x, 0x0f))
    ok 131 - len(mp_decode_ext(x, 0x0f)
    ok 132 - len(mp_next_ext(x, 0x0f)
    ok 133 - len(mp_check_ext(x, 0x0f)
    ok 134 - mp_sizeof_ext(0x0f)
    ok 135 - mp_encode_ext(x, 0x0f) == x
    # ext len=0x10
    ok 136 - len(mp_decode_ext(x, 16))
    ok 137 - type(mp_decode_ext(x))
    ok 138 - len(mp_decode_strbin(x, 16))
    ok 139 - mp_check_ext(mp_encode_ext(x, 0x10))
    ok 140 - len(mp_decode_ext(x, 0x10)
    ok 141 - len(mp_next_ext(x, 0x10)
    ok 142 - len(mp_check_ext(x, 0x10)
    ok 143 - mp_sizeof_ext(0x10)
    ok 144 - mp_encode_ext(x, 0x10) == x
    # ext len=0x11
    ok 145 - len(mp_decode_ext(x, 17))
    ok 146 - type(mp_decode_ext(x))
    ok 147 - len(mp_decode_strbin(x, 17))
    ok 148 - mp_check_ext(mp_encode_ext(x, 0x11))
    ok 149 - len(mp_decode_ext(x, 0x11)
    ok 150 - len(mp_next_ext(x, 0x11)
    ok 151 - len(mp_check_ext(x, 0x11)
    ok 152 - mp_sizeof_ext(0x11)
    ok 153 - mp_encode_ext(x, 0x11) == x
    # ext len=0xfe
    ok 154 - len(mp_decode_ext(x, 254))
    ok 155 - type(mp_decode_ext(x))
    ok 156 - len(mp_decode_strbin(x, 254))
    ok 157 - mp_check_ext(mp_encode_ext(x, 0xfe))
    ok 158 - len(mp_decode_ext(x, 0xfe)
    ok 159 - len(mp_next_ext(x, 0xfe)
    ok 160 - len(mp_check_ext(x, 0xfe)
    ok 161 - mp_sizeof_ext(0xfe)
    ok 162 - mp_encode_ext(x, 0xfe) == x
    # ext len=0xff
    ok 163 - len(mp_decode_ext(x, 255))
    ok 164 - type(mp_decode_ext(x))
    ok 165 - len(mp_decode_strbin(x, 255))
    ok 166 - mp_check_ext(mp_encode_ext(x, 0xff))
    ok 167 - len(mp_decode_ext(x, 0xff)
    ok 168 - len(mp_next_ext(x, 0xff)
    ok 169 - len(mp_check_ext(x, 0xff)
    ok 170 - mp_sizeof_ext(0xff)
    ok 171 - mp_encode_ext(x, 0xff) == x
    # ext len=0x0100
    ok 172 - len(mp_decode_ext(x, 256))
    ok 173 - type(mp_decode_ext(x))
    ok 174 - len(mp_decode_strbin(x, 256))
    ok 175 - mp_check_ext(mp_encode_ext(x, 0x0100))
    ok 176 - len(mp_decode_ext(x, 0x0100)
    ok 177 - len(mp_next_ext(x, 0x0100)
    ok 178 - len(mp_check_ext(x, 0x0100)
    ok 179 - mp_sizeof_ext(0x0100)
    ok 180 - mp_encode_ext(x, 0x0100) == x
    # ext len=0x0101
    ok 181 - len(mp_decode_ext(x, 257))
    ok 182 - type(mp_decode_ext(x))
    ok 183 - len(mp_decode_strbin(x, 257))
    ok 184 - mp_check_ext(mp_encode_ext(x, 0x0101))
    ok 185 - len(mp_decode_ext(x, 0x0101)
    ok 186 - len(mp_next_ext(x, 0x0101)
    ok 187 - len(mp_check_ext(x, 0x0101)
    ok 188 - mp_sizeof_ext(0x0101)
    ok 189 - mp_encode_ext(x, 0x0101) == x
    # ext len=0xfffe
    ok 190 - len(mp_decode_ext(x, 65534))
    ok 191 - type(mp_decode_ext(x))
    ok 192 - len(mp_decode_strbin(x, 65534))
    ok 193 - mp_check_ext(mp_encode_ext(x, 0xfffe))
    ok 194 - len(mp_decode_ext(x, 0xfffe)
    ok 195 - len(mp_next_ext(x, 0xfffe)
    ok 196 - len(mp_check_ext(x, 0xfffe)
    ok 197 - mp_sizeof_ext(0xfffe)
    ok 198 - mp_encode_ext(x, 0xfffe) == x
    # ext len=0xffff
    ok 199 - len(mp_decode_ext(x, 65535))
    ok 200 - type(mp_decode_ext(x))
    ok 201 - len(mp_decode_strbin(x, 65535))
    ok 202 - mp_check_ext(mp_encode_ext(x, 0xffff))
    ok 203 - len(mp_decode_ext(x, 0xffff)
    ok 204 - len(mp_next_ext(x, 0xffff)
    ok 205 - len(mp_check_ext(x, 0xffff)
    ok 206 - mp_sizeof_ext(0xffff)
    ok 207 - mp_encode_ext(x, 0xffff) == x
    # ext len=0x00010000
    ok 208 - len(mp_decode_ext(x, 65536))
    ok 209 - type(mp_decode_ext(x))
    ok 210 - len(mp_decode_strbin(x, 65536))
    ok 211 - mp_check_ext(mp_encode_ext(x, 0x00010000))
    ok 212 - len(mp_decode_ext(x, 0x00010000)
    ok 213 - len(mp_next_ext(x, 0x00010000)
    ok 214 - len(mp_check_ext(x, 0x00010000)
    ok 215 - mp_sizeof_ext(0x00010000)
    ok 216 - mp_encode_ext(x, 0x00010000) == x
    # ext len=0x00010001
    ok 217 - len(mp_decode_ext(x, 65537))
    ok 218 - type(mp_decode_ext(x))
    ok 219 - len(mp_decode_strbin(x, 65537))
    ok 220 - mp_check_ext(mp_encode_ext(x, 0x00010001))
    ok 221 - len(mp_decode_ext(x, 0x00010001)
    ok 222 - len(mp_next_ext(x, 0x00010001)
    ok 223 - len(mp_check_ext(x, 0x00010001)
    ok 224 - mp_sizeof_ext(0x00010001)
    ok 225 - mp_encode_ext(x, 0x00010001) == x
    # *** test_exts: done ***
ok 12 - subtests
    1..54
    # *** test_arrays ***
    # array 0
    ok 1 - mp_check_array(0) == 0
    ok 2 - mp_decode(mp_encode(0)) == 0
    ok 3 - len(mp_encode_array(0)
    ok 4 - len(mp_decode_array(0))
    ok 5 - mp_sizeof_array(0)
    ok 6 - mp_encode(0) == "\x90"
    # array 1
    ok 7 - mp_check_array(1) == 0
    ok 8 - mp_decode(mp_encode(1)) == 1
    ok 9 - len(mp_encode_array(1)
    ok 10 - len(mp_decode_array(1))
    ok 11 - mp_sizeof_array(1)
    ok 12 - mp_encode(1) == "\x91"
    # array 15
    ok 13 - mp_check_array(15) == 0
    ok 14 - mp_decode(mp_encode(15)) == 15
    ok 15 - len(mp_encode_array(15)
    ok 16 - len(mp_decode_array(15))
    ok 17 - mp_sizeof_array(15)
    ok 18 - mp_encode(15) == "\x9f"
    # array 16
    ok 19 - mp_check_array(16) == 0
    ok 20 - mp_decode(mp_encode(16)) == 16
    ok 21 - len(mp_encode_array(16)
    ok 22 - len(mp_decode_array(16))
    ok 23 - mp_sizeof_array(16)
    ok 24 - mp_encode(16) == "\xdc\x00\x10"
    # array 0xfffe
    ok 25 - mp_check_array(0xfffe) == 0
    ok 26 - mp_decode(mp_encode(0xfffe)) == 0xfffe
    ok 27 - len(mp_encode_array(0xfffe)
    ok 28 - len(mp_decode_array(0xfffe))
    ok 29 - mp_sizeof_array(0xfffe)
    ok 30 - mp_encode(0xfffe) == "\xdc\xff\xfe"
    # array 0xffff
    ok 31 - mp_check_array(0xffff) == 0
    ok 32 - mp_decode(mp_encode(0xffff)) == 0xffff
    ok 33 - len(mp_encode_array(0xffff)
    ok 34 - len(mp_decode_array(0xffff))
    ok 35 - mp_sizeof_array(0xffff)
    ok 36 - mp_encode(0xffff) == "\xdc\xff\xff"
    # array 0x10000
    ok 37 - mp_check_array(0x10000) == 0
    ok 38 - mp_decode(mp_encode(0x10000)) == 0x10000
    ok 39 - len(mp_encode_array(0x10000)
    ok 40 - len(mp_decode_array(0x10000))
    ok 41 - mp_sizeof_array(0x10000)
    ok 42 - mp_encode(0x10000) == "\xdd\x00\x01\x00\x00"
    # array 0xfffffffeU
    ok 43 - mp_check_array(0xfffffffeU) == 0
    ok 44 - mp_decode(mp_encode(0xfffffffeU)) == 0xfffffffeU
    ok 45 - len(mp_encode_array(0xfffffffeU)
    ok 46 - len(mp_decode_array(0xfffffffeU))
    ok 47 - mp_sizeof_array(0xfffffffeU)
    ok 48 - mp_encode(0xfffffffeU) == "\xdd\xff\xff\xff\xfe"
    # array 0xffffffffU
    ok 49 - mp_check_array(0xffffffffU) == 0
    ok 50 - mp_decode(mp_encode(0xffffffffU)) == 0xffffffffU
    ok 51 - len(mp_encode_array(0xffffffffU)
    ok 52 - len(mp_decode_array(0xffffffffU))
    ok 53 - mp_sizeof_array(0xffffffffU)
    ok 54 - mp_encode(0xffffffffU) == "\xdd\xff\xff\xff\xff"
    # *** test_arrays: done ***
ok 13 - subtests
    1..54
    # *** test_maps ***
    # map 0
    ok 1 - mp_check_map(0) == 0
    ok 2 - mp_decode(mp_encode(0)) == 0
    ok 3 - len(mp_encode_map(0)
    ok 4 - len(mp_decode_map(0))
    ok 5 - mp_sizeof_map(0)
    ok 6 - mp_encode(0) == "\x80"
    # map 1
    ok 7 - mp_check_map(1) == 0
    ok 8 - mp_decode(mp_encode(1)) == 1
    ok 9 - len(mp_encode_map(1)
    ok 10 - len(mp_decode_map(1))
    ok 11 - mp_sizeof_map(1)
    ok 12 - mp_encode(1) == "\x81"
    # map 15
    ok 13 - mp_check_map(15) == 0
    ok 14 - mp_decode(mp_encode(15)) == 15
    ok 15 - len(mp_encode_map(15)
    ok 16 - len(mp_decode_map(15))
    ok 17 - mp_sizeof_map(15)
    ok 18 - mp_encode(15) == "\x8f"
    # map 16
    ok 19 - mp_check_map(16) == 0
    ok 20 - mp_decode(mp_encode(16)) == 16
    ok 21 - len(mp_encode_map(16)
    ok 22 - len(mp_decode_map(16))
    ok 23 - mp_sizeof_map(16)
    ok 24 - mp_encode(16) == "\xde\x00\x10"
    # map 0xfffe
    ok 25 - mp_check_map(0xfffe) == 0
    ok 26 - mp_decode(mp_encode(0xfffe)) == 0xfffe
    ok 27 - len(mp_encode_map(0xfffe)
    ok 28 - len(mp_decode_map(0xfffe))
    ok 29 - mp_sizeof_map(0xfffe)
    ok 30 - mp_encode(0xfffe) == "\xde\xff\xfe"
    # map 0xffff
    ok 31 - mp_check_map(0xffff) == 0
    ok 32 - mp_decode(mp_encode(0xffff)) == 0xffff
    ok 33 - len(mp_encode_map(0xffff)
    ok 34 - len(mp_decode_map(0xffff))
    ok 35 - mp_sizeof_map(0xffff)
    ok 36 - mp_encode(0xffff) == "\xde\xff\xff"
    # map 0x10000
    ok 37 - mp_check_map(0x10000) == 0
    ok 38 - mp_decode(mp_encode(0x10000)) == 0x10000
    ok 39 - len(mp_encode_map(0x10000)
    ok 40 - len(mp_decode_map(0x10000))
    ok 41 - mp_sizeof_map(0x10000)
    ok 42 - mp_encode(0x10000) == "\xdf\x00\x01\x00\x00"
    # map 0xfffffffeU
    ok 43 - mp_check_map(0xfffffffeU) == 0
    ok 44 - mp_decode(mp_encode(0xfffffffeU)) == 0xfffffffeU
    ok 45 - len(mp_encode_map(0xfffffffeU)
    ok 46 - len(mp_decode_map(0xfffffffeU))
    ok 47 - mp_sizeof_map(0xfffffffeU)
    ok 48 - mp_encode(0xfffffffeU) == "\xdf\xff\xff\xff\xfe"
    # map 0xffffffffU
    ok 49 - mp_check_map(0xffffffffU) == 0
    ok 50 - mp_decode(mp_encode(0xffffffffU)) == 0xffffffffU
    ok 51 - len(mp_encode_map(0xffffffffU)
    ok 52 - len(mp_decode_map(0xffffffffU))
    ok 53 - mp_sizeof_map(0xffffffffU)
    ok 54 - mp_encode(0xffffffffU) == "\xdf\xff\xff\xff\xff"
    # *** test_maps: done ***
ok 14 - subtests
    1..52
    # *** test_next_on_arrays ***
    # next/check on array(0)
    ok 1 - mp_check(array 0))
    ok 2 - len(array 0) == 1
    ok 3 - len(mp_check(array 0)) == 1
    ok 4 - len(mp_next(array 0)) == 1
    # next/check on array(1)
    ok 5 - mp_check(array 1))
    ok 6 - len(array 1) == 2
    ok 7 - len(mp_check(array 1)) == 2
    ok 8 - len(mp_next(array 1)) == 2
    # next/check on array(15)
    ok 9 - mp_check(array 15))
    ok 10 - len(array 15) == 16
    ok 11 - len(mp_check(array 15)) == 16
    ok 12 - len(mp_next(array 15)) == 16
    # next/check on array(16)
    ok 13 - mp_check(array 16))
    ok 14 - len(array 16) == 19
    ok 15 - len(mp_check(array 16)) == 19
    ok 16 - len(mp_next(array 16)) == 19
    # next/check on array(17)
    ok 17 - mp_check(array 17))
    ok 18 - len(array 17) == 20
    ok 19 - len(mp_check(array 17)) == 20
    ok 20 - len(mp_next(array 17)) == 20
    # next/check on array(254)
    ok 21 - mp_check(array 254))
    ok 22 - len(array 254) == 257
    ok 23 - len(mp_check(array 254)) == 257
    ok 24 - len(mp_next(array 254)) == 257
    # next/check on array(255)
    ok 25 - mp_check(array 255))
    ok 26 - len(array 255) == 258
    ok 27 - len(mp_check(array 255)) == 258
    ok 28 - len(mp_next(array 255)) == 258
    # next/check on array(256)
    ok 29 - mp_check(array 256))
    ok 30 - len(array 256) == 259
    ok 31 - len(mp_check(array 256)) == 259
    ok 32 - len(mp_next(array 256)) == 259
    # next/check on array(257)
    ok 33 - mp_check(array 257))
    ok 34 - len(array 257) == 260
    ok 35 - len(mp_check(array 257)) == 260
    ok 36 - len(mp_next(array 257)) == 260
    # next/check on array(65534)
    ok 37 - mp_check(array 65534))
    ok 38 - len(array 65534) == 65537
    ok 39 - len(mp_check(array 65534)) == 65537
    ok 40 - len(mp_next(array 65534)) == 65537
    # next/check on array(65535)
    ok 41 - mp_check(array 65535))
    ok 42 - len(array 65535) == 65538
    ok 43 - len(mp_check(array 65535)) == 65538
    ok 44 - len(mp_next(array 65535)) == 65538
    # next/check on array(65536)
    ok 45 - mp_check(array 65536))
    ok 46 - len(array 65536) == 65541
    ok 47 - len(mp_check(array 65536)) == 65541
    ok 48 - len(mp_next(array 65536)) == 65541
    # next/check on array(65537)
    ok 49 - mp_check(array 65537))
    ok 50 - len(array 65537) == 65542
    ok 51 - len(mp_check(array 65537)) == 65542
    ok 52 - len(mp_next(array 65537)) == 65542
    # *** test_next_on_arrays: done ***
ok 15 - subtests
    1..52
    # *** test_next_on_maps ***
    # next/check on map(0)
    ok 1 - mp_check(map 0))
    ok 2 - len(map 0) == 1
    ok 3 - len(mp_check(map 0)) == 1
    ok 4 - len(mp_next(map 0)) == 1
    # next/check on map(1)
    ok 5 - mp_check(map 1))
    ok 6 - len(map 1) == 3
    ok 7 - len(mp_check(map 1)) == 3
    ok 8 - len(mp_next(map 1)) == 3
    # next/check on map(15)
    ok 9 - mp_check(map 15))
    ok 10 - len(map 15) == 31
    ok 11 - len(mp_check(map 15)) == 31
    ok 12 - len(mp_next(map 15)) == 31
    # next/check on map(16)
    ok 13 - mp_check(map 16))
    ok 14 - len(map 16) == 35
    ok 15 - len(mp_check(map 16)) == 35
    ok 16 - len(mp_next(map 16)) == 35
    # next/check on map(17)
    ok 17 - mp_check(map 17))
    ok 18 - len(map 17) == 37
    ok 19 - len(mp_check(map 17)) == 37
    ok 20 - len(mp_next(map 17)) == 37
    # next/check on map(254)
    ok 21 - mp_check(map 254))
    ok 22 - len(map 254) == 511
    ok 23 - len(mp_check(map 254)) == 511
    ok 24 - len(mp_next(map 254)) == 511
    # next/check on map(255)
    ok 25 - mp_check(map 255))
    ok 26 - len(map 255) == 513
    ok 27 - len(mp_check(map 255)) == 513
    ok 28 - len(mp_next(map 255)) == 513
    # next/check on map(256)
    ok 29 - mp_check(map 256))
    ok 30 - len(map 256) == 515
    ok 31 - len(mp_check(map 256)) == 515
    ok 32 - len(mp_next(map 256)) == 515
    # next/check on map(257)
    ok 33 - mp_check(map 257))
    ok 34 - len(map 257) == 517
    ok 35 - len(mp_check(map 257)) == 517
    ok 36 - len(mp_next(map 257)) == 517
    # next/check on map(65534)
    ok 37 - mp_check(map 65534))
    ok 38 - len(map 65534) == 131071
    ok 39 - len(mp_check(map 65534)) == 131071
    ok 40 - len(mp_next(map 65534)) == 131071
    # next/check on map(65535)
    ok 41 - mp_check(map 65535))
    ok 42 - len(map 65535) == 131073
    ok 43 - len(mp_check(map 65535)) == 131073
    ok 44 - len(mp_next(map 65535)) == 131073
    # next/check on map(65536)
    ok 45 - mp_check(map 65536))
    ok 46 - len(map 65536) == 131077
    ok 47 - len(mp_check(map 65536)) == 131077
    ok 48 - len(mp_next(map 65536)) == 131077
    # next/check on map(65537)
    ok 49 - mp_check(map 65537))
    ok 50 - len(map 65537) == 131079
    ok 51 - len(mp_check(map 65537)) == 131079
    ok 52 - len(mp_next(map 65537)) == 131079
    # *** test_next_on_maps: done ***
ok 16 - subtests
    1..227
    # *** test_compare_uints ***
    ok 1 - mp_compare_uint(0, 0) == 0
    ok 2 - mp_compare_uint(0, 0) == 0
    ok 3 - mp_compare_uint(0, 0) == 0
    ok 4 - mp_compare_uint(0, 1) < 0
    ok 5 - mp_compare_uint(0, 126) < 0
    ok 6 - mp_compare_uint(0, 127) < 0
    ok 7 - mp_compare_uint(0, 128) < 0
    ok 8 - mp_compare_uint(0, 254) < 0
    ok 9 - mp_compare_uint(0, 255) < 0
    ok 10 - mp_compare_uint(0, 65534) < 0
    ok 11 - mp_compare_uint(0, 65535) < 0
    ok 12 - mp_compare_uint(0, 65536) < 0
    ok 13 - mp_compare_uint(0, 4294967294) < 0
    ok 14 - mp_compare_uint(0, 4294967295) < 0
    ok 15 - mp_compare_uint(0, 4294967296) < 0
    ok 16 - mp_compare_uint(0, 18446744073709551614) < 0
    ok 17 - mp_compare_uint(0, 18446744073709551615) < 0
    ok 18 - mp_compare_uint(1, 0) > 0
    ok 19 - mp_compare_uint(1, 1) == 0
    ok 20 - mp_compare_uint(1, 126) < 0
    ok 21 - mp_compare_uint(1, 127) < 0
    ok 22 - mp_compare_uint(1, 128) < 0
    ok 23 - mp_compare_uint(1, 254) < 0
    ok 24 - mp_compare_uint(1, 255) < 0
    ok 25 - mp_compare_uint(1, 65534) < 0
    ok 26 - mp_compare_uint(1, 65535) < 0
    ok 27 - mp_compare_uint(1, 65536) < 0
    ok 28 - mp_compare_uint(1, 4294967294) < 0
    ok 29 - mp_compare_uint(1, 4294967295) < 0
    ok 30 - mp_compare_uint(1, 4294967296) < 0
    ok 31 - mp_compare_uint(1, 18446744073709551614) < 0
    ok 32 - mp_compare_uint(1, 18446744073709551615) < 0
    ok 33 - mp_compare_uint(126, 0) > 0
    ok 34 - mp_compare_uint(126, 1) > 0
    ok 35 - mp_compare_uint(126, 126) == 0
    ok 36 - mp_compare_uint(126, 127) < 0
    ok 37 - mp_compare_uint(126, 128) < 0
    ok 38 - mp_compare_uint(126, 254) < 0
    ok 39 - mp_compare_uint(126, 255) < 0
    ok 40 - mp_compare_uint(126, 65534) < 0
    ok 41 - mp_compare_uint(126, 65535) < 0
    ok 42 - mp_compare_uint(126, 65536) < 0
    ok 43 - mp_compare_uint(126, 4294967294) < 0
    ok 44 - mp_compare_uint(126, 4294967295) < 0
    ok 45 - mp_compare_uint(126, 4294967296) < 0
    ok 46 - mp_compare_uint(126, 18446744073709551614) < 0
    ok 47 - mp_compare_uint(126, 18446744073709551615) < 0
    ok 48 - mp_compare_uint(127, 0) > 0
    ok 49 - mp_compare_uint(127, 1) > 0
    ok 50 - mp_compare_uint(127, 126) > 0
    ok 51 - mp_compare_uint(127, 127) == 0
    ok 52 - mp_compare_uint(127, 128) < 0
    ok 53 - mp_compare_uint(127, 254) < 0
    ok 54 - mp_compare_uint(127, 255) < 0
    ok 55 - mp_compare_uint(127, 65534) < 0
    ok 56 - mp_compare_uint(127, 65535) < 0
    ok 57 - mp_compare_uint(127, 65536) < 0
    ok 58 - mp_compare_uint(127, 4294967294) < 0
    ok 59 - mp_compare_uint(127, 4294967295) < 0
    ok 60 - mp_compare_uint(127, 4294967296) < 0
    ok 61 - mp_compare_uint(127, 18446744073709551614) < 0
    ok 62 - mp_compare_uint(127, 18446744073709551615) < 0
    ok 63 - mp_compare_uint(128, 0) > 0
    ok 64 - mp_compare_uint(128, 1) > 0
    ok 65 - mp_compare_uint(128, 126) > 0
    ok 66 - mp_compare_uint(128, 127) > 0
    ok 67 - mp_compare_uint(128, 128) == 0
    ok 68 - mp_compare_uint(128, 254) < 0
    ok 69 - mp_compare_uint(128, 255) < 0
    ok 70 - mp_compare_uint(128, 65534) < 0
    ok 71 - mp_compare_uint(128, 65535) < 0
    ok 72 - mp_compare_uint(128, 65536) < 0
    ok 73 - mp_compare_uint(128, 4294967294) < 0
    ok 74 - mp_compare_uint(128, 4294967295) < 0
    ok 75 - mp_compare_uint(128, 4294967296) < 0
    ok 76 - mp_compare_uint(128, 18446744073709551614) < 0
    ok 77 - mp_compare_uint(128, 18446744073709551615) < 0
    ok 78 - mp_compare_uint(254, 0) > 0
    ok 79 - mp_compare_uint(254, 1) > 0
    ok 80 - mp_compare_uint(254, 126) > 0
    ok 81 - mp_compare_uint(254, 127) > 0
    ok 82 - mp_compare_uint(254, 128) > 0
    ok 83 - mp_compare_uint(254, 254) == 0
    ok 84 - mp_compare_uint(254, 255) < 0
    ok 85 - mp_compare_uint(254, 65534) < 0
    ok 86 - mp_compare_uint(254, 65535) < 0
    ok 87 - mp_compare_uint(254, 65536) < 0
    ok 88 - mp_compare_uint(254, 4294967294) < 0
    ok 89 - mp_compare_uint(254, 4294967295) < 0
    ok 90 - mp_compare_uint(254, 4294967296) < 0
    ok 91 - mp_compare_uint(254, 18446744073709551614) < 0
    ok 92 - mp_compare_uint(254, 18446744073709551615) < 0
    ok 93 - mp_compare_uint(255, 0) > 0
    ok 94 - mp_compare_uint(255, 1) > 0
    ok 95 - mp_compare_uint(255, 126) > 0
    ok 96 - mp_compare_uint(255, 127) > 0
    ok 97 - mp_compare_uint(255, 128) > 0
    ok 98 - mp_compare_uint(255, 254) > 0
    ok 99 - mp_compare_uint(255, 255) == 0
    ok 100 - mp_compare_uint(255, 65534) < 0
    ok 101 - mp_compare_uint(255, 65535) < 0
    ok 102 - mp_compare_uint(255, 65536) < 0
    ok 103 - mp_compare_uint(255, 4294967294) < 0
    ok 104 - mp_compare_uint(255, 4294967295) < 0
    ok 105 - mp_compare_uint(255, 4294967296) < 0
    ok 106 - mp_compare_uint(255, 18446744073709551614) < 0
    ok 107 - mp_compare_uint(255, 18446744073709551615) < 0
    ok 108 - mp_compare_uint(65534, 0) > 0
    ok 109 - mp_compare_uint(65534, 1) > 0
    ok 110 - mp_compare_uint(65534, 126) > 0
    ok 111 - mp_compare_uint(65534, 127) > 0
    ok 112 - mp_compare_uint(65534, 128) > 0
    ok 113 - mp_compare_uint(65534, 254) > 0
    ok 114 - mp_compare_uint(65534, 255) > 0
    ok 115 - mp_compare_uint(65534, 65534) == 0
    ok 116 - mp_compare_uint(65534, 65535) < 0
    ok 117 - mp_compare_uint(65534, 65536) < 0
    ok 118 - mp_compare_uint(65534, 4294967294) < 0
    ok 119 - mp_compare_uint(65534, 4294967295) < 0
    ok 120 - mp_compare_uint(65534, 4294967296) < 0
    ok 121 - mp_compare_uint(65534, 18446744073709551614) < 0
    ok 122 - mp_compare_uint(65534, 18446744073709551615) < 0
    ok 123 - mp_compare_uint(65535, 0) > 0
    ok 124 - mp_compare_uint(65535, 1) > 0
    ok 125 - mp_compare_uint(65535, 126) > 0
    ok 126 - mp_compare_uint(65535, 127) > 0
    ok 127 - mp_compare_uint(65535, 128) > 0
    ok 128 - mp_compare_uint(65535, 254) > 0
    ok 129 - mp_compare_uint(65535, 255) > 0
    ok 130 - mp_compare_uint(65535, 65534) > 0
    ok 131 - mp_compare_uint(65535, 65535) == 0
    ok 132 - mp_compare_uint(65535, 65536) < 0
    ok 133 - mp_compare_uint(65535, 4294967294) < 0
    ok 134 - mp_compare_uint(65535, 4294967295) < 0
    ok 135 - mp_compare_uint(65535, 4294967296) < 0
    ok 136 - mp_compare_uint(65535, 18446744073709551614) < 0
    ok 137 - mp_compare_uint(65535, 18446744073709551615) < 0
    ok 138 - mp_compare_uint(65536, 0) > 0
    ok 139 - mp_compare_uint(65536, 1) > 0
    ok 140 - mp_compare_uint(65536, 126) > 0
    ok 141 - mp_compare_uint(65536, 127) > 0
    ok 142 - mp_compare_uint(65536, 128) > 0
    ok 143 - mp_compare_uint(65536, 254) > 0
    ok 144 - mp_compare_uint(65536, 255) > 0
    ok 145 - mp_compare_uint(65536, 65534) > 0
    ok 146 - mp_compare_uint(65536, 65535) > 0
    ok 147 - mp_compare_uint(65536, 65536) == 0
    ok 148 - mp_compare_uint(65536, 4294967294) < 0
    ok 149 - mp_compare_uint(65536, 4294967295) < 0
    ok 150 - mp_compare_uint(65536, 4294967296) < 0
    ok 151 - mp_compare_uint(65536, 18446744073709551614) < 0
    ok 152 - mp_compare_uint(65536, 18446744073709551615) < 0
    ok 153 - mp_compare_uint(4294967294, 0) > 0
    ok 154 - mp_compare_uint(4294967294, 1) > 0
    ok 155 - mp_compare_uint(4294967294, 126) > 0
    ok 156 - mp_compare_uint(4294967294, 127) > 0
    ok 157 - mp_compare_uint(4294967294, 128) > 0
    ok 158 - mp_compare_uint(4294967294, 254) > 0
    ok 159 - mp_compare_uint(4294967294, 255) > 0
    ok 160 - mp_compare_uint(4294967294, 65534) > 0
    ok 161 - mp_compare_uint(4294967294, 65535) > 0
    ok 162 - mp_compare_uint(4294967294, 65536) > 0
    ok 163 - mp_compare_uint(4294967294, 4294967294) == 0
    ok 164 - mp_compare_uint(4294967294, 4294967295) < 0
    ok 165 - mp_compare_uint(4294967294, 4294967296) < 0
    ok 166 - mp_compare_uint(4294967294, 18446744073709551614) < 0
    ok 167 - mp_compare_uint(4294967294, 18446744073709551615) < 0
    ok 168 - mp_compare_uint(4294967295, 0) > 0
    ok 169 - mp_compare_uint(4294967295, 1) > 0
    ok 170 - mp_compare_uint(4294967295, 126) > 0
    ok 171 - mp_compare_uint(4294967295, 127) > 0
    ok 172 - mp_compare_uint(4294967295, 128) > 0
    ok 173 - mp_compare_uint(4294967295, 254) > 0
    ok 174 - mp_compare_uint(4294967295, 255) > 0
    ok 175 - mp_compare_uint(4294967295, 65534) > 0
    ok 176 - mp_compare_uint(4294967295, 65535) > 0
    ok 177 - mp_compare_uint(4294967295, 65536) > 0
    ok 178 - mp_compare_uint(4294967295, 4294967294) > 0
    ok 179 - mp_compare_uint(4294967295, 4294967295) == 0
    ok 180 - mp_compare_uint(4294967295, 4294967296) < 0
    ok 181 - mp_compare_uint(4294967295, 18446744073709551614) < 0
    ok 182 - mp_compare_uint(4294967295, 18446744073709551615) < 0
    ok 183 - mp_compare_uint(4294967296, 0) > 0
    ok 184 - mp_compare_uint(4294967296, 1) > 0
    ok 185 - mp_compare_uint(4294967296, 126) > 0
    ok 186 - mp_compare_uint(4294967296, 127) > 0
    ok 187 - mp_compare_uint(4294967296, 128) > 0
    ok 188 - mp_compare_uint(4294967296, 254) > 0
    ok 189 - mp_compare_uint(4294967296, 255) > 0
    ok 190 - mp_compare_uint(4294967296, 65534) > 0
    ok 191 - mp_compare_uint(4294967296, 65535) > 0
    ok 192 - mp_compare_uint(4294967296, 65536) > 0
    ok 193 - mp_compare_uint(4294967296, 4294967294) > 0
    ok 194 - mp_compare_uint(4294967296, 4294967295) > 0
    ok 195 - mp_compare_uint(4294967296, 4294967296) == 0
    ok 196 - mp_compare_uint(4294967296, 18446744073709551614) < 0
    ok 197 - mp_compare_uint(4294967296, 18446744073709551615) < 0
    ok 198 - mp_compare_uint(18446744073709551614, 0) > 0
    ok 199 - mp_compare_uint(18446744073709551614, 1) > 0
    ok 200 - mp_compare_uint(18446744073709551614, 126) > 0
    ok 201 - mp_compare_uint(18446744073709551614, 127) > 0
    ok 202 - mp_compare_uint(18446744073709551614, 128) > 0
    ok 203 - mp_compare_uint(18446744073709551614, 254) > 0
    ok 204 - mp_compare_uint(18446744073709551614, 255) > 0
    ok 205 - mp_compare_uint(18446744073709551614, 65534) > 0
    ok 206 - mp_compare_uint(18446744073709551614, 65535) > 0
    ok 207 - mp_compare_uint(18446744073709551614, 65536) > 0
    ok 208 - mp_compare_uint(18446744073709551614, 4294967294) > 0
    ok 209 - mp_compare_uint(18446744073709551614, 4294967295) > 0
    ok 210 - mp_compare_uint(18446744073709551614, 4294967296) > 0
    ok 211 - mp_compare_uint(18446744073709551614, 18446744073709551614) == 0
    ok 212 - mp_compare_uint(18446744073709551614, 18446744073709551615) < 0
    ok 213 - mp_compare_uint(18446744073709551615, 0) > 0
    ok 214 - mp_compare_uint(18446744073709551615, 1) > 0
    ok 215 - mp_compare_uint(18446744073709551615, 126) > 0
    ok 216 - mp_compare_uint(18446744073709551615, 127) > 0
    ok 217 - mp_compare_uint(18446744073709551615, 128) > 0
    ok 218 - mp_compare_uint(18446744073709551615, 254) > 0
    ok 219 - mp_compare_uint(18446744073709551615, 255) > 0
    ok 220 - mp_compare_uint(18446744073709551615, 65534) > 0
    ok 221 - mp_compare_uint(18446744073709551615, 65535) > 0
    ok 222 - mp_compare_uint(18446744073709551615, 65536) > 0
    ok 223 - mp_compare_uint(18446744073709551615, 4294967294) > 0
    ok 224 - mp_compare_uint(18446744073709551615, 4294967295) > 0
    ok 225 - mp_compare_uint(18446744073709551615, 4294967296) > 0
    ok 226 - mp_compare_uint(18446744073709551615, 18446744073709551614) > 0
    ok 227 - mp_compare_uint(18446744073709551615, 18446744073709551615) == 0
    # *** test_compare_uints: done ***
ok 17 - subtests
    1..282
    # *** test_format ***
    ok 1 - Test type on step 0
    ok 2 - Test value on step 0
    ok 3 - Test type on step 1
    ok 4 - Test value on step 1
    ok 5 - Test type on step 2
    ok 6 - Test value on step 2
    ok 7 - Test type on step 3
    ok 8 - Test value on step 3
    ok 9 - Test type on step 4
    ok 10 - Test value on step 4
    ok 11 - Test type on step 5
    ok 12 - Test value on step 5
    ok 13 - Test type on step 6
    ok 14 - Test value on step 6
    ok 15 - Test type on step 7
    ok 16 - Test value on step 7
    ok 17 - Test type on step 8
    ok 18 - Test value on step 8
    ok 19 - Test type on step 9
    ok 20 - Test value on step 9
    ok 21 - Test type on step 10
    ok 22 - Test value on step 10
    ok 23 - Test type on step 11
    ok 24 - Test value on step 11
    ok 25 - Test type on step 12
    ok 26 - Test value on step 12
    ok 27 - Test type on step 13
    ok 28 - Test value on step 13
    ok 29 - Test type on step 14
    ok 30 - Test value on step 14
    ok 31 - Test type on step 0
    ok 32 - Test value on step 0
    ok 33 - Test type on step 1
    ok 34 - Test value on step 1
    ok 35 - Test type on step 2
    ok 36 - Test value on step 2
    ok 37 - Test type on step 3
    ok 38 - Test value on step 3
    ok 39 - Test type on step 4
    ok 40 - Test value on step 4
    ok 41 - Test type on step 5
    ok 42 - Test value on step 5
    ok 43 - Test type on step 6
    ok 44 - Test value on step 6
    ok 45 - Test type on step 7
    ok 46 - Test value on step 7
    ok 47 - Test type on step 8
    ok 48 - Test value on step 8
    ok 49 - Test type on step 9
    ok 50 - Test value on step 9
    ok 51 - Test type on step 10
    ok 52 - Test value on step 10
    ok 53 - Test type on step 11
    ok 54 - Test value on step 11
    ok 55 - Test type on step 12
    ok 56 - Test value on step 12
    ok 57 - Test type on step 13
    ok 58 - Test value on step 13
    ok 59 - Test type on step 14
    ok 60 - Test value on step 14
    ok 61 - check
    ok 62 - type
    ok 63 - decode
    ok 64 - check
    ok 65 - type
    ok 66 - check
    ok 67 - type
    ok 68 - decode
    ok 69 - check
    ok 70 - type
    ok 71 - decode
    ok 72 - check
    ok 73 - type
    ok 74 - decode
    ok 75 - check
    ok 76 - type
    ok 77 - decode
    ok 78 - check
    ok 79 - type
    ok 80 - decode
    ok 81 - check
    ok 82 - type
    ok 83 - decode
    ok 84 - check
    ok 85 - type
    ok 86 - decode
    ok 87 - check
    ok 88 - type
    ok 89 - decode
    ok 90 - check
    ok 91 - type
    ok 92 - decode
    ok 93 - check
    ok 94 - type
    ok 95 - decode
    ok 96 - check
    ok 97 - type
    ok 98 - decode
    ok 99 - compare
    ok 100 - check
    ok 101 - type
    ok 102 - decode
    ok 103 - check
    ok 104 - type
    ok 105 - decode
    ok 106 - compare
    ok 107 - check
    ok 108 - type
    ok 109 - decode
    ok 110 - check
    ok 111 - type
    ok 112 - decode
    ok 113 - check
    ok 114 - type
    ok 115 - check
    ok 116 - compare
    ok 117 - check
    ok 118 - type
    ok 119 - decode
    ok 120 - check
    ok 121 - type
    ok 122 - decode
    ok 123 - check
    ok 124 - type
    ok 125 - decode
    ok 126 - compare
    ok 127 - check
    ok 128 - type
    ok 129 - decode
    ok 130 - check
    ok 131 - type
    ok 132 - decode
    ok 133 - check
    ok 134 - type
    ok 135 - decode
    ok 136 - check
    ok 137 - type
    ok 138 - decode
    ok 139 - nothing more
    ok 140 - no magic detected
    ok 141 - return value on step 0
    ok 142 - buffer overflow on step 0
    ok 143 - return value on step 1
    ok 144 - buffer overflow on step 1
    ok 145 - return value on step 2
    ok 146 - buffer overflow on step 2
    ok 147 - return value on step 3
    ok 148 - buffer overflow on step 3
    ok 149 - return value on step 4
    ok 150 - buffer overflow on step 4
    ok 151 - return value on step 5
    ok 152 - buffer overflow on step 5
    ok 153 - return value on step 6
    ok 154 - buffer overflow on step 6
    ok 155 - return value on step 7
    ok 156 - buffer overflow on step 7
    ok 157 - return value on step 8
    ok 158 - buffer overflow on step 8
    ok 159 - return value on step 9
    ok 160 - buffer overflow on step 9
    ok 161 - return value on step 10
    ok 162 - buffer overflow on step 10
    ok 163 - return value on step 11
    ok 164 - buffer overflow on step 11
    ok 165 - return value on step 12
    ok 166 - buffer overflow on step 12
    ok 167 - return value on step 13
    ok 168 - buffer overflow on step 13
    ok 169 - return value on step 14
    ok 170 - buffer overflow on step 14
    ok 171 - return value on step 15
    ok 172 - buffer overflow on step 15
    ok 173 - return value on step 16
    ok 174 - buffer overflow on step 16
    ok 175 - return value on step 17
    ok 176 - buffer overflow on step 17
    ok 177 - return value on step 18
    ok 178 - buffer overflow on step 18
    ok 179 - return value on step 19
    ok 180 - buffer overflow on step 19
    ok 181 - return value on step 20
    ok 182 - buffer overflow on step 20
    ok 183 - return value on step 21
    ok 184 - buffer overflow on step 21
    ok 185 - return value on step 22
    ok 186 - buffer overflow on step 22
    ok 187 - return value on step 23
    ok 188 - buffer overflow on step 23
    ok 189 - return value on step 24
    ok 190 - buffer overflow on step 24
    ok 191 - return value on step 25
    ok 192 - buffer overflow on step 25
    ok 193 - return value on step 26
    ok 194 - buffer overflow on step 26
    ok 195 - return value on step 27
    ok 196 - buffer overflow on step 27
    ok 197 - return value on step 28
    ok 198 - buffer overflow on step 28
    ok 199 - return value on step 29
    ok 200 - buffer overflow on step 29
    ok 201 - return value on step 30
    ok 202 - buffer overflow on step 30
    ok 203 - return value on step 31
    ok 204 - buffer overflow on step 31
    ok 205 - return value on step 32
    ok 206 - buffer overflow on step 32
    ok 207 - return value on step 33
    ok 208 - buffer overflow on step 33
    ok 209 - return value on step 34
    ok 210 - buffer overflow on step 34
    ok 211 - return value on step 35
    ok 212 - buffer overflow on step 35
    ok 213 - return value on step 36
    ok 214 - buffer overflow on step 36
    ok 215 - return value on step 37
    ok 216 - buffer overflow on step 37
    ok 217 - return value on step 38
    ok 218 - buffer overflow on step 38
    ok 219 - return value on step 39
    ok 220 - buffer overflow on step 39
    ok 221 - return value on step 40
    ok 222 - buffer overflow on step 40
    ok 223 - return value on step 41
    ok 224 - buffer overflow on step 41
    ok 225 - return value on step 42
    ok 226 - buffer overflow on step 42
    ok 227 - return value on step 43
    ok 228 - buffer overflow on step 43
    ok 229 - return value on step 44
    ok 230 - buffer overflow on step 44
    ok 231 - return value on step 45
    ok 232 - buffer overflow on step 45
    ok 233 - return value on step 46
    ok 234 - buffer overflow on step 46
    ok 235 - return value on step 47
    ok 236 - buffer overflow on step 47
    ok 237 - return value on step 48
    ok 238 - buffer overflow on step 48
    ok 239 - return value on step 49
    ok 240 - buffer overflow on step 49
    ok 241 - return value on step 50
    ok 242 - buffer overflow on step 50
    ok 243 - return value on step 51
    ok 244 - buffer overflow on step 51
    ok 245 - return value on step 52
    ok 246 - buffer overflow on step 52
    ok 247 - return value on step 53
    ok 248 - buffer overflow on step 53
    ok 249 - return value on step 54
    ok 250 - buffer overflow on step 54
    ok 251 - return value on step 55
    ok 252 - buffer overflow on step 55
    ok 253 - return value on step 56
    ok 254 - buffer overflow on step 56
    ok 255 - return value on step 57
    ok 256 - buffer overflow on step 57
    ok 257 - return value on step 58
    ok 258 - buffer overflow on step 58
    ok 259 - return value on step 59
    ok 260 - buffer overflow on step 59
    ok 261 - return value on step 60
    ok 262 - buffer overflow on step 60
    ok 263 - return value on step 61
    ok 264 - buffer overflow on step 61
    ok 265 - return value on step 62
    ok 266 - buffer overflow on step 62
    ok 267 - return value on step 63
    ok 268 - buffer overflow on step 63
    ok 269 - return value on step 64
    ok 270 - buffer overflow on step 64
    ok 271 - return value on step 65
    ok 272 - buffer overflow on step 65
    ok 273 - return value on step 66
    ok 274 - buffer overflow on step 66
    ok 275 - return value on step 67
    ok 276 - buffer overflow on step 67
    ok 277 - return value on step 68
    ok 278 - buffer overflow on step 68
    ok 279 - return value on step 69
    ok 280 - buffer overflow on step 69
    ok 281 - return value on step 70
    ok 282 - buffer overflow on step 70
    # *** test_format: done ***
ok 18 - subtests
    1..12
    # *** test_mp_print ***
    ok 1 - mp_snprint return value
    ok 2 - mp_snprint result
    ok 3 - mp_snprint limit = 0
    ok 4 - mp_snprint limit = 1
    ok 5 - mp_snprint limit = 2
    ok 6 - mp_snprint limit = expected
    ok 7 - mp_snprint limit = expected + 1
    ok 8 - mp_fprint return value
    ok 9 - mp_fprint result
    ok 10 - mp_fprint I/O error
    ok 11 - mp_snprint max nesting depth return value
    ok 12 - mp_snprint max nesting depth result
    # *** test_mp_print: done ***
ok 19 - subtests
    1..5
    # *** test_mp_print_ext ***
    ok 1 - mp_snrpint size match
    ok 2 - str is correct
    ok 3 - mp_fprint size match
    ok 4 - mp_fprint written correct number of bytes
    ok 5 - str is correct
    # *** test_mp_print_ext: done ***
ok 20 - subtests
    1..69
    # *** test_mp_check ***
    ok 1 - invalid fixmap 1
    ok 2 - invalid fixmap 2
    ok 3 - invalid fixmap 3
    ok 4 - invalid fixarray 1
    ok 5 - invalid fixarray 2
    ok 6 - invalid fixarray 3
    ok 7 - invalid fixstr 1
    ok 8 - invalid fixstr 2
    ok 9 - invalid fixstr 3
    ok 10 - invalid bin8 1
    ok 11 - invalid bin8 2
    ok 12 - invalid bin16 1
    ok 13 - invalid bin16 2
    ok 14 - invalid bin32 1
    ok 15 - invalid bin32 2
    ok 16 - invalid ext8 1
    ok 17 - invalid ext8 2
    ok 18 - invalid ext8 3
    ok 19 - invalid ext8 4
    ok 20 - invalid ext16 1
    ok 21 - invalid ext16 2
    ok 22 - invalid ext16 3
    ok 23 - invalid ext16 4
    ok 24 - invalid ext32 1
    ok 25 - invalid ext32 2
    ok 26 - invalid ext32 3
    ok 27 - invalid ext32 4
    ok 28 - invalid float32 1
    ok 29 - invalid float32 2
    ok 30 - invalid float64 1
    ok 31 - invalid float64 2
    ok 32 - invalid uint8 1
    ok 33 - invalid uint16 1
    ok 34 - invalid uint32 1
    ok 35 - invalid uint64 1
    ok 36 - invalid int8 1
    ok 37 - invalid int16 1
    ok 38 - invalid int32 1
    ok 39 - invalid int64 1
    ok 40 - invalid fixext8 1
    ok 41 - invalid fixext8 2
    ok 42 - invalid fixext16 1
    ok 43 - invalid fixext16 2
    ok 44 - invalid fixext32 1
    ok 45 - invalid fixext32 2
    ok 46 - invalid fixext64 1
    ok 47 - invalid fixext64 2
    ok 48 - invalid fixext128 1
    ok 49 - invalid fixext128 2
    ok 50 - invalid str8 1
    ok 51 - invalid str8 2
    ok 52 - invalid str16 1
    ok 53 - invalid str16 2
    ok 54 - invalid str32 1
    ok 55 - invalid str32 2
    ok 56 - invalid array16 1
    ok 57 - invalid array16 2
    ok 58 - invalid array32 1
    ok 59 - invalid array32 2
    ok 60 - invalid map16 1
    ok 61 - invalid map16 2
    ok 62 - invalid map16 2
    ok 63 - invalid map32 1
    ok 64 - invalid map32 2
    ok 65 - invalid map32 3
    ok 66 - invalid header 1
    ok 67 - invalid header 2
    ok 68 - invalid header 3
    ok 69 - invalid header 4
    # *** test_mp_check: done ***
ok 21 - subtests
    1..24
    # *** test_mp_check_ext_data ***
    ok 1 - invalid ext8 - bad type
    ok 2 - invalid ext8 - bad data
    ok 3 - valid ext8
    ok 4 - invalid ext16 - bad type
    ok 5 - invalid ext16 - bad data
    ok 6 - valid ext16
    ok 7 - invalid ext32 - bad type
    ok 8 - invalid ext32 - bad data
    ok 9 - valid ext32
    ok 10 - invalid fixext8 - bad type
    ok 11 - invalid fixext8 - bad data
    ok 12 - valid fixext8
    ok 13 - invalid fixext16 - bad type
    ok 14 - invalid fixext16 - bad data
    ok 15 - valid fixext16
    ok 16 - invalid fixext32 - bad type
    ok 17 - invalid fixext32 - bad data
    ok 18 - valid fixext32
    ok 19 - invalid fixext64 - bad type
    ok 20 - invalid fixext64 - bad data
    ok 21 - valid fixext64
    ok 22 - invalid fixext128 - bad type
    ok 23 - invalid fixext128 - bad data
    ok 24 - valid fixext128
    # *** test_mp_check_ext_data: done ***
ok 22 - subtests
    1..96
    # *** test_numbers ***
    ok 1 - mp_read_int32(mp_encode_uint(123)) check success
    ok 2 - mp_read_int32(mp_encode_uint(123)) check pos advanced
    ok 3 - mp_read_int32(mp_encode_uint(123)) check result
    ok 4 - mp_read_int32(mp_encode_uint(12345)) check success
    ok 5 - mp_read_int32(mp_encode_uint(12345)) check pos advanced
    ok 6 - mp_read_int32(mp_encode_uint(12345)) check result
    ok 7 - mp_read_int32(mp_encode_uint(2147483647)) check success
    ok 8 - mp_read_int32(mp_encode_uint(2147483647)) check pos advanced
    ok 9 - mp_read_int32(mp_encode_uint(2147483647)) check result
    ok 10 - mp_read_int32(mp_encode_uint(2147483648)) check fail
    ok 11 - mp_read_int32(mp_encode_uint(2147483648)) check pos unchanged
    ok 12 - mp_read_int32(mp_encode_int(-123)) check success
    ok 13 - mp_read_int32(mp_encode_int(-123)) check pos advanced
    ok 14 - mp_read_int32(mp_encode_int(-123)) check result
    ok 15 - mp_read_int32(mp_encode_int(-12345)) check success
    ok 16 - mp_read_int32(mp_encode_int(-12345)) check pos advanced
    ok 17 - mp_read_int32(mp_encode_int(-12345)) check result
    ok 18 - mp_read_int32(mp_encode_int(-2147483648)) check success
    ok 19 - mp_read_int32(mp_encode_int(-2147483648)) check pos advanced
    ok 20 - mp_read_int32(mp_encode_int(-2147483648)) check result
    ok 21 - mp_read_int32(mp_encode_int(-2147483649LL)) check fail
    ok 22 - mp_read_int32(mp_encode_int(-2147483649LL)) check pos unchanged
    ok 23 - mp_read_int32(mp_encode_float(-1e2)) check fail
    ok 24 - mp_read_int32(mp_encode_float(-1e2)) check pos unchanged
    ok 25 - mp_read_int32(mp_encode_double(1.2345)) check fail
    ok 26 - mp_read_int32(mp_encode_double(1.2345)) check pos unchanged
    ok 27 - mp_read_int32(mp_encode_map(5)) check fail
    ok 28 - mp_read_int32(mp_encode_map(5)) check pos unchanged
    ok 29 - mp_read_int64(mp_encode_uint(123)) check success
    ok 30 - mp_read_int64(mp_encode_uint(123)) check pos advanced
    ok 31 - mp_read_int64(mp_encode_uint(123)) check result
    ok 32 - mp_read_int64(mp_encode_uint(12345)) check success
    ok 33 - mp_read_int64(mp_encode_uint(12345)) check pos advanced
    ok 34 - mp_read_int64(mp_encode_uint(12345)) check result
    ok 35 - mp_read_int64(mp_encode_uint(123456789)) check success
    ok 36 - mp_read_int64(mp_encode_uint(123456789)) check pos advanced
    ok 37 - mp_read_int64(mp_encode_uint(123456789)) check result
    ok 38 - mp_read_int64(mp_encode_uint(9223372036854775807ULL)) check success
    ok 39 - mp_read_int64(mp_encode_uint(9223372036854775807ULL)) check pos advanced
    ok 40 - mp_read_int64(mp_encode_uint(9223372036854775807ULL)) check result
    ok 41 - mp_read_int64(mp_encode_uint(9223372036854775808ULL)) check fail
    ok 42 - mp_read_int64(mp_encode_uint(9223372036854775808ULL)) check pos unchanged
    ok 43 - mp_read_int64(mp_encode_int(-123)) check success
    ok 44 - mp_read_int64(mp_encode_int(-123)) check pos advanced
    ok 45 - mp_read_int64(mp_encode_int(-123)) check result
    ok 46 - mp_read_int64(mp_encode_int(-12345)) check success
    ok 47 - mp_read_int64(mp_encode_int(-12345)) check pos advanced
    ok 48 - mp_read_int64(mp_encode_int(-12345)) check result
    ok 49 - mp_read_int64(mp_encode_int(-123456789)) check success
    ok 50 - mp_read_int64(mp_encode_int(-123456789)) check pos advanced
    ok 51 - mp_read_int64(mp_encode_int(-123456789)) check result
    ok 52 - mp_read_int64(mp_encode_int(-9223372036854775807LL)) check success
    ok 53 - mp_read_int64(mp_encode_int(-9223372036854775807LL)) check pos advanced
    ok 54 - mp_read_int64(mp_encode_int(-9223372036854775807LL)) check result
    ok 55 - mp_read_int64(mp_encode_float(100)) check fail
    ok 56 - mp_read_int64(mp_encode_float(100)) check pos unchanged
    ok 57 - mp_read_int64(mp_encode_double(-5.4321)) check fail
    ok 58 - mp_read_int64(mp_encode_double(-5.4321)) check pos unchanged
    ok 59 - mp_read_int64(mp_encode_array(10)) check fail
    ok 60 - mp_read_int64(mp_encode_array(10)) check pos unchanged
    ok 61 - mp_read_double(mp_encode_uint(123)) check success
    ok 62 - mp_read_double(mp_encode_uint(123)) check pos advanced
    ok 63 - mp_read_double(mp_encode_uint(123)) check result
    ok 64 - mp_read_double(mp_encode_uint(12345)) check success
    ok 65 - mp_read_double(mp_encode_uint(12345)) check pos advanced
    ok 66 - mp_read_double(mp_encode_uint(12345)) check result
    ok 67 - mp_read_double(mp_encode_uint(123456789)) check success
    ok 68 - mp_read_double(mp_encode_uint(123456789)) check pos advanced
    ok 69 - mp_read_double(mp_encode_uint(123456789)) check result
    ok 70 - mp_read_double(mp_encode_uint(1234567890000ULL)) check success
    ok 71 - mp_read_double(mp_encode_uint(1234567890000ULL)) check pos advanced
    ok 72 - mp_read_double(mp_encode_uint(1234567890000ULL)) check result
    ok 73 - mp_read_double(mp_encode_uint(123456789123456789ULL)) check fail
    ok 74 - mp_read_double(mp_encode_uint(123456789123456789ULL)) check pos unchanged
    ok 75 - mp_read_double(mp_encode_int(-123)) check success
    ok 76 - mp_read_double(mp_encode_int(-123)) check pos advanced
    ok 77 - mp_read_double(mp_encode_int(-123)) check result
    ok 78 - mp_read_double(mp_encode_int(-12345)) check success
    ok 79 - mp_read_double(mp_encode_int(-12345)) check pos advanced
    ok 80 - mp_read_double(mp_encode_int(-12345)) check result
    ok 81 - mp_read_double(mp_encode_int(-123456789)) check success
    ok 82 - mp_read_double(mp_encode_int(-123456789)) check pos advanced
    ok 83 - mp_read_double(mp_encode_int(-123456789)) check result
    ok 84 - mp_read_double(mp_encode_int(-1234567890000LL)) check success
    ok 85 - mp_read_double(mp_encode_int(-1234567890000LL)) check pos advanced
    ok 86 - mp_read_double(mp_encode_int(-1234567890000LL)) check result
    ok 87 - mp_read_double(mp_encode_int(-123456789123456789LL)) check fail
    ok 88 - mp_read_double(mp_encode_int(-123456789123456789LL)) check pos unchanged
    ok 89 - mp_read_double(mp_encode_float(6.565e6)) check success
    ok 90 - mp_read_double(mp_encode_float(6.565e6)) check pos advanced
    ok 91 - mp_read_double(mp_encode_float(6.565e6)) check result
    ok 92 - mp_read_double(mp_encode_double(-5.555)) check success
    ok 93 - mp_read_double(mp_encode_double(-5.555)) check pos advanced
    ok 94 - mp_read_double(mp_encode_double(-5.555)) check result
    ok 95 - mp_read_double(mp_encode_strl(100)) check fail
    ok 96 - mp_read_double(mp_encode_strl(100)) check pos unchanged
    # *** test_numbers: done ***
ok 23 - subtests
    1..5
    # *** test_overflow ***
    ok 1 - mp_check array overflow
    ok 2 - mp_check map overflow
    ok 3 - mp_check str overflow
    ok 4 - mp_check bin overflow
    ok 5 - mp_check str overflow
    # *** test_overflow: done ***
ok 24 - subtests
