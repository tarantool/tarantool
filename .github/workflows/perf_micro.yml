name: perf_micro

on:
  push:
    branches:
      - 'master'
      - 'release/**'
    tags:
      - '**'
    paths:
      - '.github/workflows/perf_micro.yml'
      - 'CMakeLists.txt'
      - 'cmake/**'
      - 'patches/**'
      - 'perf/**'
      - 'src/**'
      - 'third_party/**'
  pull_request:
  pull_request_target:
    types: [labeled]
  workflow_dispatch:
  workflow_call:
    inputs:
      submodule:
        description: Name of submodule to bump.
        required: true
        type: string
      revision:
        description: Git revision from submodule repository
        required: true
        type: string
      tarantool_revision:
        description: Git revision for the Tarantool repository
        required: false
        default: 'master'
        type: string
  schedule:
    - cron: '0 0 * * *'  # Once a day at midnight.

concurrency:
  # Update of a developer branch cancels the previously scheduled workflow
  # run for this branch. However, the 'master' branch, release branch, and
  # tag workflow runs are never canceled.
  #
  # We use a trick here: define the concurrency group as 'workflow run ID' +
  # 'workflow run attempt' because it is a unique combination for any run.
  # So it effectively discards grouping.
  #
  # Important: we cannot use `github.sha` as a unique identifier because
  # pushing a tag may cancel a run that works on a branch push event.
  group: ${{ (
    github.ref == 'refs/heads/master' ||
    startsWith(github.ref, 'refs/heads/release/') ||
    startsWith(github.ref, 'refs/tags/')) &&
    format('{0}-{1}', github.run_id, github.run_attempt) ||
    format('{0}-{1}-perf-micro', github.workflow, github.ref) }}
  cancel-in-progress: true

jobs:
  perf_micro:
    # Run on push to the 'master' and release branches of tarantool/tarantool
    # or on pull request if the 'notest' label is not set
    # or on pull request in the main repository if the
    # 'performance' label is set.
    if: github.repository_owner == 'tarantool' &&
        ( ( github.event_name != 'pull_request' &&
            github.event_name != 'pull_request_target' ) ||
          ( github.event_name == 'pull_request' &&
            !contains(github.event.pull_request.labels.*.name, 'notest') ) ||
          ( github.event_name == 'pull_request_target' &&
            contains(github.event.pull_request.labels.*.name, 'performance') ) )

    # 'performance' label _must_ be set only for the single runner
    # to guarantee that results are not dependent on the machine.
    # For runs whose statistics are not collected, it is OK to use
    # any runner.
    runs-on:
      - self-hosted
      - Linux
      - x86_64
      - ${{ (github.event_name != 'pull_request' ||
          github.event.pull_request.head.repo.full_name == github.repository) &&
          'performance' || 'regular' }}

    timeout-minutes: 60

    env:
      PERF_BRANCH: ${{ github.event.pull_request.head.ref || github.ref_name }}
      PERF_COMMIT: ${{ github.event.pull_request.head.sha || github.sha }}

    steps:
      - name: Prepare checkout
        uses: tarantool/actions/prepare-checkout@master
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
          submodules: recursive
          repository: tarantool/tarantool
          ref: ${{ inputs.tarantool_revision || env.PERF_COMMIT }}
      - uses: ./.github/actions/environment
      - name: Install deps
        uses: ./.github/actions/install-deps-debian
      - name: Optional submodule bump
        if: ${{ inputs.submodule }}
        uses: ./.github/actions/bump-submodule
        with:
          submodule: ${{ inputs.submodule }}
          revision: ${{ inputs.revision }}
      - name: setup environment
        # Run on push to the 'master' and release branches or on
        # non-fork pull requests. The script will fail on regular
        # runners.
        if: github.event_name != 'pull_request' ||
          github.event.pull_request.head.repo.full_name == github.repository
        run: sh ./perf/tools/setup_env.sh
      - name: test
        run: make -f .test.mk test-perf
        env:
          # The taskset alone will pin all the process threads
          # into a single (random) isolated CPU, see
          # https://bugzilla.kernel.org/show_bug.cgi?id=116701.
          # The workaround is using realtime scheduler for the
          # isolated task using chrt, e. g.:
          # sudo taskset 0xef chrt 50.
          # But this makes the process use non-standard, real-time
          # round-robin scheduling mechanism.
          # Hardware machine for benchmarking has a group of
          # isolated CPUs 1-24.
          BENCH_CMD: "taskset 0x01fffffe chrt 50"
      - name: Aggregate benchmark results
        run: make -f .test.mk test-perf-aggregate
      - name: Send statistics to InfluxDB
        # Run on push to the 'master' and release branches or on
        # non-fork pull requests (secrets are unavailable in fork
        # pull requests).
        if: github.event_name != 'pull_request' ||
          github.event.pull_request.head.repo.full_name == github.repository
        # TODO: For now, use the debug bucket for this PoC.
        # --silent -o /dev/null: Prevent dumping any reply part
        # in the output in case of an error.
        # --fail: Exit with the 22 error code is status >= 400.
        # --write-out: See the reason for the failure, if any.
        # --retry, --retry-delay: To avoid losing the results of
        # running after such a long job, try to retry sending the
        # results.
        run: >
          curl --request POST
          "${{ secrets.INFLUXDB_URL }}/api/v2/write?org=tarantool&bucket=perf-debug&precision=s"
          --write-out "%{http_code}"
          --retry 5
          --retry-delay 5
          --connect-timeout 120
          --fail --silent -o /dev/null
          --header "Authorization: Token ${{ secrets.INFLUXDB_TOKEN_DEBUG }}"
          --data-binary @./perf/output/summary.txt
      - name: Prepare data with performance results for analysis
        # Run on push to the 'master' and release branches or on
        # non-fork pull requests (secrets are unavailable in fork
        # pull requests).
        if: github.event_name != 'pull_request' ||
          github.event.pull_request.head.repo.full_name == github.repository
        run: |
          apt install -y python3-venv
          python3 -m venv venv_influx
          source ./venv_influx/bin/activate
          pip install influxdb-client==1.44.0 PyYAML==6.0.2
          mkdir -p perf_data
          python3 ./perf/tools/extract_perf_data.py \
            --influx_url ${{ env.INFLUXDB_URL }} \
            --influx_token ${{ env.INFLUXDB_TOKEN }} \
            --branch ${{ env.PERF_BRANCH }} \
            --config ./perf/output/config_bench.json \
            --base_path perf_data
        env:
          INFLUXDB_URL: ${{ secrets.INFLUXDB_URL }}
          INFLUXDB_TOKEN: ${{ secrets.INFLUXDB_TOKEN_EXTRACT_RESULTS }}
      # Beware, Apache Otava is tested against Python 3.8,
      # 3.9, and 3.10.
      - uses: actions/setup-python@v5
        with:
          python-version: '3.10'
      - name: Run performance results analysis
        # Run on push to the 'master' and release branches or on
        # non-fork pull requests (secrets are unavailable in fork
        # pull requests).
        if: github.event_name != 'pull_request' ||
          github.event.pull_request.head.repo.full_name == github.repository
        run: |
          python3 -m venv venv_otava
          source venv_otava/bin/activate
          curl -sSL https://install.python-poetry.org | python - --version 1.8.3
          export PATH="/root/.local/bin:$PATH"
          git clone https://github.com/apache/otava
          cd otava
          # Use intermediate version until the first release,
          # see https://github.com/apache/otava/issues/51.
          git reset --hard 73cf53e
          poetry install -v
          export OTAVA_CONFIG=$(realpath ../otava.yaml)
          MAGNITUDE=0.2
          otava regressions --magnitude ${MAGNITUDE} tarantool
          otava analyze --magnitude ${MAGNITUDE} tarantool
      - name: Send VK Teams message on failure
        if: failure()
        uses: ./.github/actions/report-job-status
        with:
          bot-token: ${{ secrets.VKTEAMS_BOT_TOKEN }}
      - name: artifacts
        uses: actions/upload-artifact@v4
        if: failure()
        with:
          name: release
          retention-days: 21
          path: ${{ env.VARDIR }}/artifacts
      - name: Upload artifacts to S3
        uses: ./.github/actions/s3-upload-artifact
        if: ( success() || failure() ) && ( github.ref == 'refs/heads/master' ||
          startsWith(github.ref, 'refs/heads/release/') ||
          startsWith(github.ref, 'refs/tags/') )
        with:
          job-name: ${{ github.job }}
          access-key-id: ${{ secrets.MULTIVAC_S3_ACCESS_KEY_ID }}
          secret-access-key: ${{ secrets.MULTIVAC_S3_SECRET_ACCESS_KEY }}
          source: ${{ env.VARDIR }}/artifacts
